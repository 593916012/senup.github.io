<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="p/3eeb.html"/>
      <url>p/3eeb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实习日记01-初遇兔厂</title>
      <link href="p/f0ac.html"/>
      <url>p/f0ac.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>早上走到哈工大公交站，才发现出发站点离我有点远，虽然只有两百多米，一开始我还以为路口那里可以直接上车呢。所幸的是公交车还是挺不错的，20分钟内可以到达公司门前的公交站，就不用像地铁一样还有走一点多公里，舒服。</p><p>到了公司，一切都是那么充满新意。好奇的我们参观了公司的五层楼，由于是装修公司，环境肯定还是不错的，比我之前去面试过的小公司都要好，可能这也是新搬来的楼的优势吧。</p><p>有一个导师对对碰的环节，说是让我们带着暗号的后半句去寻找自己的导师，很幸运的是，我的导师是一个打我两年的小姐姐，感觉人很亲切，很好说话。工位的电脑很大很新，据我导师说，她们都用的老式电脑没得换，很羡慕我哈哈哈。然后是椅子黑科技很多，大而且结实，中午的时候还可以倾斜，变成床，感觉就很满意，特别是椅子上带了个小枕头~</p><p>这一天里面比较费劲的是自我介绍了。几乎所有场合都是需要自我介绍，我是属于比较腼腆的一个人，熟络之后才放得开，所以对我就很不利，也是，初进职场，很多时候还是要学会改变自己啊，太闷了会让别人很不好办吧。</p><p>然后看电脑看久了眼睛开始酸胀，本质上是由于我最近上火牙疼导致说牙髓炎，进而又影响到右眼，就很麻烦，本来打算听爸妈的话，饮食清淡点，多吃消炎药。</p><p>结果呢，公司的leader太好了，福利太好了。午餐的时候报销了一顿川菜大餐，好像是四百多，晚上的时候吃肥牛大餐，leader请了一千八百多，相比其他部门来说属实阔气了好多。然而也就是这样，晚上九点多才回到房子，然后开始牙疼了，伤脑筋哦~</p><p>今天认识的小伙伴都很好，对我都超棒的，特别是俊哥，我们就好像自来熟哈哈哈哈</p><p>可以改进的地方：饭局的交谈实在苦手</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题总结</title>
      <link href="p/6385.html"/>
      <url>p/6385.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>解题思路<br>常见的背包问题有1、组合问题。2、True、False问题。3、最大最小问题。</p><a id="more"></a><blockquote><p>以下题目整理来自大神CyC，github地址：<br>github<br>我在大神整理的基础上，又做了细分的整理。分为三类。</p></blockquote><h1 id="组合问题："><a href="#组合问题：" class="headerlink" title="组合问题："></a>组合问题：</h1><ol start="377"><li><p>组合总和 Ⅳ</p></li><li><p>目标和</p></li><li><p>零钱兑换 II</p></li></ol><pre><code># True、False问题：</code></pre><ol start="380"><li><p>单词拆分</p></li><li><p>分割等和子集</p><h1 id="3、最大最小问题："><a href="#3、最大最小问题：" class="headerlink" title="3、最大最小问题："></a>3、最大最小问题：</h1></li><li><p>一和零</p></li><li><p>零钱兑换</p></li></ol><p>组合问题公式</p><p>dp[i] += dp[i-num]<br>True、False问题公式</p><p>dp[i] = dp[i] or dp[i-num]<br>最大最小问题公式</p><p>dp[i] = min(dp[i], dp[i-num]+1)或者dp[i] = max(dp[i], dp[i-num]+1)<br>以上三组公式是解决对应问题的核心公式。</p><p>当然拿到问题后，需要做到以下几个步骤：<br>1.分析是否为背包问题。<br>2.是以上三种背包问题中的哪一种。<br>3.是0-1背包问题还是完全背包问题。也就是题目给的nums数组中的元素是否可以重复使用。<br>4.如果是组合问题，是否需要考虑元素之间的顺序。需要考虑顺序有顺序的解法，不需要考虑顺序又有对应的解法。</p><p>接下来讲一下背包问题的判定<br>背包问题具备的特征：给定一个target，target可以是数字也可以是字符串，再给定一个数组nums，nums中装的可能是数字，也可能是字符串，问：能否使用nums中的元素做各种排列组合得到target。</p><h1 id="背包问题技巧："><a href="#背包问题技巧：" class="headerlink" title="背包问题技巧："></a>背包问题技巧：</h1><p>1.如果是0-1背包，即数组中的元素不可重复使用，nums放在外循环，target在内循环，且内循环倒序；</p><p>for num in nums:<br>    for i in range(target, nums-1, -1):<br>2.如果是完全背包，即数组中的元素可重复使用，nums放在外循环，target在内循环。且内循环正序。</p><p>for num in nums:<br>    for i in range(nums, target+1):<br>3.如果组合问题需考虑元素之间的顺序，需将target放在外循环，将nums放在内循环。</p><p>for i in range(1, target+1):<br>    for num in nums:<br>代码</p><p>class Solution:<br>    def combinationSum4(self, nums: List[int], target: int) -&gt; int:<br>        if not nums:<br>            return 0<br>        dp = [0] * (target+1)<br>        dp[0] = 1<br>        for i in range(1,target+1):<br>            for num in nums:<br>                if i &gt;= num:<br>                    dp[i] += dp[i-num]<br>        return dp[target]<br>以上是我对背包问题的总结，希望对你有帮助。要是觉得不错，点个赞吧。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础</title>
      <link href="p/366f.html"/>
      <url>p/366f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>施工中…</p><a id="more"></a><h2 id="描述一下值传递和引用传递的区别。"><a href="#描述一下值传递和引用传递的区别。" class="headerlink" title="描述一下值传递和引用传递的区别。"></a>描述一下值传递和引用传递的区别。</h2><p>都是值传递</p><h2 id="和-equals-区别是什么、String-中的-equals-方法是如何重写的、为什么要重写-equals-方法、为什么要重写-hashCode-方法。"><a href="#和-equals-区别是什么、String-中的-equals-方法是如何重写的、为什么要重写-equals-方法、为什么要重写-hashCode-方法。" class="headerlink" title="== 和 equals 区别是什么、String 中的 equals 方法是如何重写的、为什么要重写 equals 方法、为什么要重写 hashCode 方法。"></a>== 和 equals 区别是什么、String 中的 equals 方法是如何重写的、为什么要重写 equals 方法、为什么要重写 hashCode 方法。</h2><p>都是比较内存地址，如果方法被重写则比较内容，比如String</p><h2 id="String-s1-new-String-“abc”-、String-s2-“abc”、s1-s2-。语句1在内存中创建了几个对象。"><a href="#String-s1-new-String-“abc”-、String-s2-“abc”、s1-s2-。语句1在内存中创建了几个对象。" class="headerlink" title="String s1 = new String(“abc”)、String s2 = “abc”、s1 == s2 。语句1在内存中创建了几个对象。"></a>String s1 = new String(“abc”)、String s2 = “abc”、s1 == s2 。语句1在内存中创建了几个对象。</h2><p>一般会在字符串池和堆中创建对象</p><h2 id="String-为什么是不可变的、jdk源码中的-String-如何定义的、为什么这么设计。"><a href="#String-为什么是不可变的、jdk源码中的-String-如何定义的、为什么这么设计。" class="headerlink" title="String 为什么是不可变的、jdk源码中的 String 如何定义的、为什么这么设计。"></a>String 为什么是不可变的、jdk源码中的 String 如何定义的、为什么这么设计。</h2><p>final 修饰，设计为不可变是为了安全以及支持字符串池</p><h2 id="请描述一下-static-关键字和-final-关键字的用法。"><a href="#请描述一下-static-关键字和-final-关键字的用法。" class="headerlink" title="请描述一下 static 关键字和 final 关键字的用法。"></a>请描述一下 static 关键字和 final 关键字的用法。</h2><p>static修饰表示可以通过类名访问相应的被修饰方法和被修饰变量，</p><p>final修饰基本变量不可变，修饰引用变量内存地址不可变值可变，修饰方法表示方法不可被重写，修饰类表示该类不能被继承</p><h2 id="接口和抽象类的区别是什么。"><a href="#接口和抽象类的区别是什么。" class="headerlink" title="接口和抽象类的区别是什么。"></a>接口和抽象类的区别是什么。</h2><p>接口可以实现多个，抽象类只能被继承一个</p><p>接口除了final修饰的变量和静态变量，抽象类可以有抽象方法和非抽象方法</p><p>抽象类支持更多的修饰访问符</p><p>实现接口的类的权限要大于接口，而抛出的异常是要小于接口定义的范围</p><hr><h2 id="重载和重写的区别。"><a href="#重载和重写的区别。" class="headerlink" title="重载和重写的区别。"></a>重载和重写的区别。</h2><p>重载是在一个类里面多态的体现。重载中看方法名一致，参数的顺序个数类型可以多种，返回值不作为判断重载的依据。</p><p>重写是在子类和父类之间的一种多态的体现。重写要求方法名 返回值 参数顺序保持一致。</p><h2 id="面向对象的三大特性，谈谈你对-xx-的理解。"><a href="#面向对象的三大特性，谈谈你对-xx-的理解。" class="headerlink" title="面向对象的三大特性，谈谈你对 xx 的理解。"></a>面向对象的三大特性，谈谈你对 xx 的理解。</h2><p>封装 继承 多态</p><h2 id="考察的是基本类型的转换，及原码反码补码的运算。"><a href="#考察的是基本类型的转换，及原码反码补码的运算。" class="headerlink" title="考察的是基本类型的转换，及原码反码补码的运算。"></a>考察的是基本类型的转换，及原码反码补码的运算。</h2><p>Integer.intvalue() Integer.valueOf()</p><h2 id="byte-的取值范围是多少、怎么计算出来的。"><a href="#byte-的取值范围是多少、怎么计算出来的。" class="headerlink" title="byte 的取值范围是多少、怎么计算出来的。"></a>byte 的取值范围是多少、怎么计算出来的。</h2><p>HashMap 相关、HashMap 和 Hashtable 的区别、HashMap 和 HashSet 区别、HashMap 底层实现、HashMap 的长度为什么是 2 的幂次方、HashMap 多线程操作导致死循环问题、HashMap 的线程安全实现有哪些、ConcurrentHashMap 的底层实现。<br>Integer 缓存池。<br>UTF-8 和 Unicode 的关系。<br>项目为 UTF-8 环境，char c = ‘中’，是否合法。<br>Arrays.asList 获得的 List 使用时需要注意什么。</p><h2 id="Collection-和-Collections-区别。"><a href="#Collection-和-Collections-区别。" class="headerlink" title="Collection 和 Collections 区别。"></a>Collection 和 Collections 区别。</h2><p>collections是对集合使用的一个工具类 提高了排序 搜索等方法</p><h2 id="你知道-fail-fast-和-fail-safe-吗。"><a href="#你知道-fail-fast-和-fail-safe-吗。" class="headerlink" title="你知道 fail-fast 和 fail-safe 吗。"></a>你知道 fail-fast 和 fail-safe 吗。</h2><p>ArrayList 和 LinkedList 和 Vector 的区别。<br>Set 和 List 区别、Set 如何保证元素不重复。<br>UTF-8 与 GBK 互转、为什么会乱码。</p><h2 id="为什么-Java-是解释性语言。"><a href="#为什么-Java-是解释性语言。" class="headerlink" title="为什么 Java 是解释性语言。"></a>为什么 Java 是解释性语言。</h2><p>因为它是经过编译后字节码再进行逐行解释的语言。</p><p>ConcurrentHashMap 1.7和1.8的区别：整体结构；put（）方法、get（）方法、resize（）方法、size（）方法</p><h2 id="地址栏输入-URL-发生了什么。"><a href="#地址栏输入-URL-发生了什么。" class="headerlink" title="地址栏输入 URL 发生了什么。"></a>地址栏输入 URL 发生了什么。</h2><ul><li>dns解析</li><li>tcp连接</li><li>http请求</li><li>服务器处理请求返回报文</li><li>浏览器渲染到视图</li></ul><h2 id="组合和聚合的区别"><a href="#组合和聚合的区别" class="headerlink" title="组合和聚合的区别"></a>组合和聚合的区别</h2><p>组合的话，部分不能脱离整体。比如人和 腿</p><p>聚合的话，部分可以脱离整体而存在。比如人和电脑</p><h2 id="讲一下-CMS-垃圾回收器。"><a href="#讲一下-CMS-垃圾回收器。" class="headerlink" title="讲一下 CMS 垃圾回收器。"></a>讲一下 CMS 垃圾回收器。</h2><p>使用的是标记清除算法</p><h2 id="JDK-动态代理和-GClib-动态代理、JDK-动态代理具体实现原理、CGLib-动态代理、两者对比。"><a href="#JDK-动态代理和-GClib-动态代理、JDK-动态代理具体实现原理、CGLib-动态代理、两者对比。" class="headerlink" title="JDK 动态代理和 GClib 动态代理、JDK 动态代理具体实现原理、CGLib 动态代理、两者对比。"></a>JDK 动态代理和 GClib 动态代理、JDK 动态代理具体实现原理、CGLib 动态代理、两者对比。</h2><h2 id="Threadlocal-内存泄漏问题。"><a href="#Threadlocal-内存泄漏问题。" class="headerlink" title="Threadlocal 内存泄漏问题。"></a>Threadlocal 内存泄漏问题。</h2><h2 id="StringBuilder-安全怎么实现的、详细描述怎么扩容的。"><a href="#StringBuilder-安全怎么实现的、详细描述怎么扩容的。" class="headerlink" title="StringBuilder 安全怎么实现的、详细描述怎么扩容的。"></a>StringBuilder 安全怎么实现的、详细描述怎么扩容的。</h2><p>主要是使用了一个synchronize关键字，扩容过程是将数组复制到一个新的数组，然后将地址引用赋值给原来的stringbuilder</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="p/7056.html"/>
      <url>p/7056.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>施工中…</p><a id="more"></a><h2 id="GET-POST-区别"><a href="#GET-POST-区别" class="headerlink" title="GET/POST 区别"></a>GET/POST 区别</h2><ol><li>GET 用于获取资源，而 POST 用于传输实体主体。</li><li>Get请求在路径上，post请求在请求体中</li><li>Get传输速度更快，因为post为了保证安全多了几次握手</li><li>Get传输大小容量有限制，Post则没有</li></ol><h2 id="UDP-TCP区别"><a href="#UDP-TCP区别" class="headerlink" title="UDP/TCP区别"></a>UDP/TCP区别</h2><ol><li>tcp报文段面向连接，传输安全可靠，拥有切分数据块，编号顺序传输+检验和，三次握手，超时重传，流量控制，拥塞控制等机制</li><li>udp用户数据报无连接，提供尽可能交付，速度快。首部字段较为简单，有四个：源端口，目的端口，长度，校验和</li><li>tcp用于安全可靠的传输，比如文件传输ftp 右键传输 smtp pop等</li><li>udp用于即时通讯，比如QQ聊天等</li></ol><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>以及衍生出来一些列的 TCP 的问题：什么是 TIME-WAIT、为什么可以是三次挥手、为什么不能是两次握手、流量控制、滑动窗口、Nagle 算法、糊涂窗口综合症、拥塞控制、慢启动、拥塞避免、快重传、快恢复、长连接 VS 短连接、应用场景是什么。</p><ol><li>发送SYN = 1，携带初始序号seq = x</li><li>发送SYN=1，Ack = 1，确认序号为x+1 再发送自己的初始序号seq = y</li><li>发现Ack = 1，确认序号为y+1 发送序号为x+1</li></ol><p>tpc采用的是全双工通信，需要确保发送方和接收方的发送接收全都正常。</p><p>第三次握手可以防止网络滞留出现端口错误。比如主机a由于网络滞留重发了新的连接，如果只是两次握手的话那么主机B会开启两个端口处理同样的请求，这样就容易造成错误。如果采用三次握手，那么客户端确认的时候只会确认一次。</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><ol><li><p>发送fin = 1 seq = u</p></li><li><p>syn = 1 ack = 1  确认u+1 seq = v</p></li><li><p>fin = 1 ack = 1 seq = w  ack = u+1</p></li><li><p>ack = 1 ack = w+1  seq = u+1</p><p>TIME-WAIT为什么存在？</p></li></ol><p>这个时间设置为2msl,主要是为了接收端能够收到信息，如果接收端收不到会在这个时间重传fin，那么客户端能够进行重传。</p><p>这个时间足够让旧的报文段消失，不会干扰新的连接请求。</p><h2 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h2><p>tcp发出报文段后，会启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到，则重发这个报文段。</p><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><p>TCP利用可变大小的滑动窗口实现流量控制。当接收方来不及处理发送方的报文段的时候，能提示发送方降低发送速率，防止包丢失。</p><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><p>当网络拥塞时减少数据的发送。维护了一个拥塞窗口。</p><p>用到了四种算法  慢启动 拥塞避免  快重传 快回恢复</p><h2 id="ARQ"><a href="#ARQ" class="headerlink" title="ARQ"></a>ARQ</h2><p>自动重传请求</p><p>包含了停止等待aqp和连续arq，主要原理是 发送方发送分组后，要等待目的端确认后才发送下一个分组。</p><p>连续arq是维护了一个发送窗口，窗口内的分组可以连续发送，只需要确认最后一个分组，就可以表明所有分组正确收到。缺点：中间丢失的分组需要重传</p><h2 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h2><p>地址解析协议</p><p>将IP地址解析为物理的mac地址</p><h2 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h2><p>请求报文和响应报文中有一个请求头，上面表示connection：keep-alive 用于长连接</p><p>长连接解决了短连接频繁创建销毁连接等耗费资源的问题</p><h2 id="HTTP-1-0、1-1、2-0"><a href="#HTTP-1-0、1-1、2-0" class="headerlink" title="HTTP 1.0、1.1、2.0"></a>HTTP 1.0、1.1、2.0</h2><p>1.1比1.0 多了</p><ol><li>支持了长连接（减少资源消耗）流水线（一个连接传输多个请求）</li><li>新增24个错误码，比如409资源与当前状态冲突 410资源被删除等</li><li>引入多种缓存控制策略</li><li>允许只请求资源某个部分，进行带宽优化，节省带宽</li></ol><hr><p>HTTP/1.x 实现简单是以牺牲性能为代价的（后面为2.0的改进）：</p><ul><li>客户端需要使用多个连接才能实现并发和缩短延迟；—&gt;二进制分帧层，承载了任意数量的双向数据流</li><li>不会压缩请求和响应首部，从而导致不必要的网络流量；—&gt;维护和更新一个包含之前见过的首部字段表，从而避免了重复传输。</li><li>不支持有效的资源优先级，致使底层 TCP 连接的利用率低下。—&gt;服务端推送相关资源</li></ul><hr><h2 id="说一下-HTTPS-的流程、SSL-是什么、什么是非对称加密、对称加密、RSA-具体实现"><a href="#说一下-HTTPS-的流程、SSL-是什么、什么是非对称加密、对称加密、RSA-具体实现" class="headerlink" title="说一下 HTTPS 的流程、SSL 是什么、什么是非对称加密、对称加密、RSA 具体实现"></a>说一下 HTTPS 的流程、SSL 是什么、什么是非对称加密、对称加密、RSA 具体实现</h2><p>ssl安全套接层，运行在tcp/ip上，而https运行在ssl/tls上</p><hr><p><strong>HTTPS</strong>（全称：Hyper Text Transfer Protocol over Secure Socket Layer 超文本传输安全协议）<br>HTTPS在传统的HTTP和TCP之间加了一层用于加密解密的SSL/TLS层（安全套接层Secure Sockets Layer/安全传输层Transport Layer Security）层。使用HTTPS必须要有一套自己的数字证书（包含公钥和私钥）。</p><p><strong>HTTPS解决的问题</strong></p><p>信息加密传输：第三方无法窃听；<br>校验机制：一旦被篡改，通信双方会立刻发现；<br>身份证书：防止身份被冒充。<br><strong>HTTPS加密过程：</strong></p><p>客户端请求服务器获取证书公钥<br>客户端(SSL/TLS)解析证书（无效会弹出警告）<br>生成随机值<br>用公钥加密随机值生成密钥<br>客户端将秘钥发送给服务器<br>服务端用私钥解密秘钥得到随机值<br>将信息和随机值混合在一起进行对称加密<br>将加密的内容发送给客户端<br>客户端用秘钥解密信息</p><p>加密过程使用了<strong>对称加密和非对称加密。</strong></p><p>对称加密: 客户端和服务端采用相同的密钥经行加密</p><pre><code>encrypt(明文，秘钥) = 密文decrypt(密文，秘钥) = 明文</code></pre><p>非对称加密：客户端通过公钥加密。服务端通过私钥解密</p><pre><code>encrypt(明文，公钥) = 密文decrypt(密文，私钥) = 明文</code></pre><p>因为TLS握手的过程中采用了非对称加密，客户端本身不知道服务器的秘钥，这样通信就不会被中间人劫持。此外这一步服务端还提供了证书，并且可能要求客户端提供证书。关于证书下文会提到，只要有了证书，就能保证和你通信的对方是真实的，而不是别人伪造的。</p><p>那然后<strong>验证证书</strong>呢？</p><p>客户端获取到了站点证书，拿到了站点的公钥<br>客户端找到其站点证书颁发者的信息<br>站点证书的颁发者验证服务端站点是否可信<br>往上回溯，找到根证书颁发者<br>通过根证书颁发者一步步验证站点证书颁布者是否可信<br><strong>附：</strong></p><p><strong>HTTPS默认使用443端口，而HTTP默认使用80端口。</strong><br><strong>TLS就是从SSL发展而来的，只是SSL发展到3.0版本后改成了TLS</strong><br><strong>第一次请求中TLS握手的代价很大</strong><br><strong>后续的请求会共用第一次请求的协商结果</strong></p><hr><p>对称加密：密钥只有一个，加密解密都用同一个密钥，加解密速度快，比如DES算法 AES算法</p><p>非对称加密：密钥成对存在，公钥加密需要私钥解密，私钥加密需要公钥解密，比如RSA、DSA算法</p><p>RSA 就是这样一种非对称加密方式，也就是：</p><ul><li>使用算法可以生成两把钥匙 A 和 B</li><li>使用 A 加密的信息，使用 B 可以解开</li><li>使用 B 加密的信息，使用 A 可以解开</li></ul><hr><h2 id="OSI-七层模型是什么、都有哪些协议、TCP-IP-四层是什么。"><a href="#OSI-七层模型是什么、都有哪些协议、TCP-IP-四层是什么。" class="headerlink" title="OSI 七层模型是什么、都有哪些协议、TCP/IP 四层是什么。"></a>OSI 七层模型是什么、都有哪些协议、TCP/IP 四层是什么。</h2><p>七层多了表示层和会话层 </p><p>四层中数据链路层和物理层合并为网络接口层。</p><h2 id="DNS、ARP-协议原理"><a href="#DNS、ARP-协议原理" class="headerlink" title="DNS、ARP 协议原理"></a>DNS、ARP 协议原理</h2><p>网络客户端就是我们平常使用的电脑，打开浏览器，输入一个域名。比如输入<a href="http://www.163.com，这时，你使用的电脑会发出一个DNS请求到本地DNS服务器。本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。" target="_blank" rel="noopener">www.163.com，这时，你使用的电脑会发出一个DNS请求到本地DNS服务器。本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。</a></p><p>查询<a href="http://www.163.com的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果。如果没有，本地DNS服务器还要向DNS根服务器进行查询。" target="_blank" rel="noopener">www.163.com的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果。如果没有，本地DNS服务器还要向DNS根服务器进行查询。</a></p><p>根DNS服务器没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。</p><p>本地DNS服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址。</p><p>最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。</p><hr><p>现假设主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01；</p><p>主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02；</p><p>当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：</p><blockquote><p>第1步：根据主机A上的<a href="http://baike.baidu.com/view/149989.htm" target="_blank" rel="noopener">路由表</a>内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。</p><p>第2步：如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广 播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址 匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。</p><p>第3步：主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。</p><p>第4步：主机B将包含其MAC地址的ARP回复消息直接发送回主机A。</p><p>第5步：当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。</p></blockquote><h2 id="地址栏输入-URL-发生了什么"><a href="#地址栏输入-URL-发生了什么" class="headerlink" title="地址栏输入 URL 发生了什么"></a>地址栏输入 URL 发生了什么</h2><ul><li>dns解析</li><li>tcp连接</li><li>http请求</li><li>服务器处理请求返回报文</li><li>浏览器渲染到视图</li></ul><h2 id="WebSocket-是什么"><a href="#WebSocket-是什么" class="headerlink" title="WebSocket 是什么"></a>WebSocket 是什么</h2><h2 id="一些网络安全问题"><a href="#一些网络安全问题" class="headerlink" title="一些网络安全问题"></a><a href="https://www.cnblogs.com/rinack/p/11549410.html" target="_blank" rel="noopener">一些网络安全问题</a></h2><p>比如 DOS 攻击如何解决、DNS 欺骗如何解决、ARP欺骗、SQL注入、XSS、CSRF、iframe 安全问题、本地存储数据问题、第三方依赖的安全性问题。</p><hr><p>DOS 拒绝服务，通过消耗网络宽带或系统资源，使网络或计算机不能提供正常的服务。</p><p>DDOS 凡是攻击者通过控制在网络上的傀儡主机，同时发动他们向目标主机进行拒绝服务攻击的方式称为分布式拒绝服务攻击。</p><ul><li>设置复杂口令，减低系统被控制的可能性</li><li>关闭不必要的端口与服务</li></ul><hr><p>DNS欺骗就是攻击者冒充域名服务器的一种欺骗行为。</p><p>原理：如果可以冒充域名服务器，然后把查询的IP地址设为攻击者的IP地址，这样的话，用户上网就只能看到攻击者的主页，而不是用户想要取得的网站的主页 了，这就是DNS欺骗的基本原理。DNS欺骗其实并不是真的“黑掉”了对方的网站，而是冒名顶替、招摇撞骗罢了。</p><p>用ＩＰ访问重要的服务，这样至少可以避开ＤＮＳ欺骗攻击。最根本的解决办法就是加密所有对外的数据流，对服务器来说就是尽量使用SSH之类的有加密支持的协议，对一般用户应该用ＰＧＰ之类的软件加密所有发到网络上的数据。</p><hr><p>ARP欺骗的运作原理是由攻击者发送假的ARP数据包到网上，尤其是送到网关上。其目的是要让送至特定的IP地址的流量被错误送到攻击者所取代的地方。因此攻击者可将这些流量另行转送到真正的网关（被动式数据包嗅探，passive sniffing）或是篡改后再转送（中间人攻击，man-in-the-middle attack）。攻击者亦可将ARP数据包导到不存在的<a href="https://baike.baidu.com/item/MAC地址" target="_blank" rel="noopener">MAC地址</a>以达到阻断服务攻击的效果，例如netcut软件。</p><p>例如某一的IP地址是192.168.0.254，其MAC地址为00-11-22-33-44-55，网上上的计算机内ARP表会有这一笔ARP记录。攻击者发动攻击时，会大量发出已将192.168.0.254的MAC地址篡改为00-55-44-33-22-11的ARP数据包。那么网上上的计算机若将此伪造的ARP写入自身的ARP表后，计算机若要透过网上网关连到其他计算机时，数据包将被导到00-55-44-33-22-11这个MAC地址，因此攻击者可从此MAC地址截收到数据包，可篡改后再送回真正的网关，或是什么也不做，让网上无法连线</p><p>最常用的方法就是做双绑定， 本地跟路由都做了mac地址绑定</p><hr><p>SQL注入是比较常见的网络攻击方式之一，主要是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，实现无帐号登录，甚至篡改数据库。</p><ul><li>对用户的输入进行校验，使用正则表达式过滤传入的参数;</li><li>使用参数化语句，不要拼接sql，也可以使用安全的存储过程;</li><li>不要使用管理员权限的数据库连接，为每个应用使用权限有限的数据库连接;</li><li>检查数据存储类型;</li><li>重要的信息一定要加密;</li></ul><hr><p>跨站脚本(cross site script)简称为XSS，是一种经常出现在web应用中的计算机安全漏洞，也是web中最主流的攻击方式。</p><p>XSS是指恶意攻击者利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点，进而添加一些代码，嵌入到web页面中去，使别的用户访问都会执行相应的嵌入代码。</p><ul><li>XSS的根源主要是没完全过滤客户端提交的数据 ，所以重点是要过滤用户提交的信息。</li><li>将重要的cookie标记为http only, 这样的话js 中的document.cookie语句就不能获取到cookie了。</li><li>只允许用户输入我们期望的数据。例如：age用户年龄只允许用户输入数字，而数字之外的字符都过滤掉。</li><li>对数据进行Html Encode 处理：用户将数据提交上来的时候进行HTML编码，将相应的符号转换为实体名称再进行下一步的处理。</li><li>过滤或移除特殊的Html标签。</li><li>过滤js事件的标签。例如 “onclick=”, “onfocus” 等。</li></ul><hr><p>CSRF(Cross-site request forgery)跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。</p><p>XSS主要是利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求，来利用受信任的网站。与XSS攻击相比，CSRF更具危险性。</p><ul><li>重要数据交互采用POST进行接收，当然是用POST也不是万能的，伪造一个form表单即可破解。</li><li>使用验证码，只要是涉及到数据交互就先进行验证码验证，这个方法可以完全解决CSRF。</li><li>但是出于用户体验考虑，网站不能给所有的操作都加上验证码。因此验证码只能作为一种辅助手段，不能作为主要解决方案。</li><li>验证HTTP Referer字段，该字段记录了此次HTTP请求的来源地址，最常见的应用是图片防盗链。</li><li>为每个表单添加令牌token并验证。</li></ul><hr><h2 id="HTTP-是不保存状态的协议、那么如何保存用户状态"><a href="#HTTP-是不保存状态的协议、那么如何保存用户状态" class="headerlink" title="HTTP 是不保存状态的协议、那么如何保存用户状态"></a>HTTP 是不保存状态的协议、那么如何保存用户状态</h2><p>HTTP 是一种不保存状态，即无状态（stateless）协议。也就是说 HTTP 协议自身不对请求和响应之间的通信状态进行保存。那么我们保存用户状态呢？Session 机制的存在就是为了解决这个问题，Session 的主要作用就是通过服务端记录用户的状态。典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了（一般情况下，服务器会在一定时间内保存这个 Session，过了时间限制，就会销毁这个Session）。</p><p>在服务端保存 Session 的方法很多，最常用的就是内存和数据库(比如是使用内存数据库redis保存)。既然 Session 存放在服务器端，那么我们如何实现 Session 跟踪呢？大部分情况下，我们都是通过在 Cookie 中附加一个 Session ID 来方式来跟踪。</p><hr><h2 id="Cookie-的作用是什么、和-Session-有什么区别"><a href="#Cookie-的作用是什么、和-Session-有什么区别" class="headerlink" title="Cookie 的作用是什么、和 Session 有什么区别"></a>Cookie 的作用是什么、和 Session 有什么区别</h2><p>Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。</p><p><strong>Cookie 一般用来保存用户信息</strong> 比如①我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了；②一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)；③登录一次网站后访问网站其他页面不需要重新登录。<strong>Session 的主要作用就是通过服务端记录用户的状态。</strong> 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。</p><p>Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。</p><p>Cookie 存储在客户端中，而Session存储在服务器上，相对来说 Session 安全性更高。如果要在 Cookie 中存储一些敏感信息，不要直接写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。</p><hr><h2 id="Session-的实现机制是什么、分布式环境下有什么注意事项、如果注销-Session、设置-Session-的时长如何操作、默认时长是多少。"><a href="#Session-的实现机制是什么、分布式环境下有什么注意事项、如果注销-Session、设置-Session-的时长如何操作、默认时长是多少。" class="headerlink" title="Session 的实现机制是什么、分布式环境下有什么注意事项、如果注销 Session、设置 Session 的时长如何操作、默认时长是多少。"></a>Session 的实现机制是什么、分布式环境下有什么注意事项、如果注销 Session、设置 Session 的时长如何操作、默认时长是多少。</h2><p>session的常见实现形式是会话cookie（session cookie），即未设置过期时间的cookie，这个cookie的默认生命周期为浏览器会话期间，只要关闭浏览器窗口，cookie就消失了。实现机制是当用户发起一个请求的时候，服务器会检查该请求中是否包含sessionid，如果未包含，则系统会创造一个名为JSESSIONID的输出 cookie返回给浏览器(只放入内存，并不存在硬盘中)，并将其以HashTable的形式写到服务器的内存里面；当已经包含sessionid是，服务端会检查找到与该session相匹配的信息，如果存在则直接使用该sessionid，若不存在则重新生成新的 session。这里需要注意的是session始终是有服务端创建的，并非浏览器自己生成的。　但是浏览器的cookie被禁止后session就需要用get方法的URL重写的机制或使用POST方法提交隐藏表单的形式来实现。</p><hr><p>各种协议与 HTTP 协议之间的关系。<br>Servlet、Filter 和 Listener 分别是什么，用在什么地方，JSP 页面如何进行处理。</p><h2 id="请求转发、URL-重定向和包含有什么区别，如何实现"><a href="#请求转发、URL-重定向和包含有什么区别，如何实现" class="headerlink" title="请求转发、URL 重定向和包含有什么区别，如何实现"></a>请求转发、URL 重定向和包含有什么区别，如何实现</h2><p>转发只是服务器做的一次跳转，地址栏不变，使用forward</p><p>重定向是采用重定向状态码做的一次跳转，使用redirect</p><hr><h2 id="如何判断远程机器上某个端口是否开启，项目中需要查看域名在本地的解析-IP-，如何操作。"><a href="#如何判断远程机器上某个端口是否开启，项目中需要查看域名在本地的解析-IP-，如何操作。" class="headerlink" title="如何判断远程机器上某个端口是否开启，项目中需要查看域名在本地的解析 IP ，如何操作。"></a>如何判断远程机器上某个端口是否开启，项目中需要查看域名在本地的解析 IP ，如何操作。</h2><p>第一步：先判断网络是否接通,输入dos命令：ping 目标主机IP地址</p><p>第二步：判断是否可以连接到端口：telnet 目标主机IP地址 端口号</p><hr><p>1、<strong>dig</strong> +<strong>short</strong> blog.csdn.net</p><p>2、<strong>host</strong> blog.csdn.net</p><p>3、<strong>nslookup</strong> blog.csdn.net</p><p>4、<strong>ping</strong> blog.csdn.net</p><hr><p>Servlet 中，调用 JSP 展示元素和返回 String（即 api，一般是 json 数据）有什么区别。<br>nginx + tomcat 模式下，服务器段如何获取客户端请求 IP 。</p><h2 id="Servlet-的生命周期是什么。"><a href="#Servlet-的生命周期是什么。" class="headerlink" title="Servlet 的生命周期是什么。"></a>Servlet 的生命周期是什么。</h2><p>Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：</p><ul><li>Servlet 通过调用 <strong>init ()</strong> 方法进行初始化。</li><li>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。</li><li>Servlet 通过调用 <strong>destroy()</strong> 方法终止（结束）。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><hr><p>Servlet 是否是线程安全的。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm</title>
      <link href="p/91c7.html"/>
      <url>p/91c7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h2 id="JVM内存模型"><a href="#JVM内存模型" class="headerlink" title="JVM内存模型"></a>JVM内存模型</h2><p>JMM是Java定义的一套程序访问变量的方法。</p><h2 id="程序计数器（记录当前线程）"><a href="#程序计数器（记录当前线程）" class="headerlink" title="程序计数器（记录当前线程）"></a>程序计数器（记录当前线程）</h2><p>程序计数器就是虚拟机用来记录当前运行的字节码指令的位置。</p><p>当发现上下文切换的时候，能够让线程回到他所执行的位置。</p><p>程序计数器是私有的，目的也是为了能够让程序回到正确的位置。</p><p>也是唯一一个不会出现内存溢出的区域、</p><h2 id="Java栈（虚拟机栈）"><a href="#Java栈（虚拟机栈）" class="headerlink" title="Java栈（虚拟机栈）"></a>Java栈（虚拟机栈）</h2><p>虚拟机栈是用了存放局部变量表，动态链接，操作数栈，出口信息等信息。</p><p>局部变量表放的是8中基本数据类型和一些引用类型的变量。</p><p>操作数栈也常被称为操作栈，它是一个后入先出栈。JVM底层字节码指令集是基于栈类型的，所有的操作码都是对操作数栈上的数据进行操作，对于每一个方法的调用，JVM会建立一个操作数栈，以供计算使用。</p><p>  每个栈帧都包含一个<strong>指向运行时常量池中该栈帧所属性方法的引</strong>用，持有这个引用是为了支持方法调用过程中的动态连接。在Class文件的常量池中存有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用一部分会在类加载阶段或第一次使用的时候转化为直接引用，这种转化称为<strong>静态解析</strong>。另外一部分将在每一次的运行期期间转化为直接引用，这部分称为<strong>动态连接</strong>。</p><blockquote><p>当一个方法被执行后，有两种方式退出这个方法。</p><p>第一种方式是执行引擎遇到任意一个方法返回的字节码指令，这时候可能会有返回值传递给上层的方法调用者(调用当前方法的的方法称为调用者)，是否有返回值和返回值的类型将根据遇到何种方法返回指令来决定，这种退出方法方式称为<strong>正常完成出口(Normal Method Invocation Completion)</strong>。</p><p>另外一种退出方式是，在方法执行过程中遇到了异常，并且这个异常没有在方法体内得到处理，无论是Java虚拟机内部产生的异常，还是代码中使用athrow字节码指令产生的异常，只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出，这种退出方式称为<strong>异常完成出口(Abrupt Method Invocation Completion)</strong>。</p><p>一个方法使用异常完成出口的方式退出，是不会给它的调用都产生任何返回值的。   无论采用何种方式退出，在方法退出之前，都需要返回到方法被调用的位置，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者PC计数器的值就可以作为返回地址，栈帧中很可能会保存这个计数器值。而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。 方法退出的过程实际上等同于把当前栈帧出栈，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，把返回值(如果有的话)压入调用都栈帧的操作数栈中，调用PC计数器的值以指向方法调用指令后面的一条指令等。</p></blockquote><h2 id="内存溢出和栈溢出的区别？"><a href="#内存溢出和栈溢出的区别？" class="headerlink" title="内存溢出和栈溢出的区别？"></a>内存溢出和栈溢出的区别？</h2><p>栈溢出：当前线程请求的栈的深度超过了虚拟机栈的最大深度</p><p>内存溢出：当前线程请求栈时内存用完了</p><hr><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>提供了一些native方法，这些方法是用c语言来编写的。</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆中存放的几乎都是变量的实例，它也是最大的一块内存区域，是发生垃圾回收的主要区域。</p><p>因此也被称为GC堆。采用了一种分代回收的思想，分为年轻代和老年代，其中年轻代中又分为eden survivor to/from三个区，比例分别为8：1：1，对象最先来到Eden 区，发生垃圾回收的时候存活的对象到存活区，然后存活区两个区域互换指针，每一次新生代进行垃圾回收的时候，如果还存活，那么对象的年龄会加一，当对象年龄到15岁时，则从存活区移动到老年代中。</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区 存放的是被虚拟加载过的静态变量，常量，类信息以及被即时编译器编译过的静态代码。</p><p>其中永久代是方法区的一个实现。</p><p>在JDK1.8之后，永久代被替换成元空间，其中永久代的运行时常量池则留在了堆中。</p><blockquote><p>永久代之所以被替换成元空间主要是</p><p>　　1、字符串存在永久代中，容易出现性能问题和内存溢出。</p><p>　　2、类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出。</p><p>　　3、永久代会为 GC 带来不必要的复杂度，并且回收效率偏低。</p><p>　　4、Oracle 可能会将HotSpot 与 JRockit 合二为一。</p></blockquote><p>老年代和永久代放在一起，如果永久代太小则永久代溢出，如果永久代太大则老年代溢出。</p><p>因此，取而代之的是元空间，元空间使用的是直接内存。</p><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分区域也被频繁的使用，可能导致内存溢出的问题。</p><p>内存区域主要的使用是NIO 他可以直接分配堆外内存，然后通过一个存储在Java堆中的缓冲区对象作为这块内存的引用进行操作，这样避免了在Java堆和native堆之间来回复制数据。</p><h2 id="Java创建对象的过程"><a href="#Java创建对象的过程" class="headerlink" title="Java创建对象的过程"></a>Java创建对象的过程</h2><ol><li>类加载检查。根据new指令判断常量池中是否有类的符号引用，如果没有就执行加载过程，有的话再检查该类是否已被加载过、解析过。</li><li>分配内存。从Java堆中划分出一块确定的内存。分配方式有<strong>指针碰撞</strong>和<strong>空闲列表</strong>两种，选择哪种算法由Java堆是否规整来决定，而堆是否规整又由采用的垃圾回收器是否带有压缩整理来决定。<ul><li>指针碰撞就是指用过的内存全部整合到一边，没有用过的内存放在另一边，中间有一个分界值指针，只需要向着没用过的内存方向将指针移动对象内存大小位置即可。适用于没有碎片</li><li>空闲列表是指虚拟机会维护一个列表，该列表会记录哪些内存块是可用的，再分配的时候，找一块足够大的内存块分配给对象实例，然后再更新列表记录。</li></ul></li><li>初始化零值：在虚拟机层面将分配到的内存空间都初始化为零值，保证了Java代码中对象实例可以不赋初始值就可以直接使用，程序中能访问到这些字段的数据类型所对应的零值。</li><li>设置对象头，设置类元数据信息，对象的哈希码，对象的GC 分代年龄等信息，以及是否启动偏向锁等。</li><li>执行init方法：完成虚拟机层面的初始化零值后，从java程序的角度按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</li></ol><h2 id="访问对象的方式"><a href="#访问对象的方式" class="headerlink" title="访问对象的方式"></a>访问对象的方式</h2><p>主要有两种。</p><p>使用句柄。在堆中创建了 一个句柄池，然后句柄池中存储着指向方法区类信息的指针，也存储着指向堆中实例变量的指针</p><p>使用直接指针。Java虚拟机栈中的本地变量表指向的是堆中实例变量，再从堆中实例变量找到方法区中的类变量。</p><p>相对来说，使用直接指针会更快，因为少了一次定位的时间。</p><p>使用句柄的话更稳定，对象的移动只需要改变句柄即可。</p><h2 id="JVM-垃圾回收"><a href="#JVM-垃圾回收" class="headerlink" title="JVM 垃圾回收"></a>JVM 垃圾回收</h2><p>java中不需要程序员去主动释放内存，正是因为存在垃圾回收机制，大大解放了程序员的工作。垃圾回收器实际上是一个低优先级的线程，只有当程序内存不足的时候才会进行垃圾回收。</p><h2 id="垃圾判断标准"><a href="#垃圾判断标准" class="headerlink" title="垃圾判断标准"></a>垃圾判断标准</h2><p>采用的是一种可达性垃圾回收算法。从root节点开始，逐渐标记对象，如果被标记，那么就成为可达性对象，对象连接起来的路径叫做引用链，标记结束后，如果没有在引用链上的，则被称为不可达对象，那么在内存不足的时候将会被回收掉。</p><h2 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h2><p>在对象中有一个计数器属性，当对象被引用的时候，计数器就会加一，当引用结束时，计数器就会减一，当计数器的属性为0的时候，那么则表示对象没有被引用，那么可以被回收，但是存在的问题是 无法解决一个对象循环依赖的问题。</p><h2 id="可达性分析算法（根索法）"><a href="#可达性分析算法（根索法）" class="headerlink" title="可达性分析算法（根索法）"></a>可达性分析算法（根索法）</h2><p>哪些对象可以被称为根节点？</p><p>虚拟机栈中的引用对象</p><p>本地方法栈的jni引用对象</p><p>方法区中类静态属性引用对象</p><p>方法区中常量引用对象</p><h2 id="四大引用及其应用场景"><a href="#四大引用及其应用场景" class="headerlink" title="四大引用及其应用场景"></a>四大引用及其应用场景</h2><p>强引用 new 关键字 不会被回收</p><p>软引用  放在softreferance&lt;&gt; 用在缓存上 内存不足则释放</p><p>弱引用 放在weakreference&lt;&gt; 一旦被发现就被释放</p><p>虚引用 配合引用队列使用 应用在资源回收后续的通知上</p><h2 id="判断常量和类没用废弃"><a href="#判断常量和类没用废弃" class="headerlink" title="判断常量和类没用废弃"></a>判断常量和类没用废弃</h2><p>常亮池中的常亮没有任何引用的时候，会被回收。</p><p>类的话则是</p><ol><li>所有的类实例都被回收</li><li>加载该类的类加载器被回收</li><li>class对象没被引用，也就是无法通过放射访问该类的方法</li></ol><h2 id="垃圾回收算法（4种）"><a href="#垃圾回收算法（4种）" class="headerlink" title="垃圾回收算法（4种）"></a>垃圾回收算法（4种）</h2><h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p>主要分为两步，也就是标记和清除。先标记所有需要回收的对象再清除，存在效率、空间问题。</p><h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><p>解决了效率问题，将内存划分为两块，存活的对象复制到另一块，然后清空使用过的空间，这样的话每次都是对内存区间回收一半</p><h2 id="标记整理"><a href="#标记整理" class="headerlink" title="标记整理"></a>标记整理</h2><p>先标记所有需要回收的对象，然后存活的对象移动到一侧，再清除掉不需要的对象。</p><h2 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h2><p>采用的大多数是划分为年轻代和老年代。主要思想是根据存活对象的状态来采用不同的垃圾回收算法。比如年轻代大多数会被回收，那么采用复制算法只需要极少的成本就能完成垃圾回收。而老年代存活久，没有足够的空间分配担保，因此采用的是标记清除和标记整理算法。</p><h2 id="GC-垃圾回收器"><a href="#GC-垃圾回收器" class="headerlink" title="GC 垃圾回收器"></a>GC 垃圾回收器</h2><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><h2 id="Serial-垃圾收集器（单线程、复制算法）-（新生代）"><a href="#Serial-垃圾收集器（单线程、复制算法）-（新生代）" class="headerlink" title="Serial 垃圾收集器（单线程、复制算法） （新生代）"></a>Serial 垃圾收集器（单线程、复制算法） （新生代）</h2><h2 id="ParNew-垃圾收集器（Serial-多线程）-（新生代）"><a href="#ParNew-垃圾收集器（Serial-多线程）-（新生代）" class="headerlink" title="ParNew 垃圾收集器（Serial+多线程） （新生代）"></a>ParNew 垃圾收集器（Serial+多线程） （新生代）</h2><h2 id="Parallel-Scavenge-收集器（多线程复制算法、高效）-（新生代）"><a href="#Parallel-Scavenge-收集器（多线程复制算法、高效）-（新生代）" class="headerlink" title="Parallel Scavenge 收集器（多线程复制算法、高效） （新生代）"></a>Parallel Scavenge 收集器（多线程复制算法、高效） （新生代）</h2><h2 id="Serial-Old-收集器（单线程标记整理算法-）-（老年代）"><a href="#Serial-Old-收集器（单线程标记整理算法-）-（老年代）" class="headerlink" title="Serial Old 收集器（单线程标记整理算法 ） （老年代）"></a>Serial Old 收集器（单线程标记整理算法 ） （老年代）</h2><h2 id="Parallel-Old-收集器（多线程标记整理算法）（老年代）"><a href="#Parallel-Old-收集器（多线程标记整理算法）（老年代）" class="headerlink" title="Parallel Old 收集器（多线程标记整理算法）（老年代）"></a>Parallel Old 收集器（多线程标记整理算法）（老年代）</h2><h2 id="CMS-收集器（多线程标记清除算法）-（老年代）"><a href="#CMS-收集器（多线程标记清除算法）-（老年代）" class="headerlink" title="CMS 收集器（多线程标记清除算法） （老年代）"></a>CMS 收集器（多线程标记清除算法） （老年代）</h2><p>考察点应该是stw的阶段，</p><p><strong>初始标记</strong> 并发标记 <strong>重新标记</strong> 并发清除</p><p>这款垃圾收集器的特点是关注低停顿 并发收集</p><p>缺点是 产生大量内存碎片 无法处理浮动垃圾 对cpu资源较为敏感</p><h2 id="G1垃圾回收器"><a href="#G1垃圾回收器" class="headerlink" title="G1垃圾回收器"></a>G1垃圾回收器</h2><p>G1的名字由来是 后台维护了一个优先列表 每次根据允许的手机时间优先选择回收价值最大的region 这也就是垃圾第一这个名字的由来。</p><p>他比cms多了两个特点，分别是空间整合以及可预测停顿时间，从而做到垃圾回收可控。</p><h2 id="目前-web-应用中的垃圾收集器"><a href="#目前-web-应用中的垃圾收集器" class="headerlink" title="目前 web 应用中的垃圾收集器"></a>目前 web 应用中的垃圾收集器</h2><h2 id="吞吐优先与响应优先"><a href="#吞吐优先与响应优先" class="headerlink" title="吞吐优先与响应优先"></a>吞吐优先与响应优先</h2><h2 id="Minor-GC-和-Full-GC"><a href="#Minor-GC-和-Full-GC" class="headerlink" title="Minor GC 和 Full GC"></a>Minor GC 和 Full GC</h2><p>minor发生在新生代中，频繁且回收速度快。</p><p>full发现在老年代中，速度慢minor十倍以上。</p><h2 id="Full-Gc-触发条件"><a href="#Full-Gc-触发条件" class="headerlink" title="Full Gc 触发条件"></a>Full Gc 触发条件</h2><h2 id="对象内存布局"><a href="#对象内存布局" class="headerlink" title="对象内存布局"></a>对象内存布局</h2><h2 id="为什么新生代存在两个-survivor-区"><a href="#为什么新生代存在两个-survivor-区" class="headerlink" title="为什么新生代存在两个 survivor 区"></a>为什么新生代存在两个 survivor 区</h2><h2 id="一个对象真正不可用，要经历两次标记过程"><a href="#一个对象真正不可用，要经历两次标记过程" class="headerlink" title="一个对象真正不可用，要经历两次标记过程"></a>一个对象真正不可用，要经历两次标记过程</h2><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><ol><li>加载 根据权限名去找该类的二进制字节流，转化为方法区的运行时数据结构，在内存中生成一个代表该类的class对象，作为方法区这些数据访问的入口。</li><li>验证 验证class文件是否符合Java虚拟机的规范以及会不会危害到虚拟机自身的安全</li><li>准备  为类变量设置初始值 为0或者null</li><li>解析 将符号引用变成直接引用</li><li>初始化 完成虚拟机层面的加载，这一阶段按照程序猿的意愿去初始化Java代码</li></ol><p>启动类加载器 拓展类加载器 应用程序类加载器 自定义加载器 </p><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>概念：当类加载器收到加载类的请求时，会先向上一级请求是否能完成加载，如果上一级能加载则由上一次加载完成，不行则再由本类加载器执行。</p><p>优点：为类加载器定义了一种优先级的结构，能够保证核心api不被篡改以及保证类的正确执行。</p><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><p>定义了一套程序访问变量的规则，也就是共享变量存储在主存中，每个线程都有一个私有的本地内存，本地内存存储了该变量的副本。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="p/3361.html"/>
      <url>p/3361.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>面试笔记</p><a id="more"></a><h2 id="什么是数据库事务、数据库事务的四个特性是什么。"><a href="#什么是数据库事务、数据库事务的四个特性是什么。" class="headerlink" title="什么是数据库事务、数据库事务的四个特性是什么。"></a>什么是数据库事务、数据库事务的四个特性是什么。</h2><p>事务就是一组SQL语句，要么全部执行成功，要么全部执行失败。</p><p>原子性 一致性 隔离性 持久性</p><hr><h2 id="请分别举例说明幻读和不可重复读、并描述一下它们之间的区别。"><a href="#请分别举例说明幻读和不可重复读、并描述一下它们之间的区别。" class="headerlink" title="请分别举例说明幻读和不可重复读、并描述一下它们之间的区别。"></a>请分别举例说明幻读和不可重复读、并描述一下它们之间的区别。</h2><p>幻读是指由于并发事务存在导致说前后读取的记录不一致，后来多出现几条记录，如同出现了幻觉。</p><p>不可重复读是指由于并发事务存在导致前后读取的记录不一致，因此称为不可重复读。</p><hr><h2 id="MySQL-的默认隔离级别是什么。"><a href="#MySQL-的默认隔离级别是什么。" class="headerlink" title="MySQL 的默认隔离级别是什么。"></a>MySQL 的默认隔离级别是什么。</h2><p>总共4个级别，默认处在第三级，也就是可重复读的级别，由于MySQL实现了next-key lock锁，它是由记录锁和间隙锁实现的，所以在可重复读的级别也避免了幻读的问题。</p><hr><h2 id="为什么要使用索引。"><a href="#为什么要使用索引。" class="headerlink" title="为什么要使用索引。"></a>为什么要使用索引。</h2><p>能够加快查询速度</p><hr><h2 id="索引这么多优点，为什么不对表中每个字段都创建索引呢。"><a href="#索引这么多优点，为什么不对表中每个字段都创建索引呢。" class="headerlink" title="索引这么多优点，为什么不对表中每个字段都创建索引呢。"></a>索引这么多优点，为什么不对表中每个字段都创建索引呢。</h2><p>因为维护索引的过程会导致增删改的维护成本加大。</p><p>索引占空间</p><hr><h2 id="索引是如何提升查询速度的。"><a href="#索引是如何提升查询速度的。" class="headerlink" title="索引是如何提升查询速度的。"></a>索引是如何提升查询速度的。</h2><p>没有索引之前，MySQL中记录都是存储在页里面的，页是一种双向链表的结构，页中的记录是一个单链表的结构，因此查询效率低下。有了索引之后，能够将链表结构从无序组织到有序，利用了类似树的结构，能够在稳定的时间内查找到想要的数据。</p><h2 id="请说出你知道的索引失效的几种情况。"><a href="#请说出你知道的索引失效的几种情况。" class="headerlink" title="请说出你知道的索引失效的几种情况。"></a>请说出你知道的索引失效的几种情况。</h2><p>1.如果条件中有or，即使其中有条件带索引也不会使用(这也是为什么尽量少用or的原因)，注意：要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引<br>2，对于多列索引，不是使用的第一部分，则不会使用索引(详情可见上篇文章)<br>3，like查询是以%开头<br>4，如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引<br>5，在索引列上进行计算或使用函数索引将失效<br>6，where子句中使用参数，会导致全表扫描</p><hr><h2 id="什么是聚簇索引与非聚簇索引"><a href="#什么是聚簇索引与非聚簇索引" class="headerlink" title="什么是聚簇索引与非聚簇索引"></a>什么是聚簇索引与非聚簇索引</h2><p>聚集索引即索引结构和数据一起存放的索引。主键索引属于聚集索引。</p><p>非聚集索引即索引结构和数据分开存放的索引。</p><p>二级索引属于非聚集索引。</p><hr><h2 id="MySQL-索引主要使用的数据结构有哪些。"><a href="#MySQL-索引主要使用的数据结构有哪些。" class="headerlink" title="MySQL 索引主要使用的数据结构有哪些。"></a>MySQL 索引主要使用的数据结构有哪些。</h2><p>目前大部分数据库系统及文件系统都采用B-Tree或其变种B+Tree作为索引结构</p><h2 id="谈谈-MyISAM-和-InnoDb-实现-BTree-索引方式的区别。"><a href="#谈谈-MyISAM-和-InnoDb-实现-BTree-索引方式的区别。" class="headerlink" title="谈谈 MyISAM 和 InnoDb 实现 BTree 索引方式的区别。"></a>谈谈 MyISAM 和 InnoDb 实现 BTree 索引方式的区别。</h2><p>MyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。<br>MyISAM的索引方式也叫做“非聚集”的。</p><p>第一个重大区别是InnoDB的数据文件本身就是索引文件。MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。</p><p>InnoDB的辅助索引data域存储相应记录主键的值而不是地址。</p><h2 id="什么是覆盖索引、请举例说明。"><a href="#什么是覆盖索引、请举例说明。" class="headerlink" title="什么是覆盖索引、请举例说明。"></a>什么是覆盖索引、请举例说明。</h2><p>索引包含所有需要查询的字段的值。</p><p>具有以下优点：</p><ul><li>索引通常远小于数据行的大小，只读取索引能大大减少数据访问量。</li><li>一些存储引擎（例如 MyISAM）在内存中只缓存索引，而数据依赖于操作系统来缓存。因此，只访问索引可以不使用系统调用（通常比较费时）。</li><li>对于 InnoDB 引擎，若辅助索引能够覆盖查询，则无需访问主索引。</li></ul><hr><h2 id="谈谈你对最左前缀原则的理解。"><a href="#谈谈你对最左前缀原则的理解。" class="headerlink" title="谈谈你对最左前缀原则的理解。"></a>谈谈你对最左前缀原则的理解。</h2><p>最左前缀原则指的是，如果查询的时候查询条件精确匹配索引的左边连续一列或几列，则此列就可以被用到。</p><hr><h2 id="MySQL-中-InnoDb-和-MyISAM-有什么区别。"><a href="#MySQL-中-InnoDb-和-MyISAM-有什么区别。" class="headerlink" title="MySQL 中 InnoDb 和 MyISAM 有什么区别。"></a>MySQL 中 InnoDb 和 MyISAM 有什么区别。</h2><p>外键 事务 表级锁行级锁  聚簇索引非聚簇索引 全文索引 </p><hr><h2 id="谈谈如何对SQL进行优化。"><a href="#谈谈如何对SQL进行优化。" class="headerlink" title="谈谈如何对SQL进行优化。"></a>谈谈如何对SQL进行优化。</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">1.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</span><br><span class="line"></span><br><span class="line">2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line">可以在<span class="keyword">num</span>上设置默认值<span class="number">0</span>，确保表中<span class="keyword">num</span>列没有<span class="literal">null</span>值，然后这样查询：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>应尽量避免在 <span class="keyword">where</span> 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>应尽量避免在 <span class="keyword">where</span> 子句中使用 <span class="keyword">or</span> 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">10</span> <span class="keyword">or</span> <span class="keyword">num</span>=<span class="number">20</span></span><br><span class="line">可以这样查询：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">10</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span><span class="keyword">in</span> 和 <span class="keyword">not</span> <span class="keyword">in</span> 也要慎用，否则会导致全表扫描，如：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">对于连续的数值，能用 <span class="keyword">between</span> 就不要用 <span class="keyword">in</span> 了：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>避免在<span class="keyword">like</span>操作中以通配符%开头：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%abc%'</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>应尽量避免在 <span class="keyword">where</span> 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>/<span class="number">2</span>=<span class="number">100</span></span><br><span class="line">应改为:</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">num</span>=<span class="number">100</span>*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>应尽量避免在<span class="keyword">where</span>子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">substring</span>(<span class="keyword">name</span>,<span class="number">1</span>,<span class="number">3</span>)=<span class="string">'abc'</span>————<span class="keyword">name</span>以abc开头的<span class="keyword">id</span></span><br><span class="line">应改为:</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'abc%'</span></span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>不要在 <span class="keyword">where</span> 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，</span><br><span class="line">否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span>不要写一些没有意义的查询，如需要生成一个空表结构：</span><br><span class="line"><span class="keyword">select</span> col1,col2 <span class="keyword">into</span> <span class="comment">#t from t where 1=0</span></span><br><span class="line">这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="comment">#t(...)</span></span><br><span class="line"></span><br><span class="line"><span class="number">12.</span>很多时候用 <span class="keyword">exists</span> 代替 <span class="keyword">in</span> 是一个好的选择：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">num</span> <span class="keyword">in</span>(<span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> b)</span><br><span class="line">用下面的语句替换：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> b <span class="keyword">where</span> <span class="keyword">num</span>=a.num)</span><br><span class="line"></span><br><span class="line"><span class="number">13.</span>并不是所有索引对查询都有效，<span class="keyword">SQL</span>是根据表中数据来进行查询优化的，当索引列有大量数据重复时，<span class="keyword">SQL</span>查询可能不会去利用索引，</span><br><span class="line">如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</span><br><span class="line"></span><br><span class="line"><span class="number">14.</span>索引并不是越多越好，索引固然可以提高相应的 <span class="keyword">select</span> 的效率，但同时也降低了 <span class="keyword">insert</span> 及 <span class="keyword">update</span> 的效率，</span><br><span class="line">因为 <span class="keyword">insert</span> 或 <span class="keyword">update</span> 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。</span><br><span class="line">一个表的索引数最好不要超过<span class="number">6</span>个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</span><br><span class="line"></span><br><span class="line"><span class="number">15.</span>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。</span><br><span class="line">这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</span><br><span class="line"></span><br><span class="line"><span class="number">16.</span>尽可能的使用 <span class="built_in">varchar</span> 代替 <span class="built_in">char</span> ，因为首先变长字段存储空间小，可以节省存储空间，</span><br><span class="line">其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</span><br><span class="line"></span><br><span class="line"><span class="number">17.</span>任何地方都不要使用 <span class="keyword">select</span> * <span class="keyword">from</span> t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</span><br><span class="line"></span><br><span class="line"><span class="number">18.</span>避免频繁创建和删除临时表，以减少系统表资源的消耗。</span><br><span class="line"><span class="number">19.</span>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</span><br><span class="line"></span><br><span class="line"><span class="number">20.</span>在新建临时表时，如果一次性插入数据量很大，那么可以使用 <span class="keyword">select</span> <span class="keyword">into</span> 代替 <span class="keyword">create</span> <span class="keyword">table</span>，避免造成大量 <span class="keyword">log</span> ，</span><br><span class="line">以提高速度；如果数据量不大，为了缓和系统表的资源，应先<span class="keyword">create</span> <span class="keyword">table</span>，然后<span class="keyword">insert</span>。</span><br><span class="line"><span class="number">21.</span>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 <span class="keyword">truncate</span> <span class="keyword">table</span> ，然后 <span class="keyword">drop</span> <span class="keyword">table</span> ，这样可以避免系统表的较长时间锁定。</span><br><span class="line"></span><br><span class="line"><span class="number">22.</span>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过<span class="number">1</span>万行，那么就应该考虑改写。</span><br></pre></td></tr></table></figure><h2 id="如何用-explain-分析-SQL-执行效率。"><a href="#如何用-explain-分析-SQL-执行效率。" class="headerlink" title="如何用 explain 分析 SQL 执行效率。"></a>如何用 explain 分析 SQL 执行效率。</h2><blockquote><p>table ：这一列是查询设计的表。</p><p>type ：很重要的一列，显示了查询使用了那种类型，是否使用的索引，能反映出语句的质量。一般这个指标从好到坏依次是：system&gt;const&gt;eq_ref&gt;ref(最好能达到)&gt;fulltext&gt;ref_or_null&gt;index_merge&gt;unique_subquery&gt;index_subquery&gt;range&gt;index&gt;ALL</p><p>为了保证查询至少达到range级别。最好达到ref，否则的话，只能说明这条语句性能有待提高。</p><p>ref 表示所有具有匹配的索引的行都被用到</p><p>range索引范围内查找</p><p>index全索引树扫描</p><p>all全表扫描</p><p>possible_keys：指出mysql在试用了哪个索引在该表中查找行。如果没有使用任何索引，就显示的NULL，可以用于对优化时的索引调整。</p><p>key：显示使用的索引，如果没有使用，则显示NULL</p><p>key_len：显示的是所使用的索引长度，如果没使用，则是NULL。当然，在使用索引的情况下，索引长度越小。效果越明显。</p><p>ref：显示使用那个列或常数雨key一起从表中选择行。</p><p>rows：执行查询的行数，如果行数越小，说明查询次数越少，效率越高。</p><p>extra：包含查询mysql解决查询的详细信息。</p></blockquote><p>Explain 用来分析 SELECT 查询语句，开发人员可以通过分析 Explain 结果来优化查询语句。</p><p>比较重要的字段有：</p><ul><li>select_type : 查询类型，有简单查询、联合查询、子查询等</li><li>key : 使用的索引</li><li>rows : 扫描的行数</li></ul><hr><h2 id="请举出可能形成数据库死锁的原因、如何能避免死锁。"><a href="#请举出可能形成数据库死锁的原因、如何能避免死锁。" class="headerlink" title="请举出可能形成数据库死锁的原因、如何能避免死锁。"></a>请举出可能形成数据库死锁的原因、如何能避免死锁。</h2><p> <strong>死锁产生的四个必要条件</strong><br>•互斥条件：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放<br>•请求和保持条件：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放<br>•不剥夺条件：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放<br>•环路等待条件：指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源<br>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。</p><blockquote><p>数据库和操作系统一样，是一个多用户使用的共享资源。当多个用户并发地存取数据 时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。加锁是实现数据库并 发控制的一个非常重要的技术。在实际应用中经常会遇到的与锁相关的异常情况，当两个事务需要一组有冲突的锁，而不能将事务继续下去的话，就会出现死锁，严 重影响应用的正常执行。</p><p>在数据库中有两种基本的锁类型：排它锁（Exclusive Locks，即X锁）和共享锁（Share Locks，即S锁）。当数据对象被加上排它锁时，其他的事务不能对它读取和修改。加了共享锁的数据对象可以被其他事务读取，但不能修改。数据库利用这两 种基本的锁类型来对数据库的事务进行并发控制。</p><p><strong>死锁的第一种情况</strong></p><p>一个用户A 访问表A(锁住了表A),然后又访问表B；另一个用户B 访问表B(锁住了表B)，然后企图访问表A；这时用户A由于用户B已经锁住表B，它必须等待用户B释放表B才能继续，同样用户B要等用户A释放表A才能继续，这就死锁就产生了。</p><p>解决方法：</p><p>这种死锁比较常见，是由于程序的BUG产生的，除了调整的程序的逻辑没有其它的办法。仔细分析程序的逻辑，对于数据库的多表操作时，尽量按照相同的顺序进 行处理，尽量避免同时锁定两个资源，如操作A和B两张表时，总是按先A后B的顺序处理， 必须同时锁定两个资源时，要保证在任何时刻都应该按照相同的顺序来锁定资源。</p><p><strong>死锁的第二种情况</strong></p><p>用户A查询一条纪录，然后修改该条纪录；这时用户B修改该条纪录，这时用户A的事务里锁的性质由查询的共享锁企图上升到独占锁，而用户B里的独占锁由于A 有共享锁存在所以必须等A释放掉共享锁，而A由于B的独占锁而无法上升的独占锁也就不可能释放共享锁，于是出现了死锁。这种死锁比较隐蔽，但在稍大点的项 目中经常发生。如在某项目中，页面上的按钮点击后，没有使按钮立刻失效，使得用户会多次快速点击同一按钮，这样同一段代码对数据库同一条记录进行多次操 作，很容易就出现这种死锁的情况。</p><p>解决方法：</p><p>1、对于按钮等控件，点击后使其立刻失效，不让用户重复点击，避免对同时对同一条记录操作。<br>2、使用乐观锁进行控制。乐观锁大多是基于数据版本（Version）记录机制实现。即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是 通过为数据库表增加一个“version”字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数 据库表对应记录的当前版本信息进行比对，如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。乐观锁机制避免了长事务中的数据 库加锁开销（用户A和用户B操作过程中，都没有对数据库数据加锁），大大提升了大并发量下的系统整体性能表现。Hibernate 在其数据访问引擎中内置了乐观锁实现。需要注意的是，由于乐观锁机制是在我们的系统中实现，来自外部系统的用户更新操作不受我们系统的控制，因此可能会造 成脏数据被更新到数据库中。<br>3、使用悲观锁进行控制。悲观锁大多数情况下依靠数据库的锁机制实现，如Oracle的Select … for update语句，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长事务而言，这样的开销往往无法承受。如一个金融系统， 当某个操作员读取用户的数据，并在读出的用户数据的基础上进行修改时（如更改用户账户余额），如果采用悲观锁机制，也就意味着整个操作过程中（从操作员读 出数据、开始修改直至提交修改结果的全过程，甚至还包括操作员中途去煮咖啡的时间），数据库记录始终处于加锁状态，可以想见，如果面对成百上千个并发，这 样的情况将导致灾难性的后果。所以，采用悲观锁进行控制时一定要考虑清楚。</p><p><strong>死锁的第三种情况</strong></p><p>如果在事务中执行了一条不满足条件的update语句，则执行全表扫描，把行级锁上升为表级锁，多个这样的事务执行后，就很容易产生死锁和阻塞。类似的情 况还有当表中的数据量非常庞大而索引建的过少或不合适的时候，使得经常发生全表扫描，最终应用系统会越来越慢，最终发生阻塞或死锁。</p><p>解决方法：</p><p>SQL语句中不要使用太复杂的关联多表的查询；使用“执行计划”对SQL语句进行分析，对于有全表扫描的SQL语句，建立相应的索引进行优化。<br><strong>5．小结</strong><br>总体上来说，产生内存溢出与锁表都是由于代码写的不好造成的，因此提高代码的质量是最根本的解决办法。有的人认为先把功能实现，有BUG时再在测试阶段进 行修正，这种想法是错误的。正如一件产品的质量是在生产制造的过程中决定的，而不是质量检测时决定的，软件的质量在设计与编码阶段就已经决定了，测试只是 对软件质量的一个验证，因为测试不可能找出软件中所有的BUG。</p></blockquote><hr><h2 id="数据库中的乐观锁和悲观锁有什么区别、各适用于什么场景。"><a href="#数据库中的乐观锁和悲观锁有什么区别、各适用于什么场景。" class="headerlink" title="数据库中的乐观锁和悲观锁有什么区别、各适用于什么场景。"></a>数据库中的乐观锁和悲观锁有什么区别、各适用于什么场景。</h2><ul><li>乐观锁：乐观锁的特点先进行业务操作，不到万不得已不去拿锁。即“乐观”的认为拿锁多半是会成功的，因此在进行完业务操作需要实际更新数据的最后一步再去拿一下锁就好。</li><li>悲观锁：悲观锁的特点是先获取锁，再进行业务操作，即“悲观”的认为获取锁是非常有可能失败的，因此要先确保获取锁成功再进行业务操作。通常所说的“一锁二查三更新”即指的是使用悲观锁。</li></ul><p>乐观锁的思路一般是表中增加版本字段，更新时where语句中增加版本的判断，算是一种CAS（Compare And Swep）操作，商品库存场景中number起到了版本控制（相当于version）的作用（ AND number=#{number}）。</p><p>悲观锁之所以是悲观，在于他认为本次操作会发生并发冲突，所以一开始就对商品加上锁（SELECT … FOR UPDATE），然后就可以安心的做判断和更新，因为这时候不会有别人更新这条商品库存。</p><ul><li>乐观锁：比较适合读取操作比较频繁的场景，如果出现大量的写入操作，数据发生冲突的可能性就会增大，为了保证数据的一致性，应用层需要不断的重新获取数据，这样会增加大量的查询操作，降低了系统的吞吐量。</li><li>悲观锁：比较适合写入操作比较频繁的场景，如果出现大量的读取操作，每次读取的时候都会进行加锁，这样会增加大量的锁的开销，降低了系统的吞吐量。</li></ul><hr><h2 id="请结合你的开发经历，谈谈数据库中的乐观锁和悲观锁是具体如何被应用的。"><a href="#请结合你的开发经历，谈谈数据库中的乐观锁和悲观锁是具体如何被应用的。" class="headerlink" title="请结合你的开发经历，谈谈数据库中的乐观锁和悲观锁是具体如何被应用的。"></a>请结合你的开发经历，谈谈数据库中的乐观锁和悲观锁是具体如何被应用的。</h2><h2 id="索引的本质。"><a href="#索引的本质。" class="headerlink" title="索引的本质。"></a>索引的本质。</h2><p><strong>以我的理解，索引的本质是基于对象的一个或多个属性按照某种数据结构（树、哈希、有序链表等）进行组织，以加速查找的一种技术。其中有两个关键点，一是基于一个或多个属性，二是数据结构。</strong></p><p>首先，每个索引都是基于一个属性的组合来建立的，组合中的属性可以为单个或者多个。建立好对应索引后，这个属性组合就是数据的入口(Entry)。例如，HBase将rowkey作为核心的数据入口，任何不符合rowkey的查找条件都不能直接使用该索引。又例如ElasticSearch等搜索引擎的核心倒排索引，其实是将原本以文档id作为入口的数据，转换为以词为入口，因此全文检索的时候可以直接利用词来快速定位文档。除了这些比较高级的应用，其实我们平时接触的操作系统也有不少索引的应用，最为常见的文件系统就用了基于文件名的B+Tree索引。</p><p>由于遍历的时间复杂度是O(n)，那么索引后的查找复杂度必定是小于O(n)才有意义。常用的索引主要有两种：复杂度为O(1)的哈希索引和复杂度为O(log n)的树索引。哈希索引原理是根据属性组合直接通过哈希函数计算出结果数据的地址，一般来说更快（包括建索引的效率和查询效率），具体性能依赖于数据集和哈希函数的匹配程度；树索引原理是基于属性组合建立树再根据二分查找定位数据，虽然建索引和查找速度都慢一些，但优势是可以支持范围查询和front-n属性匹配（前缀匹配）的查询。其中front-n属性的查询意思是，属性组合中的前1到前n个属性组成的子组合的查找。例如属性组合是A-B-C，那么树索引可以支持A、A-B、A-B-C三个属性组合的查找。</p><p>这两种索引并不冲突，比如HBase使用的TreeMap（或者说SortedMap）就优雅地结合了两种索引。众所周知HBase是KeyValue型数据库，不知道准确rowkey的时候只能通过scan来查询数据，而这个scan正是利用了树索引的二分查找。<strong>或许没有很多人意识到，经过排序的数据实际上是一棵隐式的树。</strong>这棵树以查询的粒度来确定节点。比如在字符串查找中，查询的粒度是字符，则索引树的每一层代表字符串的一位字符。HBase的rowkey是经过排序的，而且rowkey的组织方式完全由用户决定，接近于字符串查找。所以HBase的数据查询分为两种情况：</p><ol><li>知道rowkey -&gt; O(1)的哈希查找</li><li>不知道rowkey，知道rowkey中前n个字段 -&gt; O(log n)的树查找（确定startkey和endkey） + 局部线性扫描</li><li>不知道rowkey，不知道rowkey中前n个字段 -&gt; O(n)的全表线性扫描</li></ol><p>可以看出，HBase的rowkey组织方式尤为重要，它直接决定了查询用的是什么索引。</p><p>以上就是我对索引的理解。</p><h2 id="MySQL-存储引擎。"><a href="#MySQL-存储引擎。" class="headerlink" title="MySQL 存储引擎。"></a>MySQL 存储引擎。</h2><p><img src="https://img-blog.csdn.net/20170705172036010?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemdyZ2Zy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><h2 id="MySQL-索引"><a href="#MySQL-索引" class="headerlink" title="MySQL 索引"></a>MySQL 索引</h2><h2 id="数据结构，B-Tree-和-B-Tree。"><a href="#数据结构，B-Tree-和-B-Tree。" class="headerlink" title="数据结构，B-Tree 和 B+Tree。"></a>数据结构，B-Tree 和 B+Tree。</h2><ul><li>B树的所有节点既存放 键(key) 也存放 数据(data);而B+树只有叶子节点存放 key 和 data，其他内节点只存放key。</li><li>B树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</li><li>B树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</li></ul><h2 id="带有顺序访问指针的-B-Tree"><a href="#带有顺序访问指针的-B-Tree" class="headerlink" title="带有顺序访问指针的 B+Tree"></a>带有顺序访问指针的 B+Tree</h2><h2 id="索引的物理存储。"><a href="#索引的物理存储。" class="headerlink" title="索引的物理存储。"></a>索引的物理存储。</h2><p>当我们创建一个table时， InnoDB会创建三个文件。 一个是表结构定义文件， 另一个为数据实际存储文件， 并且所有的索引也将存放在这个文件中。 最后一个文件保存该table所制定的字符集。</p><p><img src="https://smartkeyerror.oss-cn-shenzhen.aliyuncs.com/jojo/system-design/mysql/ibd/innodb-table-structure.png" alt="img"></p><h2 id="与-B-Tree-相比，B-Tree-有什么不同。"><a href="#与-B-Tree-相比，B-Tree-有什么不同。" class="headerlink" title="与 B-Tree 相比，B+Tree 有什么不同。"></a>与 B-Tree 相比，B+Tree 有什么不同。</h2><p>B树的所有节点既存放 键(key) 也存放 数据(data);而B+树只有叶子节点存放 key 和 data，其他内节点只存放key。<br>B树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。<br>B树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</p><h2 id="为什么-B-Tree-更适合做文件索引。"><a href="#为什么-B-Tree-更适合做文件索引。" class="headerlink" title="为什么 B+Tree 更适合做文件索引。"></a>为什么 B+Tree 更适合做文件索引。</h2><p>原因：相对于B树，<br>    （1）B+树空间利用率更高，可减少I/O次数，<br>         一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘I/O消耗。而因为B+树的内部节点只是作为索引使用，而不像B-树那样每个节点都需要存储硬盘指针。<br>         也就是说：B+树中每个非叶节点没有指向某个关键字具体信息的指针，所以每一个节点可以存放更多的关键字数量，即一次性读入内存所需要查找的关键字也就越多，减少了I/O操作。<br>     e.g.假设磁盘中的一个盘块容纳16bytes，而一个关键字2bytes，一个关键字具体信息指针2bytes。一棵9阶B-tree(一个结点最多8个关键字)的内   部结点需要2个盘快。而B+ 树内部结点只需要1个盘快。当需要把内部结点读入内存中的时候，B 树就比B+ 树多一次盘块查找时间(在磁盘中就   是         盘片旋转的时间)。<br>    （2）增删文件（节点）时，效率更高，<br>         因为B+树的叶子节点包含所有关键字，并以有序的链表结构存储，这样可很好提高增删效率。<br>    （3）B+树的查询效率更加稳定，<br>    因为B+树的每次查询过程中，都需要遍历从根节点到叶子节点的某条路径。所有关键字的查询路径长度相同，导致每一次查询的效率相当。</p><h2 id="为什么不用-AVL-树或者红黑树做索引。"><a href="#为什么不用-AVL-树或者红黑树做索引。" class="headerlink" title="为什么不用 AVL 树或者红黑树做索引。"></a>为什么不用 AVL 树或者红黑树做索引。</h2><p><strong>一、B+树做索引而不用B-树</strong><br>那么Mysql如何衡量查询效率呢？– 磁盘IO次数。<br>一般来说索引非常大，尤其是关系性数据库这种数据量大的索引能达到亿级别，所以为了减少内存的占用，索引也会被存储在磁盘上。B-树/B+树 的特点就是每层节点数目非常多，层数很少，目的就是为了减少磁盘IO次数，但是B-树的每个节点都有data域（指针），这无疑增大了节点大小，说白了增加了磁盘IO次数（磁盘IO一次读出的数据量大小是固定的，单个数据变大，每次读出的就少，IO次数增多，一次IO多耗时），而B+树除了叶子节点其它节点并不存储数据，节点小，磁盘IO次数就少。</p><p>优点一： B+树只有叶节点存放数据，其余节点用来索引，而B-树是每个索引节点都会有Data域。</p><p>优点二： B+树所有的Data域在叶子节点，并且所有叶子节点之间都有一个链指针。 这样遍历叶子节点就能获得全部数据，这样就能进行区间访问啦。在数据库中基于范围的查询是非常频繁的，而B树不支持这样的遍历操作。</p><p><strong>二、B+树做索引而不用红黑树</strong><br>AVL 树（平衡二叉树）和红黑树（二叉查找树）基本都是存储在内存中才会使用的数据结构。在大规模数据存储的时候，红黑树往往出现由于树的深度过大而造成磁盘IO读写过于频繁，进而导致效率低下的情况。为什么会出现这样的情况，我们知道要获取磁盘上数据，必须先通过磁盘移动臂移动到数据所在的柱面，然后找到指定盘面，接着旋转盘面找到数据所在的磁道，最后对数据进行读写。磁盘IO代价主要花费在查找所需的柱面上，树的深度过大会造成磁盘IO频繁读写。根据磁盘查找存取的次数往往由树的高度所决定，所以，只要我们通过某种较好的树结构减少树的结构尽量减少树的高度，B树可以有多个子女，从几十到上千，可以降低树的高度。</p><p>数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。为了达到这个目的，在实际实现B-Tree还需要使用如下技巧：每次新建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，加之计算机存储分配都是按页对齐的，就实现了一个node只需一次I/O。</p><hr><h2 id="两种引擎的索引存储机制。"><a href="#两种引擎的索引存储机制。" class="headerlink" title="两种引擎的索引存储机制。"></a><a href="https://blog.csdn.net/u010922732/article/details/82994253" target="_blank" rel="noopener">两种引擎的索引存储机制。</a></h2><p>分为主键索引和辅助索引来描述。</p><p>innodb存储主键索引是叶子节点下跟着一大串除主键外的<strong>行记录</strong>，辅助索引则是一个辅助索引下带着<strong>主键</strong>的值；</p><p>myisam主键索引和辅助索引存的都是行记录的<strong>地址</strong>。</p><blockquote><ol><li>role表有三个文件，对应如下：</li></ol><p>role.frm：表结构文件<br>role.MYD：数据文件（MyISAM Data）<br>role.MYI：索引文件（MyISAM Index）</p><ol start="2"><li>user表有两个文件，对应如下：</li></ol><p>user.frm：表结构文件<br>user.ibd：索引和数据文件（InnoDB Data）</p></blockquote><p>MyISAM：每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。.frm文件存储表定义。数据文件的扩展名为.MYD (MYData)。索引文件的扩展名是.MYI (MYIndex)。<br>InnoDB：所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB表的大小只受限于操作系统文件的大小，一般为2GB。</p><hr><h2 id="MyISAM-索引实现。"><a href="#MyISAM-索引实现。" class="headerlink" title="MyISAM 索引实现。"></a>MyISAM 索引实现。</h2><h2 id="InnoDB-索引实现。"><a href="#InnoDB-索引实现。" class="headerlink" title="InnoDB 索引实现。"></a>InnoDB 索引实现。</h2><h2 id="索引失效条件。"><a href="#索引失效条件。" class="headerlink" title="索引失效条件。"></a>索引失效条件。</h2><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><p>1.普通索引<br>2.唯一索引<br>3.主键索引<br>4.组合索引<br>5.全文索引</p><p>从数据结构角度</p><p>1、B+树索引(O(log(n)))：关于B+树索引，可以参考 MySQL索引背后的数据结构及算法原理</p><p>2、hash索引：<br>a 仅仅能满足”=”,”IN”和”&lt;=&gt;”查询，不能使用范围查询<br>b 其检索效率非常高，索引的检索可以一次定位，不像B-Tree 索引需要从根节点到枝节点，最后才能访问到页节点这样多次的IO访问，所以 Hash 索引的查询效率要远高于 B-Tree 索引<br>c 只有Memory存储引擎显示支持hash索引</p><p>3、FULLTEXT索引（现在MyISAM和InnoDB引擎都支持了）</p><p>4、R-Tree索引（用于对GIS数据类型创建SPATIAL索引）</p><h2 id="哈希索引。"><a href="#哈希索引。" class="headerlink" title="哈希索引。"></a>哈希索引。</h2><p>询速度相对于B-Tree索引是要快，但是也有一些局限：</p><p>hash索引中只有hash值和行数的指针，因此无法直接使用索引来避免读取行，但是因为这种索引读取快，性能影响不明显。<br>hash索引不是按照索引值顺序存储，无法使用于排序。<br>不支持部分列匹配查找，这里面是使用索引列的全部内容来计算哈希值，例如(A,B)两列一起建索引，单纯使用A一列，那么就无法使用索引，B-Tree索引的话，因为支持匹配最左前缀，所以这种情况适用性偏好。<br>哈希索引只支持等值查询，包括=、in()、&lt;=&gt;，不支持where age &gt; 10 这种范围查询。<br>哈希冲突很多的话，维护索引操作的代价也很高</p><h2 id="有序数组。"><a href="#有序数组。" class="headerlink" title="有序数组。"></a>有序数组。</h2><h2 id="B-树索引（InnoDB）。"><a href="#B-树索引（InnoDB）。" class="headerlink" title="B+ 树索引（InnoDB）。"></a>B+ 树索引（InnoDB）。</h2><h2 id="联合索引。"><a href="#联合索引。" class="headerlink" title="联合索引。"></a>联合索引。</h2><h2 id="索引下推。"><a href="#索引下推。" class="headerlink" title="索引下推。"></a><a href="https://www.shuzhiduo.com/A/kmzLrnQX5G/" target="_blank" rel="noopener">索引下推。</a></h2><blockquote><p>索引下推简而言之就是在复合索引由于某些条件(比如 like %aa)失效的情况下，当存在失效的过滤字段在索引覆盖范围内，使用比较的方式在不回表的情况下进一步缩小查询的范围。</p><p>其实就是对索引失效的进一步修复，属于最左前缀索引原则的一个意外情况。</p><p><strong>索引下推触发的条件</strong></p><p>查询条件是符合索引<br>失效条件的字段在索引覆盖的范围内<br>失效条件是可以通过数据进行比较的简单对比<br>以此我们可以推断出索引下推可以使用的场景</p><p>like查询<br>函数在左的查询,比如CHAR_LENGTH(colName)=5</p></blockquote><p>索引条件下推优化（Index Condition Pushdown (ICP) ）是MySQL5.6添加的，用于优化数据查询。 </p><p>不使用索引条件下推优化时存储引擎通过索引检索到数据，然后返回给MySQL服务器，服务器然后判断数据是否符合条件。<br>当使用索引条件下推优化时，如果存在某些被索引的列的判断条件时，MySQL服务器将这一部分判断条件传递给存储引擎，然后由存储引擎通过判断索引是否符合MySQL服务器传递的条件，只有当索引符合条件时才会将数据检索出来返回给MySQL服务器。</p><p>索引条件下推优化可以减少存储引擎查询基础表的次数，也可以减少MySQL服务器从存储引擎接收数据的次数。 </p><blockquote><p>对于user_table表，我们现在有（username,age）联合索引<br>如果现在有一个需求，查出名称中以“张”开头且年龄小于等于10的用户信息，语句C如下：”select * from user_table where username like ‘张%’ and age &gt; 10”.<br>语句C有两种执行可能：<br>1、根据（username,age）联合索引查询所有满足名称以“张”开头的索引，然后回表查询出相应的全行数据，然后再筛选出满足年龄小于等于10的用户数据。过程如下图。</p><p><img src="https://upload-images.jianshu.io/upload_images/5148507-1684dba15ec6fb78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>2、根据（username,age）联合索引查询所有满足名称以“张”开头的索引，然后直接再筛选出年龄小于等于10的索引，之后再回表查询全行数据。过程如下图。</p><p>明显的，第二种方式需要回表查询的全行数据比较少，这就是mysql的索引下推。mysql默认启用索引下推，我们也可以通过修改系统变量optimizer_switch的index_condition_pushdown标志来控制<br><code>SET optimizer_switch = &#39;index_condition_pushdown=off&#39;;</code></p></blockquote><p>注意点：<br>1、innodb引擎的表，索引下推只能用于二级索引。</p><p>就像之前提到的，innodb的主键索引树叶子结点上保存的是全行数据，所以这个时候索引下推并不会起到减少查询全行数据的效果。</p><p>2、索引下推一般可用于所求查询字段（select列）不是/不全是联合索引的字段，查询条件为多条件查询且查询条件子句（where/order by）字段全是联合索引。</p><p>假设表t有联合索引（a,b）,下面语句可以使用索引下推提高效率<br>select * from t where a &gt; 2 and b &gt; 10;</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arrays.sort比较器对二维数组排序</title>
      <link href="p/6451.html"/>
      <url>p/6451.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    <code>Arrays.sort(people, (a, b) -&gt; (a[0] == b[0] ? a[1] - b[1] : b[0] - a[0]));</code> </p><p>如果第一维元素相等的时候，则比较第二维元素，以此实现排序</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试（补充）</title>
      <link href="p/cef4.html"/>
      <url>p/cef4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>施工中…</p><a id="more"></a><p>mointer</p><p>可重入锁原理</p><p>lock和synchronize</p><p>类加载机制</p><p>MVC的原理</p><p>concurrenthashmap的结构和原理</p><p>NIO</p><p>select poll epoll</p><p>sleep() wait()打断标记</p><p>reetrantlock原理</p><p>bean 周期</p><p>threadlocal</p><p>cas实现机制</p><p>DNS寻址过程</p><p>AQS</p><p>序列化</p><p>负载均衡考察点</p><p>线程状态</p><p>synchronize底层</p><p>HTTP1.0</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO多路复用</title>
      <link href="p/8e35.html"/>
      <url>p/8e35.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>I/O<a href="https://www.cnblogs.com/aspirant/p/9166944.html" target="_blank" rel="noopener">多路复用</a>就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。<strong>但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的</strong>，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。 </p><p>epoll跟select都能提供多路I/O复用的解决方案。在现在的Linux内核里有都能够支持，其中epoll是Linux所特有，而select则应该是POSIX所规定，一般操作系统均有实现。</p><hr><p>select<br>    fd_set 使用数组实现<br>        1.fd_size 有限制 1024 bitmap<br>            fd【i】 = accept()<br>        2.fdset不可重用，新的fd进来，重新创建<br>        3.用户态和内核态拷贝产生开销<br>        4.O(n)时间复杂度的轮询<br>        成功调用返回结果大于 0，出错返回结果为 -1，超时返回结果为 0<br>        具有超时时间</p><p>poll<br>    基于结构体存储fd<br>    struct pollfd{<br>        int fd;<br>        short events;<br>        short revents; //可重用<br>    }<br>    解决了select的1,2两点缺点</p><p>epoll<br>    解决select的1，2，3，4<br>    不需要轮询，时间复杂度为O(1)<br>    epoll_create  创建一个白板 存放fd_events<br>    epoll_ctl 用于向内核注册新的描述符或者是改变某个文件描述符的状态。已注册的描述符在内核中会被维护在一棵红黑树上<br>    epoll_wait 通过回调函数内核会将 I/O 准备好的描述符加入到一个链表中管理，进程调用 epoll_wait() 便可以得到事件完成的描述符</p><p>​    两种触发模式：<br>​        LT:水平触发<br>​            当 epoll_wait() 检测到描述符事件到达时，将此事件通知进程，进程可以不立即处理该事件，下次调用 epoll_wait() 会再次通知进程。是默认的一种模式，并且同时支持 Blocking 和 No-Blocking。<br>​        ET:边缘触发<br>​            和 LT 模式不同的是，通知之后进程必须立即处理事件。<br>​            下次再调用 epoll_wait() 时不会再得到事件到达的通知。很大程度上减少了 epoll 事件被重复触发的次数，<br>​            因此效率要比 LT 模式高。只支持 No-Blocking，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="p/0.html"/>
      <url>p/0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p><a href="https://www.cnblogs.com/fengzheng/p/12557762.html" target="_blank" rel="noopener">MySQL 中是如何实现事务隔离的</a></p><h3 id="一、MySQL事务隔离级别"><a href="#一、MySQL事务隔离级别" class="headerlink" title="一、MySQL事务隔离级别"></a>一、MySQL事务隔离级别</h3><ol><li>读未提交：该级别事务可以读取到其他未提交的事务，造成脏读。</li><li>读已提交：能读取到其他提交的事务，可以避免脏读，但可造成不可重复读与幻读。</li><li>可重复读：MySQL默认事务隔离级别，可以解决不可重复读，但无法阻止新插入的记录造成后者可能会查到前者无法查出的数据。</li><li>序列化：事务的最高隔离级别，所有事务串行执行，性能最差。</li></ol><h3 id="二、Spring事务隔离级别"><a href="#二、Spring事务隔离级别" class="headerlink" title="二、Spring事务隔离级别"></a>二、Spring事务隔离级别</h3><ol><li>Isolation.Default：Spring：默认隔离级别，即采用数据库的隔离级别。</li><li>Isolation.Read_Uncommit：事务未提交可读，会出现脏读。</li><li>Isolation.Read_Commit：不可脏读，但会出现幻读和不可重复读。</li><li>Isolation.Repeatable_Read：不可脏读，不可重复读，但会出现幻读。</li><li>Isolation.Searializable：事务的最高隔离级别，所有事务串行执行。</li></ol><h3 id="三、Spring事务传播行为"><a href="#三、Spring事务传播行为" class="headerlink" title="三、Spring事务传播行为"></a>三、Spring事务传播行为</h3><ol><li>Required：如果当前存在事务会支持该事物，不存在则开启新的事务。</li><li>Required_New：创建新的逻辑事务，表示每次都创建新的逻辑事务。</li><li>Supports：支持当前事务，如果没有事务就会以非事务方式执行。</li><li>Not_Support：以非事务方式执行，如果当前存在事务就暂停该事务，以非事务方式运行。</li><li>Mandatory：支持当前事务，如果没有事务则抛出异常。</li><li>Never：以非事务方式运行，如果有事务则抛出异常。</li><li>Nested：嵌套事务支持，如果当前存在事务，则嵌套在事务内部执行，如不存在事务会新建事务，内部事务不影响外部事务，外部事务回滚则会导致内部事务回滚。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见SQL优化技巧</title>
      <link href="p/ccfb.html"/>
      <url>p/ccfb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>施工中…</p><a id="more"></a><p>BATJTMD 等大厂的面试难度越来越高，但无论从大厂还是到小公司，一直不变的重点就是对 SQL 优化经验的考察。一提到数据库，面试官就会问“先说一说你对 SQL 优化的见解吧？”。</p><p>SQL 优化已经成为衡量程序猿优秀与否的硬性指标，甚至在各大厂招聘岗位职能上都有明码标注，如果是你，在这个问题上能吊打面试官还是会被吊打呢？</p><p>有朋友疑问到，SQL 优化真的有这么重要么？如下图所示，SQL 优化在提升系统性能中是：成本最低和优化效果最明显的途径。</p><p>如果你的团队在 SQL 优化这方面搞得很优秀，对你们整个大型系统可用性方面无疑是一个质的跨越，真的能让你们老板省下不止几沓子钱。</p><p><strong>优化成本：硬件&gt;系统配置&gt;数据库表结构&gt;SQL 及索引。</strong></p><p><strong>优化效果：硬件&lt;系统配置&lt;数据库表结构&lt;SQL 及索引。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String result = <span class="string">"嗯，不错，"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"SQL优化经验足"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"熟悉事务锁"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"并发场景处理666"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"会打王者荣耀"</span>) &#123;</span><br><span class="line">                result += <span class="string">"明天入职"</span> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result += <span class="string">"先回去等消息吧"</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">Logger.info(<span class="string">"面试官："</span> + result );</span><br></pre></td></tr></table></figure><p>别看了，上面这是一道送命题。</p><p>好了我们言归正传，首先，对于MySQL层优化我一般遵从五个原则：</p><p>减少数据访问：设置合理的字段类型，启用压缩，通过索引访问等减少磁盘 IO。</p><p>返回更少的数据：只返回需要的字段和数据分页处理，减少磁盘 IO 及网络 IO。</p><p>减少交互次数：批量 DML 操作，函数存储等减少数据连接次数。</p><p>减少服务器 CPU 开销：尽量减少数据库排序操作以及全表查询，减少 CPU 内存占用。</p><p>利用更多资源：使用表分区，可以增加并行操作，更大限度利用 CPU 资源。</p><p>总结到 SQL 优化中，就如下三点：</p><p>最大化利用索引。</p><p>尽可能避免全表扫描。</p><p>减少无效数据的查询。</p><p>理解 SQL 优化原理 ，首先要搞清楚 SQL 执行顺序。</p><p>SELECT 语句，语法顺序如下：</p><ol><li>SELECT </li><li>DISTINCT <select_list></select_list></li><li>FROM <left_table></left_table></li><li><join_type> JOIN <right_table></right_table></join_type></li><li>ON <join_condition></join_condition></li><li>WHERE <where_condition></where_condition></li><li>GROUP BY <group_by_list></group_by_list></li><li>HAVING <having_condition></having_condition></li><li>ORDER BY <order_by_condition></order_by_condition></li><li>LIMIT <limit_number><br>SELECT 语句，执行顺序如下：<br>FROM<br>&lt;表名&gt; # 选取表，将多个表数据通过笛卡尔积变成一个表。<br>ON<br>&lt;筛选条件&gt; # 对笛卡尔积的虚表进行筛选<br>JOIN &lt;join, left join, right join…&gt;<br>&lt;join表&gt; # 指定join，用于添加数据到on之后的虚表中，例如left join会将左表的剩余数据添加到虚表中<br>WHERE<br>&lt;where条件&gt; # 对上述虚表进行筛选<br>GROUP BY<br>&lt;分组条件&gt; # 分组<br>&lt;SUM()等聚合函数&gt; # 用于having子句进行判断，在书写上这类聚合函数是写在having判断里面的<br>HAVING<br>&lt;分组筛选&gt; # 对分组后的结果进行聚合筛选<br>SELECT<br>&lt;返回数据列表&gt; # 返回的单列必须在group by子句中，聚合函数除外<br>DISTINCT<h1 id="数据除重"><a href="#数据除重" class="headerlink" title="数据除重"></a>数据除重</h1>ORDER BY<br>&lt;排序条件&gt; # 排序<br>LIMIT<br>&lt;行数限制&gt;<br>以下 SQL 优化策略适用于数据量较大的场景下，如果数据量较小，没必要以此为准，以免画蛇添足。<br>避免不走索引的场景</limit_number></li></ol><p>①尽量避免在字段开头模糊查询，会导致数据库引擎放弃索引进行全表扫描</p><p>如下：</p><p>SELECT * FROM t WHERE username LIKE ‘%陈%’<br>优化方式：尽量在字段后面使用模糊查询。</p><p>如下：</p><p>SELECT * FROM t WHERE username LIKE ‘陈%’<br>如果需求是要在前面使用模糊查询：</p><p>使用 MySQL 内置函数 INSTR（str，substr）来匹配，作用类似于 Java 中的 indexOf()，查询字符串出现的角标位置。</p><p>使用 FullText 全文索引，用 match against 检索。</p><p>数据量较大的情况，建议引用 ElasticSearch、Solr，亿级数据量检索速度秒级。</p><p>当表数据量较少（几千条儿那种），别整花里胡哨的，直接用 like ‘%xx%’。</p><p>②尽量避免使用 in 和 not in，会导致引擎走全表扫描</p><p>如下：</p><p>SELECT * FROM t WHERE id IN (2,3)<br>优化方式：如果是连续数值，可以用 between 代替。</p><p>如下：</p><p>SELECT * FROM t WHERE id BETWEEN 2 AND 3<br>如果是子查询，可以用 exists 代替。</p><p>如下：</p><p>– 不走索引<br>select * from A where A.id in (select id from B);<br>– 走索引<br>select * from A where exists (select * from B where B.id = A.id);<br>③尽量避免使用 or，会导致数据库引擎放弃索引进行全表扫描</p><p>如下：</p><p>SELECT * FROM t WHERE id = 1 OR id = 3<br>优化方式：可以用 union 代替 or。</p><p>如下：</p><p>SELECT * FROM t WHERE id = 1<br>   UNION<br>SELECT * FROM t WHERE id = 3<br>④尽量避免进行 null 值的判断，会导致数据库引擎放弃索引进行全表扫描</p><p>如下：</p><p>SELECT * FROM t WHERE score IS NULL<br>优化方式：可以给字段添加默认值 0，对 0 值进行判断。</p><p>如下：</p><p>SELECT * FROM t WHERE score = 0<br>⑤尽量避免在 where 条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描</p><p>可以将表达式、函数操作移动到等号右侧，如下：</p><p>– 全表扫描<br>SELECT * FROM T WHERE score/10 = 9<br>– 走索引<br>SELECT * FROM T WHERE score = 10*9<br>⑥当数据量大时，避免使用 where 1=1 的条件</p><p>通常为了方便拼装查询条件，我们会默认使用该条件，数据库引擎会放弃索引进行全表扫描。</p><p>如下：</p><p>SELECT username, age, sex FROM T WHERE 1=1<br>优化方式：用代码拼装 SQL 时进行判断，没 where 条件就去掉 where，有 where 条件就加 and。</p><p>⑦查询条件不能用 &lt;&gt; 或者 !=</p><p>使用索引列作为条件进行查询时，需要避免使用&lt;&gt;或者!=等判断条件。</p><p>如确实业务需要，使用到不等于符号，需要在重新评估索引建立，避免在此字段上建立索引，改由查询条件中其他索引字段代替。</p><p>⑧where 条件仅包含复合索引非前置列</p><p>如下：复合（联合）索引包含 key_part1，key_part2，key_part3 三列，但 SQL 语句没有包含索引前置列”key_part1”，按照 MySQL 联合索引的最左匹配原则，不会走联合索引。</p><p>select col1 from table where key_part2=1 and key_part3=2<br>⑨隐式类型转换造成不使用索引</p><p>如下 SQL 语句由于索引对列类型为 varchar，但给定的值为数值，涉及隐式类型转换，造成不能正确走索引。</p><p>select col1 from table where col_varchar=123;<br>⑩order by 条件要与 where 中条件一致，否则 order by 不会利用索引进行排序</p><p>如下：</p><p>– 不走age索引<br>SELECT * FROM t order by age;</p><p>– 走age索引<br>SELECT * FROM t where age &gt; 0 order by age;<br>对于上面的语句，数据库的处理顺序是：</p><p>第一步：根据 where 条件和统计信息生成执行计划，得到数据。</p><p>第二步：将得到的数据排序。当执行处理数据（order by）时，数据库会先查看第一步的执行计划，看 order by 的字段是否在执行计划中利用了索引。如果是，则可以利用索引顺序而直接取得已经排好序的数据。如果不是，则重新进行排序操作。</p><p>第三步：返回排序后的数据。</p><p>当 order by 中的字段出现在 where 条件中时，才会利用索引而不再二次排序，更准确的说，order by 中的字段在执行计划中利用了索引时，不用排序操作。</p><p>这个结论不仅对 order by 有效，对其他需要排序的操作也有效。比如 group by 、union 、distinct 等。</p><p>⑪正确使用 hint 优化语句</p><p>MySQL 中可以使用 hint 指定优化器在执行时选择或忽略特定的索引。</p><p>一般而言，处于版本变更带来的表结构索引变化，更建议避免使用 hint，而是通过 Analyze table 多收集统计信息。</p><p>但在特定场合下，指定 hint 可以排除其他索引干扰而指定更优的执行计划：</p><p>USE INDEX 在你查询语句中表名的后面，添加 USE INDEX 来提供希望 MySQL 去参考的索引列表，就可以让 MySQL 不再考虑其他可用的索引。</p><p>例子: SELECT col1 FROM table USE INDEX (mod_time, name)…</p><p>IGNORE INDEX 如果只是单纯的想让 MySQL 忽略一个或者多个索引，可以使用 IGNORE INDEX 作为 Hint。</p><p>例子: SELECT col1 FROM table IGNORE INDEX (priority) …</p><p>FORCE INDEX 为强制 MySQL 使用一个特定的索引，可在查询中使用FORCE INDEX 作为 Hint。</p><p>例子: SELECT col1 FROM table FORCE INDEX (mod_time) …</p><p>在查询的时候，数据库系统会自动分析查询语句，并选择一个最合适的索引。但是很多时候，数据库系统的查询优化器并不一定总是能使用最优索引。</p><p>如果我们知道如何选择索引，可以使用 FORCE INDEX 强制查询使用指定的索引。</p><p>例如：</p><p>SELECT * FROM students FORCE INDEX (idx_class_id) WHERE class_id = 1 ORDER BY id DESC;<br>SELECT 语句其他优化</p><p>①避免出现 select *</p><p>首先，select * 操作在任何类型数据库中都不是一个好的 SQL 编写习惯。</p><p>使用 select * 取出全部列，会让优化器无法完成索引覆盖扫描这类优化，会影响优化器对执行计划的选择，也会增加网络带宽消耗，更会带来额外的 I/O，内存和 CPU 消耗。</p><p>建议提出业务实际需要的列数，将指定列名以取代 select *。具体详情见《为什么大家都说SELECT * 效率低》</p><p>②避免出现不确定结果的函数</p><p>特定针对主从复制这类业务场景。由于原理上从库复制的是主库执行的语句，使用如 now()、rand()、sysdate()、current_user() 等不确定结果的函数很容易导致主库与从库相应的数据不一致。</p><p>另外不确定值的函数，产生的 SQL 语句无法利用 query cache。</p><p>③多表关联查询时，小表在前，大表在后</p><p>在 MySQL 中，执行 from 后的表关联查询是从左往右执行的（Oracle 相反），第一张表会涉及到全表扫描。</p><p>所以将小表放在前面，先扫小表，扫描快效率较高，在扫描后面的大表，或许只扫描大表的前 100 行就符合返回条件并 return 了。</p><p>例如：表 1 有 50 条数据，表 2 有 30 亿条数据；如果全表扫描表 2，你品，那就先去吃个饭再说吧是吧。</p><p>④使用表的别名</p><p>当在 SQL 语句中连接多个表时，请使用表的别名并把别名前缀于每个列名上。这样就可以减少解析的时间并减少哪些友列名歧义引起的语法错误。</p><p>⑤用 where 字句替换 HAVING 字句</p><p>避免使用 HAVING 字句，因为 HAVING 只会在检索出所有记录之后才对结果集进行过滤，而 where 则是在聚合前刷选记录，如果能通过 where 字句限制记录的数目，那就能减少这方面的开销。</p><p>HAVING 中的条件一般用于聚合函数的过滤，除此之外，应该将条件写在 where 字句中。</p><p>where 和 having 的区别：where 后面不能使用组函数。</p><p>⑥调整 Where 字句中的连接顺序</p><p>MySQL 采用从左往右，自上而下的顺序解析 where 子句。根据这个原理，应将过滤数据多的条件往前放，最快速度缩小结果集。</p><p>增删改 DML 语句优化</p><p>①大批量插入数据</p><p>如果同时执行大量的插入，建议使用多个值的 INSERT 语句（方法二）。这比使用分开 INSERT 语句快（方法一），一般情况下批量插入效率有几倍的差别。</p><p>方法一：</p><p>insert into T values(1,2); </p><p>insert into T values(1,3); </p><p>insert into T values(1,4);<br>方法二：</p><p>Insert into T values(1,2),(1,3),(1,4);<br>选择后一种方法的原因有三：</p><p>减少 SQL 语句解析的操作，MySQL 没有类似 Oracle 的 share pool，采用方法二，只需要解析一次就能进行数据的插入操作。</p><p>在特定场景可以减少对 DB 连接次数。</p><p>SQL 语句较短，可以减少网络传输的 IO。</p><p>②适当使用 commit</p><p>适当使用 commit 可以释放事务占用的资源而减少消耗，commit 后能释放的资源如下：</p><p>事务占用的 undo 数据块。</p><p>事务在 redo log 中记录的数据块。</p><p>释放事务施加的，减少锁争用影响性能。特别是在需要使用 delete 删除大量数据的时候，必须分解删除量并定期 commit。</p><p>③避免重复查询更新的数据</p><p>针对业务中经常出现的更新行同时又希望获得改行信息的需求，MySQL 并不支持 PostgreSQL 那样的 UPDATE RETURNING 语法，在 MySQL 中可以通过变量实现。</p><p>例如，更新一行记录的时间戳，同时希望查询当前记录中存放的时间戳是什么？</p><p>简单方法实现：</p><p>Update t1 set time=now() where col1=1; </p><p>Select time from t1 where id =1;<br>使用变量，可以重写为以下方式：</p><p>Update t1 set time=now () where col1=1 and @now: = now (); </p><p>Select @now;<br>前后二者都需要两次网络来回，但使用变量避免了再次访问数据表，特别是当 t1 表数据量较大时，后者比前者快很多。</p><p>④查询优先还是更新（insert、update、delete）优先</p><p>MySQL 还允许改变语句调度的优先级，它可以使来自多个客户端的查询更好地协作，这样单个客户端就不会由于锁定而等待很长时间。改变优先级还可以确保特定类型的查询被处理得更快。</p><p>我们首先应该确定应用的类型，判断应用是以查询为主还是以更新为主的，是确保查询效率还是确保更新的效率，决定是查询优先还是更新优先。</p><p>下面我们提到的改变调度策略的方法主要是针对只存在表锁的存储引擎，比如  MyISAM 、MEMROY、MERGE，对于 Innodb 存储引擎，语句的执行是由获得行锁的顺序决定的。</p><p>MySQL 的默认的调度策略可用总结如下：</p><p>写入操作优先于读取操作。</p><p>对某张数据表的写入操作某一时刻只能发生一次，写入请求按照它们到达的次序来处理。</p><p>对某张数据表的多个读取操作可以同时地进行。</p><p>MySQL 提供了几个语句调节符，允许你修改它的调度策略：</p><p>LOW_PRIORITY 关键字应用于 DELETE、INSERT、LOAD DATA、REPLACE 和 UPDATE。</p><p>HIGH_PRIORITY 关键字应用于 SELECT 和 INSERT 语句。</p><p>DELAYED 关键字应用于 INSERT 和 REPLACE 语句。</p><p>如果写入操作是一个 LOW_PRIORITY（低优先级）请求，那么系统就不会认为它的优先级高于读取操作。</p><p>在这种情况下，如果写入者在等待的时候，第二个读取者到达了，那么就允许第二个读取者插到写入者之前。</p><p>只有在没有其它的读取者的时候，才允许写入者开始操作。这种调度修改可能存在 LOW_PRIORITY 写入操作永远被阻塞的情况。</p><p>SELECT 查询的 HIGH_PRIORITY（高优先级）关键字也类似。它允许 SELECT 插入正在等待的写入操作之前，即使在正常情况下写入操作的优先级更高。</p><p>另外一种影响是，高优先级的 SELECT 在正常的 SELECT 语句之前执行，因为这些语句会被写入操作阻塞。</p><p>如果希望所有支持 LOW_PRIORITY 选项的语句都默认地按照低优先级来处理，那么请使用–low-priority-updates 选项来启动服务器。</p><p>通过使用 INSERTHIGH_PRIORITY 来把 INSERT 语句提高到正常的写入优先级，可以消除该选项对单个 INSERT 语句的影响。</p><p>查询条件优化</p><p>①对于复杂的查询，可以使用中间临时表暂存数据</p><p>②优化 group by 语句</p><p>默认情况下，MySQL 会对 GROUP BY 分组的所有值进行排序，如 “GROUP BY col1，col2，….;” 查询的方法如同在查询中指定 “ORDER BY col1，col2，…;” 。</p><p>如果显式包括一个包含相同的列的 ORDER BY 子句，MySQL 可以毫不减速地对它进行优化，尽管仍然进行排序。</p><p>因此，如果查询包括 GROUP BY 但你并不想对分组的值进行排序，你可以指定 ORDER BY NULL 禁止排序。</p><p>例如：</p><p>SELECT col1, col2, COUNT(*) FROM table GROUP BY col1, col2 ORDER BY NULL ;<br>③优化 join 语句</p><p>MySQL 中可以通过子查询来使用 SELECT 语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。</p><p>使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的 SQL 操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询可以被更有效率的连接（JOIN）..替代。</p><p>例子：假设要将所有没有订单记录的用户取出来，可以用下面这个查询完成：</p><p>SELECT col1 FROM customerinfo WHERE CustomerID NOT in (SELECT CustomerID FROM salesinfo )<br>如果使用连接（JOIN）..来完成这个查询工作，速度将会有所提升。</p><p>尤其是当 salesinfo 表中对 CustomerID 建有索引的话，性能将会更好，查询如下：</p><p>SELECT col1 FROM customerinfo<br>   LEFT JOIN salesinfoON customerinfo.CustomerID=salesinfo.CustomerID<br>      WHERE salesinfo.CustomerID IS NULL<br>连接（JOIN）..之所以更有效率一些，是因为 MySQL 不需要在内存中创建临时表来完成这个逻辑上的需要两个步骤的查询工作。</p><p>④优化 union 查询</p><p>MySQL 通过创建并填充临时表的方式来执行 union 查询。除非确实要消除重复的行，否则建议使用 union all。</p><p>原因在于如果没有 all 这个关键词，MySQL 会给临时表加上 distinct 选项，这会导致对整个临时表的数据做唯一性校验，这样做的消耗相当高。</p><p>高效：</p><p>SELECT COL1, COL2, COL3 FROM TABLE WHERE COL1 = 10 </p><p>UNION ALL </p><p>SELECT COL1, COL2, COL3 FROM TABLE WHERE COL3= ‘TEST’;<br>低效：</p><p>SELECT COL1, COL2, COL3 FROM TABLE WHERE COL1 = 10 </p><p>UNION </p><p>SELECT COL1, COL2, COL3 FROM TABLE WHERE COL3= ‘TEST’;<br>⑤拆分复杂 SQL 为多个小 SQL，避免大事务</p><p>如下：</p><p>简单的 SQL 容易使用到 MySQL 的 QUERY CACHE。</p><p>减少锁表时间特别是使用 MyISAM 存储引擎的表。</p><p>可以使用多核 CPU。</p><p>⑥使用 truncate 代替 delete</p><p>当删除全表中记录时，使用 delete 语句的操作会被记录到 undo 块中，删除记录也记录 binlog。</p><p>当确认需要删除全表时，会产生很大量的 binlog 并占用大量的 undo 数据块，此时既没有很好的效率也占用了大量的资源。</p><p>使用 truncate 替代，不会记录可恢复的信息，数据不能被恢复。也因此使用 truncate 操作有其极少的资源占用与极快的时间。另外，使用 truncate 可以回收表的水位，使自增字段值归零。</p><p>⑦使用合理的分页方式以提高分页效率</p><p>使用合理的分页方式以提高分页效率 针对展现等分页需求，合适的分页方式能够提高分页的效率。</p><p>案例 1：</p><p>select * from t where thread_id = 10000 and deleted = 0<br>   order by gmt_create asc limit 0, 15;<br>上述例子通过一次性根据过滤条件取出所有字段进行排序返回。数据访问开销=索引 IO+索引全部记录结果对应的表数据 IO。</p><p>因此，该种写法越翻到后面执行效率越差，时间越长，尤其表数据量很大的时候。</p><p>适用场景：当中间结果集很小（10000 行以下）或者查询条件复杂（指涉及多个不同查询字段或者多表连接）时适用。</p><p>案例 2：</p><p>select t.* from (select id from t where thread_id = 10000 and deleted = 0<br>   order by gmt_create asc limit 0, 15) a, t<br>      where a.id = t.id;<br>上述例子必须满足 t 表主键是 id 列，且有覆盖索引 secondary key：（thread_id, deleted, gmt_create）。</p><p>通过先根据过滤条件利用覆盖索引取出主键 id 进行排序，再进行 join 操作取出其他字段。</p><p>数据访问开销=索引 IO+索引分页后结果（例子中是 15 行）对应的表数据 IO。因此，该写法每次翻页消耗的资源和时间都基本相同，就像翻第一页一样。</p><p>适用场景：当查询和排序字段（即 where 子句和 order by 子句涉及的字段）有对应覆盖索引时，且中间结果集很大的情况时适用。</p><p>建表优化</p><p>①在表中建立索引，优先考虑 where、order by 使用到的字段。</p><p>②尽量使用数字型字段（如性别，男：1 女：2），若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。</p><p>这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p><p>③查询数据量大的表 会造成查询缓慢。主要的原因是扫描行数过多。这个时候可以通过程序，分段分页进行查询，循环遍历，将结果合并处理进行展示。</p><p>要查询 100000 到 100050 的数据，如下：</p><p>SELECT * FROM (SELECT ROW_NUMBER() OVER(ORDER BY ID ASC) AS rowid,*<br>   FROM infoTab)t WHERE t.rowid &gt; 100000 AND t.rowid &lt;= 100050<br>④用 varchar/nvarchar 代替 char/nchar。</p><p>尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><p>不要以为 NULL 不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值（NULL 也包含在内），都是占用 100 个字符的空间的，如果是 varchar 这样的变长字段， null 不占用空间。</p>]]></content>
      
      
      <categories>
          
          <category> 生活技术吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活技术吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架中Bean的生命周期</title>
      <link href="p/48a1.html"/>
      <url>p/48a1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>Spring容器 从XML 文件中读取bean的定义，并实例化bean。</li><li>Spring根据bean的定义填充所有的属性。</li><li>如果bean实现了BeanNameAware 接口，Spring 传递bean 的ID 到 setBeanName方法。</li><li>如果Bean 实现了 BeanFactoryAware 接口， Spring传递beanfactory 给setBeanFactory 方法。</li><li>如果有任何与bean相关联的BeanPostProcessors，Spring会在postProcesserBeforeInitialization()方法内调用它们。</li><li>如果bean实现IntializingBean了，调用它的afterPropertySet方法，如果bean声明了初始化方法，调用此初始化方法。</li><li>如果有BeanPostProcessors 和bean 关联，这些bean的postProcessAfterInitialization() 方法将被调用。</li><li>如果bean实现了 DisposableBean，它将调用destroy()方法。</li></ul><p><img src="https://img.senup.cn/blog/20200818/XivX0lngIG5L.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>切入点表达式的书写规则</title>
      <link href="p/f37d.html"/>
      <url>p/f37d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>切入点表达式主要就是来<strong>配置拦截哪些类的哪些方法</strong></p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">execution(modifiers-pattern?</span> <span class="string"></span></span><br><span class="line"><span class="meta">ret-type-pattern</span> <span class="string"></span></span><br><span class="line"><span class="meta">declaring-type-pattern?</span> <span class="string"></span></span><br><span class="line"><span class="meta">name-pattern(param-pattern)</span> <span class="string"></span></span><br><span class="line"><span class="attr">throws-pattern?)</span></span><br></pre></td></tr></table></figure><p><strong>符号讲解：</strong></p><ul><li><strong>?号代表0或1，可以不写</strong></li><li><strong>“*”号代表任意类型，0或多</strong></li><li><strong>方法参数为..表示为可变参数</strong></li></ul><p><strong>参数讲解：</strong></p><ul><li><strong>modifiers-pattern?【修饰的类型，可以不写】</strong></li><li><strong>ret-type-pattern【方法返回值类型，必写】</strong></li><li><strong>declaring-type-pattern?【方法声明的类型，可以不写】</strong></li><li><strong>name-pattern(param-pattern)【要匹配的名称，括号里面是方法的参数】</strong></li><li><strong>throws-pattern?【方法抛出的异常类型，可以不写】</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 【拦截所有public方法】 --&gt;</span></span><br><span class="line">execution(public * *(..))" </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 【拦截所有save开头的方法 】 --&gt;</span></span><br><span class="line">execution(* save*(..))</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 【拦截指定类的指定方法, 拦截时候一定要定位到方法】 --&gt;</span></span><br><span class="line">execution(public * cn.itcast.g_pointcut.OrderDao.save(..))</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 【拦截指定类的所有方法】 --&gt;</span></span><br><span class="line">execution(* cn.itcast.g_pointcut.UserDao.*(..))</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 【拦截指定包，以及其自包下所有类的所有方法】 --&gt;</span></span><br><span class="line">execution(* cn..*.*(..))</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 【多个表达式】 --&gt;</span></span><br><span class="line">execution(* cn.itcast.g_pointcut.UserDao.save()) || execution(* cn.itcast.g_pointcut.OrderDao.save())</span><br><span class="line">execution(* cn.itcast.g_pointcut.UserDao.save()) or execution(* cn.itcast.g_pointcut.OrderDao.save())</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 下面2个且关系的，没有意义 --&gt;</span></span><br><span class="line">execution(*cn.itcast.g_pointcut.UserDao.save()) &amp;&amp; execution(*cn.itcast.g_pointcut.OrderDao.save())</span><br><span class="line">execution(* cn.itcast.g_pointcut.UserDao.save()) and execution(* cn.itcast.g_pointcut.OrderDao.save())</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 【取非值】 --&gt;</span></span><br><span class="line">!execution(* cn.itcast.g_pointcut.OrderDao.save())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot常用注解间的区别</title>
      <link href="p/2d39.html"/>
      <url>p/2d39.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Resource注解和-Autowired的区别"><a href="#Resource注解和-Autowired的区别" class="headerlink" title="@Resource注解和@Autowired的区别"></a>@Resource注解和@Autowired的区别</h2><p><strong>@Autowired注解：是按类型装配依赖对象*</strong>，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它required属性为false。*</p><p><strong>@Resource注解：</strong>和@Autowired一样，也可以标注在字段或属性的setter方法上，但它<strong>默认按名称装配</strong>。名称可以通过@Resource的name属性指定，如果没有指定name属性，当注解标注在字段上，即默认取字段的名称作为bean名称寻找依赖对象，当注解标注在属性的setter方法上，即默认取属性名作为bean名称寻找依赖对象。</p><p><strong>简单点说，就是：@Resources按名字，是ＪＤＫ的；@Autowired按类型，是Ｓｐｒｉｎｇ的。</strong></p><h2 id="Component-Repository-Service，-Component-Repository-Service的区别"><a href="#Component-Repository-Service，-Component-Repository-Service的区别" class="headerlink" title="@Component, @Repository, @Service，@Component, @Repository, @Service的区别"></a>@Component, @Repository, @Service，@Component, @Repository, @Service的区别</h2><table><thead><tr><th>注解</th><th>含义</th></tr></thead><tbody><tr><td>@Component</td><td>最普通的组件，可以被注入到spring容器进行管理</td></tr><tr><td>@Repository</td><td>作用于持久层</td></tr><tr><td>@Service</td><td>作用于业务逻辑层</td></tr><tr><td>@Controller</td><td>作用于表现层（spring-mvc的注解）</td></tr></tbody></table><p><code>@Component</code>, <code>@Service</code>, <code>@Controller</code>, <code>@Repository</code>是spring注解，注解后可以被spring框架所扫描并注入到spring容器来进行管理<br><code>@**Component**</code>是通用注解，其他三个注解是这个注解的拓展，并且具有了特定的功能<br><code>@**Repository**</code>注解在持久层中，具有将数据库操作抛出的原生异常翻译转化为spring的持久层异常的功能。<br><code>@**Controller**</code>层是spring-mvc的注解，具有将请求进行转发，重定向的功能。<br><code>@**Service**</code>层是业务逻辑层注解，这个注解只是标注该类处于业务逻辑层。</p><a id="more"></a><hr><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a><a href="https://www.cnblogs.com/yanghj/p/12885937.html" target="_blank" rel="noopener">参考来源</a></h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web页面请求过程</title>
      <link href="p/9b09.html"/>
      <url>p/9b09.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="DHCP-配置主机信息"><a href="#DHCP-配置主机信息" class="headerlink" title="DHCP 配置主机信息"></a>DHCP 配置主机信息</h2><ul><li>假设主机最开始没有 IP 地址以及其它信息，那么就需要先使用 DHCP 来获取。</li><li>主机生成一个 <strong>DHCP 请求报文</strong>，并将这个报文放入具有目的端口 67 和源端口 68 的 <strong>UDP 报文段</strong>中。</li><li>该报文段则被放入在一个具有广播 IP 目的地址(255.255.255.255) 和源 IP 地址（0.0.0.0）的 <strong>IP 数据报</strong>中。</li><li>该数据报则被放置在 <strong>MAC 帧</strong>中，该帧具有目的地址 FF:FF:FF:FF:FF:FF，将广播到与交换机连接的所有设备。</li><li>连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 <strong>DHCP ACK 报文</strong>，该报文包含以下信息：<code>IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码</code>。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。</li><li>该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，<em>因此现在交换机就可以直接知道应该向哪个接口发送该帧</em>。</li><li>主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中<strong>安装默认网关</strong>。</li></ul><h2 id="ARP-解析-MAC-地址"><a href="#ARP-解析-MAC-地址" class="headerlink" title="ARP 解析 MAC 地址"></a>ARP 解析 MAC 地址</h2><ul><li>主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。<strong>为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。</strong></li><li>主机生成一个 <strong>DNS 查询报文</strong>，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。</li><li>该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 <strong>IP 数据报</strong>中。</li><li>该 IP 数据报被放入一个<strong>以太网帧</strong>中，该帧将<strong>发送到网关路由器</strong>。</li><li>DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。</li><li>主机生成一个包含目的地址为网关路由器 IP 地址的 <strong>ARP 查询报文</strong>，将该 ARP 查询报文放入一个具有广播目的地址（FF:FF:FF:FF:FF:FF）的<strong>以太网帧</strong>中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。</li><li>网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 <strong>ARP 回答报文</strong>，包含了它的 <strong>MAC 地址</strong>，发回给主机。</li></ul><h2 id="DNS-解析域名"><a href="#DNS-解析域名" class="headerlink" title="DNS 解析域名"></a>DNS 解析域名</h2><ul><li>知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。</li><li>网关路由器接收到包含 <strong>DNS 查询报文</strong>的<strong>以太网帧</strong>后，抽取出 <strong>IP 数据报</strong>，并根据转发表决定该 IP 数据报应该转发的路由器。</li><li>因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。</li><li>到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。</li><li>找到 DNS 记录之后，发送 <strong>DNS 回答报文</strong>，将该回答报文放入 <strong>UDP 报文段</strong>中，然后放入 <strong>IP 数据报</strong>中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。</li></ul><h2 id="HTTP-请求页面"><a href="#HTTP-请求页面" class="headerlink" title="HTTP 请求页面"></a>HTTP 请求页面</h2><ul><li>有了 HTTP 服务器的 IP 地址之后，主机就能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。</li><li>在生成 TCP 套接字之前，必须先与 HTTP 服务器进行三次握手来建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。</li><li>HTTP 服务器收到该报文段之后，生成 TCP SYN ACK 报文段，发回给主机。</li><li>连接建立之后，浏览器生成 HTTP GET 报文，并交付给 HTTP 服务器。</li><li>HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将 Web 页面内容放入报文主体中，发回给主机。</li><li>浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVCC多版本并发控制</title>
      <link href="p/9a9a.html"/>
      <url>p/9a9a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MVCC实现"><a href="#MVCC实现" class="headerlink" title="MVCC实现"></a>MVCC实现</h2><p><strong>MVCC是通过在每行记录后面保存两个隐藏的列来实现的。这两个列，一个保存了行的创建时间，一个保存行的过期时间（或删除时间）。当然存储的并不是实际的时间值，而是系统版本号（system version number)。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。</strong><br> 下面看一下在REPEATABLE READ隔离级别下，MVCC具体是如何操作的。</p><ul><li><p>SELECT</p><p>InnoDB会根据以下两个条件检查每行记录：</p><ol><li>InnoDB只查找版本早于当前事务版本的数据行（也就是，行的系统版本号小于或等于事务的系统版本号），这样可以确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的。</li><li>行的删除版本要么未定义，要么大于当前事务版本号。这可以确保事务读取到的行，在事务开始之前未被删除。</li></ol><p>只有符合上述两个条件的记录，才能返回作为查询结果</p></li><li><p>INSERT</p><p>InnoDB为新插入的每一行保存当前系统版本号作为行版本号。</p></li><li><p>DELETE</p><p>InnoDB为删除的每一行保存当前系统版本号作为行删除标识。</p></li><li><p>UPDATE</p><p>InnoDB为插入一行新记录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为行删除标识。<br> 保存这两个额外系统版本号，使大多数读操作都可以不用加锁。这样设计使得读数据操作很简单，性能很好，并且也能保证只会读取到符合标准的行，不足之处是每行记录都需要额外的存储空间，需要做更多的行检查工作，以及一些额外的维护工作</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot利用AOP防止重复提交</title>
      <link href="p/15b7.html"/>
      <url>p/15b7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>服务器端实现方案:同一客户端在2秒内对同一URL的提交视为重复提交</p><blockquote><p>作者：不知不怪<br>链接：<a href="https://www.jianshu.com/p/09c6b05b670a" target="_blank" rel="noopener">https://www.jianshu.com/p/09c6b05b670a</a></p></blockquote><a id="more"></a><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-repeat-submit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>24.0-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d[%F:%L][%p]:%m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Application-java"><a href="#Application-java" class="headerlink" title="Application.java"></a>Application.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> www.gaozz.club</span></span><br><span class="line"><span class="comment"> * @功能描述 防重复提交</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-08-26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义注解NoRepeatSubmit-java"><a href="#自定义注解NoRepeatSubmit-java" class="headerlink" title="自定义注解NoRepeatSubmit.java"></a>自定义注解NoRepeatSubmit.java</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">annotation</span>.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">annotation</span>.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">annotation</span>.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">annotation</span>.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">// 作用到方法上</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 运行时有效</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @功能描述 防止重复提交标记注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> www.gaozz.club</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-08-26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NoRepeatSubmit &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="aop解析注解NoRepeatSubmitAop-java"><a href="#aop解析注解NoRepeatSubmitAop-java" class="headerlink" title="aop解析注解NoRepeatSubmitAop.java"></a>aop解析注解NoRepeatSubmitAop.java</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.<span class="keyword">annotation</span>.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.Cache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @功能描述 aop解析注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> www.gaozz.club</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-08-26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoRepeatSubmitAop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String, Integer&gt; cache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(<span class="meta-string">"execution(* com.example..*Controller.*(..)) &amp;&amp; @annotation(nrs)"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> Object arround(ProceedingJoinPoint pjp, NoRepeatSubmit nrs) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">            String sessionId = RequestContextHolder.getRequestAttributes().getSessionId();</span><br><span class="line">            HttpServletRequest request = attributes.getRequest();</span><br><span class="line">            String key = sessionId + <span class="string">"-"</span> + request.getServletPath();</span><br><span class="line">            <span class="keyword">if</span> (cache.getIfPresent(key) == <span class="literal">null</span>) &#123;<span class="comment">// 如果缓存中有这个url视为重复提交</span></span><br><span class="line">                Object o = pjp.proceed();</span><br><span class="line">                cache.put(key, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.error(<span class="string">"重复提交"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(<span class="string">"验证重复提交时出现未知异常!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#123;\"code\":-889,\"message\":\"验证重复提交时出现未知异常!\"&#125;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存类"><a href="#缓存类" class="headerlink" title="缓存类"></a>缓存类</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.CacheBuilder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @功能描述 内存缓存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> www.gaozz.club</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-08-26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlCache</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Cache&lt;String, Integer&gt; getCache() &#123;</span><br><span class="line">        <span class="keyword">return</span> CacheBuilder.newBuilder().expireAfterWrite(<span class="number">2L</span>, TimeUnit.SECONDS).build();<span class="comment">// 缓存有效期为2秒</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试Controller"><a href="#测试Controller" class="headerlink" title="测试Controller"></a>测试Controller</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.common.NoRepeatSubmit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @功能描述 测试Controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> www.gaozz.club</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-08-26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/test"</span>)</span></span><br><span class="line">    <span class="meta">@NoRepeatSubmit</span></span><br><span class="line">    <span class="keyword">public</span> String test() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"程序逻辑返回"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="浏览器输入http-localhost-8080-test"><a href="#浏览器输入http-localhost-8080-test" class="headerlink" title="浏览器输入http://localhost:8080/test"></a>浏览器输入<a href="https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A8080%2Ftest" target="_blank" rel="noopener">http://localhost:8080/test</a></h2><p>然后F5刷新查看效果</p><hr><p><strong>以下为新版内容:解决了程序集群部署时请求可能会落到多台机器上的问题,把内存缓存换成了redis</strong></p><hr><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">spring</span>:</span><br><span class="line">  <span class="selector-tag">redis</span>:</span><br><span class="line">    <span class="selector-tag">host</span>: 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.92</span></span><br><span class="line">    <span class="selector-tag">port</span>: 6379</span><br><span class="line">    <span class="selector-tag">password</span>: 123456</span><br></pre></td></tr></table></figure><h2 id="RedisConfig-java"><a href="#RedisConfig-java" class="headerlink" title="RedisConfig.java"></a>RedisConfig.java</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.connection.RedisStandaloneConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.connection.jedis.JedisClientConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.connection.jedis.JedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = <span class="meta-string">"spring.redis"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> JedisConnectionFactory getConnectionFactory() &#123;</span><br><span class="line">        <span class="keyword">return</span> new JedisConnectionFactory(new RedisStandaloneConfiguration(), JedisClientConfiguration.builder().build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    &lt;K, V&gt; RedisTemplate&lt;K, V&gt; getRedisTemplate() &#123;</span><br><span class="line">        RedisTemplate&lt;K, V&gt; redisTemplate = new RedisTemplate&lt;K, V&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(getConnectionFactory());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调整切面类NoRepeatSubmitAop-java"><a href="#调整切面类NoRepeatSubmitAop-java" class="headerlink" title="调整切面类NoRepeatSubmitAop.java"></a>调整切面类NoRepeatSubmitAop.java</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.<span class="keyword">annotation</span>.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.<span class="keyword">annotation</span>.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.core.ValueOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @功能描述 aop解析注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> www.gaozz.club</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-11-02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoRepeatSubmitAop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Integer&gt; template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(<span class="meta-string">"execution(* com.example..*Controller.*(..)) &amp;&amp; @annotation(nrs)"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> Object arround(ProceedingJoinPoint pjp, NoRepeatSubmit nrs) &#123;</span><br><span class="line">        ValueOperations&lt;String, Integer&gt; opsForValue = template.opsForValue();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">            String sessionId = RequestContextHolder.getRequestAttributes().getSessionId();</span><br><span class="line">            HttpServletRequest request = attributes.getRequest();</span><br><span class="line">            String key = sessionId + <span class="string">"-"</span> + request.getServletPath();</span><br><span class="line">            <span class="keyword">if</span> (opsForValue.<span class="keyword">get</span>(key) == <span class="literal">null</span>) &#123;<span class="comment">// 如果缓存中有这个url视为重复提交</span></span><br><span class="line">                Object o = pjp.proceed();</span><br><span class="line">                opsForValue.<span class="keyword">set</span>(key, <span class="number">0</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.error(<span class="string">"重复提交"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(<span class="string">"验证重复提交时出现未知异常!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#123;\"code\":-889,\"message\":\"验证重复提交时出现未知异常!\"&#125;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fgzz2017gzz%2Fspring-boot2-example%2Ftree%2Fmaster%2F54-spring-boot-repeat-submit-single" target="_blank" rel="noopener">https://github.com/gzz2017gzz/spring-boot2-example/tree/master/54-spring-boot-repeat-submit-single</a><br> 另附:</p><h2 id="代码生成器源码"><a href="#代码生成器源码" class="headerlink" title="代码生成器源码"></a><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fgzz2017gzz%2Fcode%2F" target="_blank" rel="noopener">代码生成器源码</a></h2><h2 id="代码生成器演示"><a href="#代码生成器演示" class="headerlink" title="代码生成器演示"></a><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.gaozz.club%2F" target="_blank" rel="noopener">代码生成器演示</a></h2><h2 id="spring-boot-2-x-实例源码"><a href="#spring-boot-2-x-实例源码" class="headerlink" title="spring boot 2.x 实例源码"></a><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fgzz2017gzz%2Fspring-boot2-example" target="_blank" rel="noopener">spring boot 2.x 实例源码</a></h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>innodb没有设置主键的时候怎么办？</title>
      <link href="p/31f8.html"/>
      <url>p/31f8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>当创建表时没有显示定义主键时.</strong></p><p><strong>1 首先判断表中是否有非空的整形唯一索引,如果有,则该列为主键(这时候可以使用 select _rowid from table 查询到主键列).</strong></p><p><strong>2 如果没有符合条件的则会自动创建一个6字节的主键(该主键是查不到的).</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射的实现方式和优缺点</title>
      <link href="p/b161.html"/>
      <url>p/b161.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>反射机制是在运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意个对象，都能够调用它的任意一个方法。在java中，只要给定类的名字，就可以通过反射机制来获得类的所有信息。</p><p>获取Class对象，有4种方法：</p><p>1）Class.forName(“类的路径”)；<br>2）类名.class<br>3）对象名.getClass()<br>4）基本类型的包装类，可以调用包装类的Type属性来获得该包装类的Class对象</p><p>优点：<br>1）能够运行时动态获取类的实例，提高灵活性；<br>2）与动态编译结合<br>缺点：<br>1）使用反射性能较低，需要解析字节码，将内存中的对象进行解析。<br>解决方案：<br>1、通过setAccessible(true)关闭JDK的安全检查来提升反射速度；<br>2、多次创建一个类的实例时，有缓存会快很多<br>3、ReflectASM工具类，通过字节码生成的方式加快反射速度<br>2）相对不安全，破坏了封装性（因为通过反射可以获得私有方法和属性）</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO和NIO的区别</title>
      <link href="p/92dc.html"/>
      <url>p/92dc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>NIO是以块的方式处理数据，但是IO是以最基础的字节流的形式去写入和读出的。所以在<strong>效率</strong>上的话，肯定是NIO效率比IO效率会高出很多。</li><li>NIO不在是和IO一样用OutputStream和InputStream 输入<strong>流的形式</strong>来进行处理数据的，但是又是基于这种流的形式，而是采用了<strong>通道和缓冲区</strong>的形式来进行处理数据的。</li><li>还有一点就是NIO的通道是可以<strong>双向</strong>的，但是IO中的流只能是单向的。</li><li>还有就是NIO的缓冲区（其实也就是一个字节数组）还可以进行分片，可以建立只读缓冲区、直接缓冲区和间接缓冲区，只读缓冲区很明显就是字面意思，直接缓冲区是为加快 I/O 速度，而以一种特殊的方式分配其内存的缓冲区。</li><li>补充一点：NIO比传统的BIO核心区别就是，NIO采用的是<strong>多路复用的IO模型</strong>，普通的IO用的是<strong>阻塞的IO模型</strong>，两个之间的效率肯定是多路复用效率更高</li></ol><a id="more"></a><h3 id="什么是多路复用？"><a href="#什么是多路复用？" class="headerlink" title="什么是多路复用？"></a>什么是多路复用？</h3><p>I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。</p><blockquote><p>但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</p></blockquote><h3 id="为什么要有Selector"><a href="#为什么要有Selector" class="headerlink" title="为什么要有Selector"></a>为什么要有Selector</h3><p>要理解为什么要有Selector？这个问题，我们首先得知道在UNIX系统中有五种I/O模型：同步阻塞I/O、同步非阻塞I/O、I/O多路复用、信号驱动I/O和异步I/O。这个几个I/O模型都是什么意思呢，大概比喻一下。</p><ul><li>阻塞式I/O模型：一个人在钓鱼，当没鱼上钩时，就坐在岸边一直等。</li><li>非阻塞式I/O模型：边钓鱼边玩手机，隔会再看看有没有鱼上钩，有的话就迅速拉杆。</li><li>I/O复用模型：放了一堆鱼竿，在岸边一直守着这堆鱼竿，没鱼上钩就玩手机。</li><li>信号驱动式I/O模型：鱼竿上系了个铃铛，当铃铛响，就知道鱼上钩，然后可以专心玩手机。</li><li>异步I/O模型：雇佣一个人来给我钓鱼，钓上来以后给我送到住处，我该干嘛干嘛去。</li></ul><p><strong>Selector的作用就是用来轮询每个注册的Channel，一旦发现Channel有注册的事件发生，便获取事件然后进行处理。</strong></p><h3 id="通道是个什么意思？"><a href="#通道是个什么意思？" class="headerlink" title="通道是个什么意思？"></a>通道是个什么意思？</h3><p>通道是对原 I/O 包中的流的模拟。到任何目的地(或来自任何地方)的所有数据都必须通过一个 Channel 对象（通道）。</p><p>一个 Buffer 实质上是一个容器对象。发送给一个通道的所有对象都必须首先放到缓冲区中；同样地，从通道中读取的任何数据都要读到缓冲区中。Channel是一个对象，可以通过它读取和写入数据。拿 NIO 与原来的 I/O 做个比较，通道就像是流。</p><p>正如前面提到的，所有数据都通过 Buffer 对象来处理。您永远不会将字节直接写入通道中，相反，您是将数据写入包含一个或者多个字节的缓冲区。同样，您不会直接从通道中读取字节，而是将数据从通道读入缓冲区，再从缓冲区获取这个字节。</p><p>我们知道NIO中的Channel分为四种类型</p><ul><li><code>FileChannel</code>:文件通道</li><li><code>DatagramChannel</code>:通过UDP读取网络中的数据</li><li><code>SocketChannel</code>:通过TCP读取网络中的数据</li><li><code>ServerSocketChannel</code>:可以监听进来的连接，对于每个进来的连接都会创建一个<code>SocketChannel</code></li></ul><p>在这四个通道中有一个不能和<code>Selector</code>配合使用，因为<code>Selector</code>是不断的轮询注册在<code>Selector</code>中的每个通道的状态，不能阻塞在其中一个通道，即每个通道必须是非阻塞状态的，但是<code>FileChannel</code>的通道是阻塞状态且不能更改，所以<code>FileChannel</code>不能和<code>Selector</code>配合使用。</p><h3 id="缓冲区是什么意思："><a href="#缓冲区是什么意思：" class="headerlink" title="缓冲区是什么意思："></a>缓冲区是什么意思：</h3><ul><li>Buffer 是一个对象， 它包含一些要写入或者刚读出的数据。在 NIO 中加入 Buffer 对象，体现了新库与原 I/O 的一个重要区别。在面向流的 I/O 中，您将数据直接写入或者将数据直接读到 Stream 对象中</li><li>在 NIO 库中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的。在写入数据时，它是写入到缓冲区中的。任何时候访问 NIO 中的数据，您都是将它放到缓冲区中。</li><li>缓冲区实质上是一个数组。通常它是一个字节数组，但是也可以使用其他种类的数组。但是一个缓冲区不 仅仅 是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读/写进程</li></ul><h3 id="缓冲区的类型："><a href="#缓冲区的类型：" class="headerlink" title="缓冲区的类型："></a>缓冲区的类型：</h3><blockquote><p>ByteBuffer<br>CharBuffer<br>ShortBuffer<br>IntBuffer<br>LongBuffer<br>FloatBuffer<br>DoubleBuffer</p></blockquote><h3 id="NIO的底层工作原理"><a href="#NIO的底层工作原理" class="headerlink" title="NIO的底层工作原理"></a>NIO的底层工作原理</h3><h3 id="先来了解一下buffer的工作机制："><a href="#先来了解一下buffer的工作机制：" class="headerlink" title="先来了解一下buffer的工作机制："></a>先来了解一下buffer的工作机制：</h3><ul><li>capacity 缓冲区数组的总长度</li><li>position 下一个要操作的数据元素的位置</li><li>limit 缓冲区数组中不可操作的下一个元素的位置，limit&lt;=capacity</li><li>mark 用于记录当前 position 的前一个位置或者默认是 0</li></ul><p>1.这一步其实是当我们刚开始初始化这个buffer数组的时候，开始默认是这样的</p><p>2、但是当你往buffer数组中开始写入的时候几个字节的时候就会变成下面的图，position会移动你数据的结束的下一个位置，这个时候你需要把buffer中的数据写到channel管道中，所以此时我们就需要用这个<code>buffer.flip()</code>方法，</p><p>3、当你调用完2中的方法时，这个时候就会变成下面的图了，这样的话其实就可以知道你刚刚写到buffer中的数据是在position—-&gt;limit之间，然后下一步调用<code>clear（）</code></p><p>4、这时底层操作系统就可以从缓冲区中正确读取这 5 个字节数据发送出去了。在下一次写数据之前我们在调一下 clear() 方法。缓冲区的索引状态又回到初始位置。（其实这一步有点像IO中的把转运字节数组<code>char[] buf = new char[1024]</code>不足1024字节的部分给强制刷新出去的意思）</p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>1、这里还要说明一下 mark，当我们调用<code>mark()</code>时，它将记录当前 position 的前一个位置，当我们调用 reset 时，position 将恢复 mark 记录下来的值</p><p>2.clear()方法会：清空整个缓冲区。position将被设回0，limit被设置成 capacity的值（这个个人的理解就是当你在flip（）方法的基础上已经记住你写入了多少字节数据，直接把position到limit之间的也就是你写入已经记住的数据给“复制”到管道中）</p><p>3.当你把缓冲区的数局写入到管道中的时候，你需要调用flip()方法将Buffer从写模式切换到读模式，调用flip()方法会将position设回0，并将limit设置成之前position的值。buf.flip();（其实我个人理解的就相当于先记住缓冲区缓冲了多少数据）</p><blockquote><p>推荐阅读：<a href="http://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247488064&idx=2&sn=56b6f87cb4e99107737c73f7ed1e5e8e&chksm=eb539776dc241e60f88f7185da4b7fb46bf41f10a66a53898ca672e8942e8b6a8d47ec7d3d3d&scene=21#wechat_redirect" target="_blank" rel="noopener">详解 Java 中 4 种 I/O 模型</a></p></blockquote><h2 id="NIO-工作代码示例"><a href="#NIO-工作代码示例" class="headerlink" title="NIO 工作代码示例"></a>NIO 工作代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selector</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line"><span class="comment">//先给缓冲区申请内存空间  </span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);  </span><br><span class="line">     <span class="comment">//打开Selector为了它可以轮询每个 Channel 的状态  </span></span><br><span class="line">        Selector selector = Selector.open();  </span><br><span class="line">        ServerSocketChannel ssc = ServerSocketChannel.open();  </span><br><span class="line">        ssc.configureBlocking(<span class="keyword">false</span>);<span class="comment">//设置为非阻塞方式  </span></span><br><span class="line">        ssc.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8080</span>));  </span><br><span class="line">        ssc.register(selector, SelectionKey.OP_ACCEPT);<span class="comment">//注册监听的事件  </span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </span><br><span class="line">            Set selectedKeys = selector.selectedKeys();<span class="comment">//取得所有key集合  </span></span><br><span class="line">            Iterator it = selectedKeys.iterator();  </span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;  </span><br><span class="line">                SelectionKey key = (SelectionKey) it.next();  </span><br><span class="line">                <span class="keyword">if</span> ((key.readyOps() &amp; SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT) &#123;  </span><br><span class="line">                    ServerSocketChannel ssChannel = (ServerSocketChannel) key.channel();  </span><br><span class="line">                 SocketChannel sc = ssChannel.accept();<span class="comment">//接受到服务端的请求  </span></span><br><span class="line">                    sc.configureBlocking(<span class="keyword">false</span>);  </span><br><span class="line">                    sc.register(selector, SelectionKey.OP_READ);  </span><br><span class="line">                    it.remove();  </span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>   </span><br><span class="line">                ((key.readyOps() &amp; SelectionKey.OP_READ) == SelectionKey.OP_READ) &#123;  </span><br><span class="line">                    SocketChannel sc = (SocketChannel) key.channel();  </span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </span><br><span class="line">                        buffer.clear();  </span><br><span class="line">                        <span class="keyword">int</span> n = sc.read(buffer);<span class="comment">//读取数据  </span></span><br><span class="line">                        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                        &#125;  </span><br><span class="line">                        buffer.flip();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    it.remove();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过反射获取泛型</title>
      <link href="p/11f6.html"/>
      <url>p/11f6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、通过<code>Field.getGenericType()</code>方法获取到<code>Type</code>类型（该对象中包含了泛型信息）<br> 2、把<code>Field.getGenericType()</code>返回的类型强转成<code>ParameterizedType</code>类型<br> 3、调用<code>ParameterizedType</code>里的<code>Type[]getActualTypeArguments()</code><br> 4、<code>Type[]</code>中就保存了泛型的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generic</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; cache;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class clz = Generic<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Field f = clz.getField(<span class="string">"cache"</span>);</span><br><span class="line">        Class cl = f.getType();<span class="comment">//这个方法获取到了类型，但是不带泛型信息</span></span><br><span class="line">        System.out.println(cl);<span class="comment">//interface java.util.Map,</span></span><br><span class="line">        <span class="comment">//获取泛型信息</span></span><br><span class="line">        Type type = f.getGenericType();</span><br><span class="line">        ParameterizedType pType = (ParameterizedType) type;</span><br><span class="line">        Type[] types = pType.getActualTypeArguments();</span><br><span class="line">        <span class="keyword">for</span> (Type type2 : types) &#123;</span><br><span class="line">            System.out.println(type2);<span class="comment">//class java.lang.String</span></span><br><span class="line">            &#125;                     <span class="comment">//class java.lang.Object   泛型类型</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>replace与replaceAll的区别</title>
      <link href="p/6fad.html"/>
      <url>p/6fad.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这两者有些人很容易搞混，因此我在这里详细讲述下。</p><p>replace的参数是char和CharSequence，即可以支持字符的替换，也支持字符串的替换（CharSequence即字符串序列的意思,说白了也就是字符串）；</p><p>replaceAll的参数是regex，即基于规则表达式的替换，比如：可以通过replaceAll(“\d”, “*”)把一个字符串所有的数字字符都换成星号；</p><p>相同点：都是全部替换，即把源字符串中的某一字符或字符串全部换成指定的字符或字符串；</p><p>不同点：replaceAll支持正则表达式，因此会对参数进行解析（两个参数均是），如replaceAll(“\d”, “*”)，而replace则不会，replace(“\d”,”*”)就是替换”\d”的字符串，而不会解析为正则。</p><p>另外还有一个不同点：“\”在java中是一个转义字符，所以需要用两个代表一个。例如System.out.println( “\“ ) ;只打印出一个”&quot;。但是“\”也是正则表达式中的转义字符，需要用两个代表一个。所以：\\被java转换成\，\又被正则表达式转换成\，因此用replaceAll替换“\”为”\“，就要用replaceAll(“\\“,”\\\\“)，而replace则replace(“\“,”\\“)。</p><p>如果只想替换第一次出现的，可以使用replaceFirst()，这个方法也是基于规则表达式的替换，但与replaceAll()不同的是，只替换第一次出现的字符串。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中Bean的生命周期</title>
      <link href="p/a583.html"/>
      <url>p/a583.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>对于普通的 Java 对象，当我们使用<code>new</code>关键字创建对象的时候，如果它没有任何引用，则其会被垃圾回收机制回收。而由 Spring IoC 容器托管的对象，它们的生命周期则是完全由容器控制。在 Spring 中，每个 Bean 的生命周期大致如下：</p><p><img src="https://img.senup.cn/blog/20200812/gEKOfkQsiemE.png?imageslim" alt="mark"></p><a id="more"></a><h2 id="实例化-Bean"><a href="#实例化-Bean" class="headerlink" title="实例化 Bean"></a>实例化 Bean</h2><p>对于<code>BeanFactory</code>容器来说，当用户向容器请求一个尚未初始化的 Bean 或初始化 Bean 的时候，如果需要注入另一个尚未初始化的依赖，容器就会调用<code>createBean</code>进行实例化；对于<code>ApplicationContext</code>容器来说，当容器启动结束后，便实例化所有的 Bean。</p><p>容器通过获取<code>BeanDefinition</code>对象中的信息进行实例化。并且这一步仅仅是简单的实例化，并未进行依赖注入。 实例化对象被包装在<code>BeanWrapper</code>对象中，<code>BeanWrapper</code>提供了设置对象属性的接口，从而避免了使用反射机制设置属性。</p><h2 id="设置对象属性（依赖注入）"><a href="#设置对象属性（依赖注入）" class="headerlink" title="设置对象属性（依赖注入）"></a>设置对象属性（依赖注入）</h2><p>实例化后的对象被封装在<code>BeanWrapper</code>对象中，并且此时对象仍然是一个原生的状态，并没有进行依赖注入。 紧接着，Spring 根据<code>BeanDefinition</code>中的信息进行依赖注入，并且通过<code>BeanWrapper</code>提供的设置属性的接口完成依赖注入。</p><h2 id="注入-Aware-接口"><a href="#注入-Aware-接口" class="headerlink" title="注入 Aware 接口"></a>注入 Aware 接口</h2><p>紧接着，Spring 会检测该对象是否实现了<code>xxxAware</code>接口，并将相关的<code>xxxAware</code>实例注入给 Bean：</p><ul><li>如果 Bean 实现了<code>BeanNameAware</code>接口，Spring 将 Bean 的 ID 传递给<code>setBeanName()</code>方法。实现<code>BeanNameAware</code>主要是为了通过 Bean 的引用来获得 Bean 的 ID，一般业务中是很少有用到 Bean 的 ID 的。</li><li>如果 Bean 实现了<code>BeanFactoryAware</code>接口，Spring 将调用<code>setBeanDactory(BeanFactory bf)</code>方法并把<code>BeanFactory</code>容器实例作为参数传入。实现<code>BeanFactoryAware</code>主要目的是为了获取 Spring 容器，如 Bean 通过 Spring 容器发布事件等。</li><li>如果 Bean 实现了<code>ApplicationContextAware</code>接口，Spring 容器将调用<code>setApplicationContext(ApplicationContext ctx)</code>方法，把应用上下文作为参数传入，作用与<code>BeanFactory</code>类似都是为了获取 Spring 容器，不同的是 Spring 容器在调用<code>setApplicationContext</code>方法时会把它自己作为<code>setApplicationContext</code>的参数传入，而 Spring 容器在调用<code>setBeanDactory</code>前需要程序员自己指定（注入）<code>setBeanDactory</code>里的参数<code>BeanFactory</code>。</li></ul><h2 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h2><p>当经过上述几个步骤后，Bean 对象已经被正确构造，但如果你想要对象被使用前再进行一些自定义的处理，就可以通过<code>BeanPostProcessor</code>接口实现。 该接口提供了两个函数：</p><ul><li><code>postProcessBeforeInitialzation(Object bean, String beanName)</code>当前正在初始化的 Bean 对象会被传递进来，我们就可以对这个 Bean 作任何处理。这个函数会先于<code>InitialzationBean</code>执行，因此称为前置处理。 所有<code>Aware</code>接口的注入就是在这一步完成的。</li><li><code>postProcessAfterInitialzation(Object bean, String beanName)</code>当前正在初始化的 Bean 对象会被传递进来，我们就可以对这个 Bean 作任何处理。这个函数会在<code>InitialzationBean</code>完成后执行，因此称为后置处理。</li></ul><h2 id="InitializingBean-与-init-method"><a href="#InitializingBean-与-init-method" class="headerlink" title="InitializingBean 与 init-method"></a>InitializingBean 与 init-method</h2><p>当<code>BeanPostProcessor</code>的前置处理完成后就会进入本阶段。 <code>InitializingBean</code>接口只有一个函数：</p><ul><li><code>afterPropertiesSet()</code></li></ul><p>这一阶段也可以在 Bean 正式构造完成前增加我们自定义的逻辑，但它与前置处理不同，由于该函数并不会把当前 Bean 对象传进来，因此在这一步没办法处理对象本身，只能增加一些额外的逻辑。 若要使用它，我们需要让 Bean 实现该接口，并把要增加的逻辑写在该函数中。然后，Spring 会在前置处理完成后检测当前 Bean 是否实现了该接口，并执行<code>afterPropertiesSet</code>函数。</p><p>当然，Spring 为了降低对客户代码的侵入性，给 Bean 的配置提供了<code>init-method</code>属性，该属性指定了在这一阶段需要执行的函数名。Spring 便会在初始化阶段执行我们设置的函数。<code>init-method</code>本质上仍然使用了<code>InitializingBean</code>接口。</p><h2 id="DisposableBean-和-destroy-method"><a href="#DisposableBean-和-destroy-method" class="headerlink" title="DisposableBean 和 destroy-method"></a>DisposableBean 和 destroy-method</h2><p>如果 Bean 实现了<code>DispostbleBean</code>接口，Spring 将调用它的<code>destory</code>方法，作用与在配置文件中对 Bean 使用<code>destory-method</code>属性的作用一样，都是在 Bean 实例销毁前执行的方法。</p><p>至此，Spring 中 Bean 的经历了从创建到消耗的整个生命周期的过程。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="https://blog.csdn.net/qq_35246620/article/details/53509102" target="_blank" rel="noopener">参考</a></h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring依赖注入三种方式的实现</title>
      <link href="p/6d4b.html"/>
      <url>p/6d4b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Spring通过DI（依赖注入）实现IOC（控制反转），常用的注入方式主要有三种：构造方法注入，setter注入，基于注解的注入。</p><a id="more"></a><h3 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h3><p>构造器注入:保证了一些必要的属性在Bean实例化时就设置,并且确保了bean实例在实例化后就可以使用.</p><p>1.在类中,不用为属性设置setter方法,只需提供构造方法即可<br>2.在构造文件中配置该类bean,并配置构造器,在配置构造器中用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//ApplicationContext.xml</span><br><span class="line">&lt;bean id=&quot;action&quot; class=&quot;com.action.UserAction&quot;&gt;</span><br><span class="line">    &lt;constructor-arg index =&quot;0&quot; name=&quot;name&quot; value=&quot;Murphy&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>提供构造方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class UserAction &#123;</span><br><span class="line"> private  String name;</span><br><span class="line">   public UserAction(String name) &#123;</span><br><span class="line">         this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　</p><h3 id="setter注入"><a href="#setter注入" class="headerlink" title="setter注入"></a>setter注入</h3><p>  1.根据property标签的name属性的值去找对应的setter方法.<br>    例如: name= “aa” 对应的就是setAa方法.<br>  2.由于属性注入具有可选性和灵活性高的优点,是实际上最常用的注入方式.<br>  3.属性注入要求bean提供一个默认的构造函数,并为需要注入的属性提供对应的setter方法.spring先调用bean默认的构造函数实例化bean对象,然后通过反射机制的方法调用setter方法注入属性值.<br>  4.还有一点需要注意：如果通过set方法注入属性，那么spring会通过默认的空参构造方法来实例化对象，所以如果在类中写了一个带有参数的构造方法，一定要把空参数的构造方法写上，否则spring没有办法实例化对象，导致报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> //ApplicationContext.xml</span><br><span class="line">&lt;bean id=&quot;action&quot; class=&quot;com.action.UserAction&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;name&quot; value=&quot;Murphy&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>提供setting方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class UserAction &#123;</span><br><span class="line">      private String name;</span><br><span class="line">   public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;   </span><br><span class="line">   public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>　　</p><h3 id="注解注入"><a href="#注解注入" class="headerlink" title="注解注入"></a>注解注入</h3><p> @Autowired（构造，接口，方法）<br>自动装配，默认根据类型注入<br>—属性Required</p><p>   1.@Autowired(required=true)：当使用@Autowired注解的时候，其实默认就是@Autowired(required=true)，表示注入的时候，该bean必须存在，否则就会注入失败<br>   2.@Autowired(required=false)：表示忽略当前要注入的bean，如果有直接注入，没有跳过，不会报错。<br>   3.required属性含义和@Required一样，只是@Required只适用于基于XML配置的setter注入方式,只能打在setting方法上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class AutowiredAction &#123;</span><br><span class="line"></span><br><span class="line">private String name;</span><br><span class="line">private List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private AutowiredAction(String name) &#123;</span><br><span class="line">this.name=name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Autowired(required = true)</span><br><span class="line">private void initName(String name,List&lt;String&gt; list) &#123;</span><br><span class="line">this.name = name;  </span><br><span class="line">        this.list = list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface AutowiredIn &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line"> void initName(String name,Integer age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　@Resource 默认按照名称装配<br>   可以标注在字段或属性的setter方法上。默认按照字段的名称去Spring容器中找依赖对象，如果没有找到，退回到按照类型查找<br>   如果配置了属性name<br>   那么只能按照名称找依赖对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class ResourceAction &#123;</span><br><span class="line"></span><br><span class="line">@Resource(name=&quot;name&quot;)</span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">@Resource</span><br><span class="line">private List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">@Resource</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public List&lt;String&gt; getList() &#123;</span><br><span class="line">return list;</span><br><span class="line">&#125;</span><br><span class="line">public void setList(List&lt;String&gt; list) &#123;</span><br><span class="line">this.list = list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static能不能被重写？</title>
      <link href="p/4ecd.html"/>
      <url>p/4ecd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>重写方法的目的是为了多态，或者说：重写是实现多态的前提，即重写是发生在继承中且是针对非static方法的。<br>语法上子类允许出现和父类只有方法体不一样其他都一模一样的static方法，但是在父类引用指向子类对象时，通过父类引用调用的依然是父类的static方法，而不是子类的static方法。<br>即：重写是为了多态，而语法上static支持重写，但是运行效果上达不到多态目的。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个空的Object占多大内存空间？</title>
      <link href="p/b2cd.html"/>
      <url>p/b2cd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>Object obj = new Object()</code>申请出来的obj对象占用16个字节：8字节的markword，4字节的klass指针，没有instance data，加起来12字节，所以还有4字节的padding。如果不开启指针压缩，klass指针就是8个字节，该对象也是16个字节。</p><img src="https://img.senup.cn/blog/20200808/FQVKeuSLjduE.png?imageslim" alt="mark"><img src="https://img.senup.cn/blog/20200808/EodVtL5noLwV.png?imageslim" alt="mark" style="zoom:80%;"><a id="more"></a><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><p><code>Object obj = new Object();</code> 是我们都会写的Java代码，但是你知道它执行之后，在不考虑对象引用所占空间的情况下，这个obj对象占用了多少内存空间吗？</p><p>这其实是一个面试必问的问题，与之类似的问题是“一个Java对象由几部分组成？”。答案是16字节，4或5个部分。那为什么是16字节呢？要回答这个问题，就要先搞清楚Java对象的结构。</p><p>一个Java对象由4部分组成，分别是<code>markword</code>（对象运行时的数据），<code>klass指针</code>（指向该类的元数据，用来说明这个对象属于哪个类），<code>instance data</code>（对象的各种字段内容），<code>padding</code>（占位符），数组还要多一个组成部分是<code>数组长度</code>。其中markword和klass指针，还有数组长度合称对象头。在64位JVM开启指针压缩的情况下，markword占8字节，klass指针占4字节，数组长度占8字节，由于JVM规定对象的起始地址必须是8字节的整数倍，所以padding起占位符的作用，将对象的长度填充到8字节的整数倍，是可以有也可以没有的。</p><p><strong>综上所述，Object obj = new Object()申请出来的obj对象占用16个字节：8字节的markword，4字节的klass指针，没有instance data，加起来12字节，所以还有4字节的padding。如果不开启指针压缩，klass指针就是8个字节，该对象也是16个字节。</strong></p><p>图1是Java对象的结构图，图2是数组的结构图，两者的不同在于数组多一个长度为8位的数组长度属性。</p><p>注：静态属性不计算在对象大小中。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p>作者：<strong>江文</strong><br>链接：<a href="https://www.jianshu.com/p/a2bd6e22892f" target="_blank" rel="noopener">https://www.jianshu.com/p/a2bd6e22892f</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的栈，堆，代码，静态存储区的存储顺序和位置</title>
      <link href="p/59e0.html"/>
      <url>p/59e0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JAVA的JVM的内存可分为3个区：堆(heap)、栈(stack)和方法区(method)也叫静态存储区。<br><img src="https://img.senup.cn/blog/20200808/YGfpLMQxske1.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200808/H9gBKkstbWBG.png?imageslim" alt="mark"></p><h2 id="堆区"><a href="#堆区" class="headerlink" title="堆区:"></a>堆区:</h2><p>1.存储的全部是对象，每个对象都包含一个与之对应的class的信息。(class的目的是得到操作指令)<br>2.jvm只有一个堆区(heap)被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本身</p><h2 id="栈区"><a href="#栈区" class="headerlink" title="栈区:"></a>栈区:</h2><p>1.每个线程包含一个栈区，栈中只保存基础数据类型的对象和自定义对象的引用(不是对象)，对象都存放在堆区中<br>2.每个栈中的数据(原始类型和对象引用)都是私有的，其他栈不能访问。<br>3.栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区:"></a>方法区:</h2><p>1.又叫静态区，跟堆一样，被所有的线程共享。方法区包含所有的class和static变量。<br>2.方法区中包含的都是在整个程序中永远唯一的元素，如class，static变量。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么用元空间替换永久代？</title>
      <link href="p/624b.html"/>
      <url>p/624b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在之前的版本中，字符串常量池存在于永久代中，在大量使用字符串的情况下，非常容易出现OOM的异常。此外，J<strong>VM加载的class的总数，方法的大小</strong>等都很难确定，因此对永久代大小的指定难以确定。太小的永久代容易导致永久代内存溢出，太大的永久代则容易导致虚拟机内存紧张。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的锁分类</title>
      <link href="p/8ead.html"/>
      <url>p/8ead.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。而我们在实际运用前，也需要对各种锁的分类要理解清楚，这样才能在项目中正确的使用锁。</p><p><img src="https://img.senup.cn/blog/20200808/zYb7Q612PzSt.png?imageslim" alt="mark"></p><a id="more"></a><h2 id="乐观锁-悲观锁"><a href="#乐观锁-悲观锁" class="headerlink" title="乐观锁/悲观锁"></a>乐观锁/悲观锁</h2><ul><li>乐观锁和悲观锁只是一种概念，并不是锁的具体实现，两者主要区别主要是看待线程同步的不同角度。</li><li>从概念上说，对同一个共享数据而言，悲观锁总是认为自己在使用数据的时候一定会有其它线程来竞争（主要是指修改数据），所以在获取这个共享数据的时候悲观锁会先加锁，确保这个数据不会被其它线程竞争而修改。在Java中，<code>synchronized</code>和<code>Lock</code>的实现类都属于悲观锁。</li><li>而乐观锁则恰好相反，乐观锁在使用共享数据的时候，总是认为其它线程不会来跟自己竞争（修改数据），所以不会先对数据加锁，而是在更新数据的时候去尝试判断有没有其它线程修改了数据，如果这个数据没有被其它线程修改，那么当前线程修改数据成功，否则当前线程修改失败，然后根据具体实现方式执行不同的操作（例如报错或者自旋等待重试等）。Java中乐观锁采用的最多的就是<code>CAS</code>（Compare And Swap）算法。</li><li>简而言之，悲观锁就是一定要先加锁再执行操作，乐观锁是先执行操作，如果失败了再采取一定的补救措施。</li></ul><p><img src="https://img.senup.cn/blog/20200808/CRpR6zlm7q62.png?imageslim" alt="mark"></p><p><strong>那么两者可以分别运用在什么场景呢？</strong></p><p>根据从上面的概念我们可以发现：</p><ul><li>悲观锁适合<strong>写操作多</strong>的场景，先加锁可以保证写操作时数据正确。</li><li>乐观锁适合<strong>读操作多</strong>的场景，不加锁的特点能够使其读操作的性能大幅提升。</li></ul><p>光说概念有些抽象，我们来看下乐观锁和悲观锁的调用方式示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------------------------- 悲观锁的调用方式 -------------------------</span></span><br><span class="line"><span class="comment">// synchronized</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 操作同步资源</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ReentrantLock</span></span><br><span class="line"><span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">// 需要保证多个线程使用的是同一个锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyPublicResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="comment">// 操作同步资源</span></span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------- 乐观锁的调用方式 -------------------------</span></span><br><span class="line"><span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();  <span class="comment">// 需要保证多个线程使用的是同一个AtomicInteger</span></span><br><span class="line">atomicInteger.incrementAndGet(); <span class="comment">//执行自增1</span></span><br></pre></td></tr></table></figure><p>通过调用方式示例，我们可以发现悲观锁基本都是在显式的锁定之后再操作同步资源，而乐观锁则直接去操作同步资源。那么，为何乐观锁能够做到不锁定同步资源也可以正确的实现线程同步呢？我们通过介绍乐观锁的主要实现方式 <code>CAS</code>的技术原理来解惑。</p><p><code>CAS</code>全称 <code>Compare And Swap</code>（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。<code>java.util.concurrent</code>包中的原子类就是通过<code>CAS</code>来实现了乐观锁。</p><p>CAS算法涉及到三个操作数：</p><ul><li>需要读写的内存值 V</li><li>进行比较的值 A</li><li>要写入的新值 B</li></ul><p>当且仅当 <code>V</code> 的值等于 <code>A</code> 时，<code>CAS</code>通过原子方式用新值B来更新V的值（“比较+更新”整体是一个原子操作），否则不会执行任何操作。一般情况下，“更新”是一个不断重试的操作。</p><p>之前提到<code>java.util.concurrent</code>包中的原子类，就是通过<code>CAS</code>来实现了乐观锁，那么我们进入原子类<code>AtomicInteger</code>的源码，看一下<code>AtomicInteger</code>的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6214790243416807050L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField("value"));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br></pre></td></tr></table></figure><p>根据定义我们可以看出各属性的作用：</p><ul><li><code>unsafe</code>： 获取并操作内存的数据</li><li><code>valueOffset</code>： 存储<code>value</code>在<code>AtomicInteger</code>中的偏移量</li><li><code>value</code>： 存储<code>AtomicInteger</code>的<code>int</code>值，该属性需要借助<code>volatile</code>关键字保证其在线程间是可见的</li></ul><p>接下来，我们查看<code>AtomicInteger</code>的自增函数<code>incrementAndGet()</code>的源码时，发现自增函数底层调用的是<code>unsafe.getAndAddInt()</code>。但是由于<code>JDK</code>本身只有<code>Unsafe.class</code>，只通过<code>class</code>文件中的参数名，并不能很好的了解方法的作用，所以我们通过<code>OpenJDK 8</code> 来查看<code>Unsafe</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------------------------- JDK 8 -------------------------</span></span><br><span class="line"><span class="comment">// AtomicInteger 自增方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unsafe.class</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> var5;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">      var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">  &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">  <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------- OpenJDK 8 -------------------------</span></span><br><span class="line"><span class="comment">// Unsafe.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> v;</span><br><span class="line">   <span class="keyword">do</span> &#123;</span><br><span class="line">       v = getIntVolatile(o, offset);</span><br><span class="line">   &#125; <span class="keyword">while</span> (!compareAndSwapInt(o, offset, v, v + delta));</span><br><span class="line">   <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据<code>OpenJDK 8</code>的源码我们可以看出，<code>getAndAddInt()</code>循环获取给定对象<code>o</code>中的偏移量处的值<code>v</code>，然后判断内存值是否等于<code>v</code>。如果相等则将内存值设置为 <code>v + delta</code>，否则返回<code>false</code>，继续循环进行重试，直到设置成功才能退出循环，并且将旧值返回。整个“比较+更新”操作封装在<code>compareAndSwapInt()</code>中，在<code>JNI</code>里是借助于一个CPU指令完成的，属于原子操作，可以保证多个线程都能够看到同一个变量的修改值。</p><p>后续<code>JDK</code>通过CPU的<code>cmpxchg</code>指令，去比较寄存器中的 <code>A</code> 和 内存中的值 <code>V</code>。如果相等，就把要写入的新值 <code>B</code> 存入内存中。如果不相等，就将内存值 <code>V</code> 赋值给寄存器中的值 <code>A</code>。然后通过<code>Java</code>代码中的<code>while</code>循环再次调用<code>cmpxchg</code>指令进行重试，直到设置成功为止。</p><p><code>CAS</code>虽然很高效，但是它也存在三大问题，这里也简单说一下：</p><ol><li><code>ABA</code>问题。<code>CAS</code>需要在操作值的时候检查内存值是否发生变化，没有发生变化才会更新内存值。但是如果内存值原来是A，后来变成了B，然后又变成了A，那么<code>CAS</code>进行检查时会发现值没有发生变化，但是实际上是有变化的。ABA问题的解决思路就是在变量前面添加版本号，每次变量更新的时候都把版本号加1，这样变化过程就从“A－B－A”变成了“1A－2B－3A”。从<code>JDK1.5</code>开始提供了<code>AtomicStampedReference</code>类来解决ABA问题，具体操作封装在<code>compareAndSet()</code>中。<code>compareAndSet()</code>首先检查当前引用和当前标志与预期引用和预期标志是否相等，如果都相等，则以原子方式将引用值和标志的值设置为给定的更新值。</li><li>循环时间长开销大。<code>CAS</code>操作如果长时间不成功，会导致其一直自旋，给CPU带来非常大的开销。</li><li>只能保证一个共享变量的原子操作。对一个共享变量执行操作时，<code>CAS</code>能够保证原子操作，但是对多个共享变量操作时，<code>CAS</code>是无法保证操作的原子性的。<code>JDK1.5</code>开始提供了<code>AtomicReference</code>类来保证引用对象之间的原子性，可以把多个变量放在一个对象里来进行<code>CAS</code>操作。</li></ol><h2 id="自旋锁-适应性自旋锁"><a href="#自旋锁-适应性自旋锁" class="headerlink" title="自旋锁/适应性自旋锁"></a>自旋锁/适应性自旋锁</h2><p>在介绍自旋锁前，需要介绍一些前提知识来帮助大家明白自旋锁的概念。</p><p>阻塞或唤醒一个<code>Java</code>线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p><p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p><p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</p><p><img src="https://img.senup.cn/blog/20200808/2nz503MXwHfk.png?imageslim" alt="mark"></p><p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用<code>-XX:PreBlockSpin</code>来更改）没有成功获得锁，就应当挂起线程。</p><p>自旋锁的实现原理同样也是<code>CAS</code>，<code>AtomicInteger</code>中调用<code>unsafe</code>进行自增操作的源码中的<code>do-while</code>循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> var5;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">      var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">  &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">  <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JDK1.4.2</code>中引入，使用<code>-XX:+UseSpinning</code>来开启。<code>JDK1.6</code>中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。</p><p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p><p>在自旋锁中 另有三种常见的锁形式:<code>TicketLock</code>、<code>CLHlock</code>和<code>MCSlock</code>，可以自行Google查阅相关资料介绍。</p><h2 id="无锁-偏向锁-轻量级锁-重量级锁"><a href="#无锁-偏向锁-轻量级锁-重量级锁" class="headerlink" title="无锁/偏向锁/轻量级锁/重量级锁"></a>无锁/偏向锁/轻量级锁/重量级锁</h2><p>这四种锁状态放在一起的原因是它们都是专门针对<code>synchronized</code>所做出的优化。在介绍这四种锁状态之前还需要介绍一些额外的知识。<br>首先为什么<code>synchronized</code>能实现线程同步？</p><p>在回答这个问题之前我们需要了解两个重要的概念：</p><ul><li>Java对象头</li><li>Monitor</li></ul><h3 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h3><p><code>synchronized</code>是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在Java对象头里的，而Java对象头又是什么呢？<br>我们以<code>Hotspot</code>虚拟机为例，<code>Hotspot</code>的对象头主要包括两部分数据：<code>Mark Word</code>（标记字段）、<code>Klass Pointer</code>（类型指针）。</p><p><strong>Mark Word</strong>：默认存储对象的<code>HashCode</code>、分代年龄以及锁标志位信息。这些信息都是与对象自身定义无关的数据，所以<code>Mark Word</code>被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间<code>Mark Word</code>里存储的数据会随着锁标志位的变化而变化。<br><strong>Klass Point</strong>：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h3><p><code>Monitor</code>可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者<code>Monitor</code>锁。</p><p><code>Monitor</code>是线程私有的数据结构，每一个线程都有一个可用<code>monitor record</code>列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个<code>monitor</code>关联，同时<code>monitor</code>中有一个<code>Owner</code>字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。</p><p>现在话题回到<code>synchronized</code>，<code>synchronized</code>通过<code>Monitor</code>来实现线程同步，<code>Monitor</code>是依赖于底层的操作系统的<code>Mutex Lock</code>（互斥锁）来实现的线程同步。</p><p>如同我们在自旋锁中提到的“阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长”。这种方式就是<code>synchronized</code>最初实现同步的方式，这就是<code>JDK1.6</code>之前<code>synchronized</code>效率低的原因。这种依赖于操作系统<code>Mutex Lock</code>所实现的锁我们称之为“重量级锁”，<code>JDK1.6</code>中为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。</p><p>所以目前锁一共有4种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。锁状态只能升级不能降级。</p><p>通过上面的介绍，我们对<code>synchronized</code>的加锁机制以及相关知识有了一个了解，那么下面我们给出四种锁状态对应的的<code>Mark Word</code>内容，然后再分别讲解四种锁状态的思路以及特点：</p><table><thead><tr><th>锁状态</th><th>存储内容</th><th>2位(bit)表示</th></tr></thead><tbody><tr><td>无锁</td><td>对象的hashCode、对象分代年龄、是否是偏向锁（0）</td><td>01</td></tr><tr><td>偏向锁</td><td>偏向线程ID、偏向时间戳、对象分代年龄、是否是偏向锁（1）</td><td>01</td></tr><tr><td>轻量级锁</td><td>指向栈中锁记录的指针</td><td>00</td></tr><tr><td>重量级锁</td><td>指向互斥量（重量级锁）的指针</td><td>10</td></tr></tbody></table><h3 id="无锁"><a href="#无锁" class="headerlink" title="无锁"></a>无锁</h3><p>无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</p><p>无锁的特点就是修改操作在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。上面我们介绍的CAS原理及应用即是无锁的实现。无锁无法全面代替有锁，但无锁在某些场合下的性能是非常高的。</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</p><p>在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。</p><p>当一个线程访问同步代码块并获取锁时，会在<code>Mark Word</code>里存储锁偏向的线程ID。在线程进入和退出同步块时不再通过<code>CAS</code>操作来加锁和解锁，而是检测<code>Mark Word</code>里是否存储着指向当前线程的偏向锁。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次<code>CAS</code>原子指令，而偏向锁只需要在置换<code>ThreadID</code>的时候依赖一次<code>CAS</code>原子指令即可。</p><p>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态。撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。</p><p>偏向锁在<code>JDK1.6</code>及以后的<code>JVM</code>里是默认启用的。可以通过<code>JVM</code>参数关闭偏向锁：<code>-XX:-UseBiasedLocking=false</code>，关闭之后程序默认会进入轻量级锁状态。</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</p><p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（<code>Lock Record</code>）的空间，用于存储锁对象目前的<code>Mark Word</code>的拷贝，然后拷贝对象头中的<code>Mark Word</code>复制到锁记录中。</p><p>拷贝成功后，虚拟机将使用<code>CAS</code>操作尝试将对象的<code>Mark Word</code>更新为指向<code>Lock Record</code>的指针，并将<code>Lock Record</code>里的<code>owner</code>指针指向对象的<code>Mark Word</code>。</p><p>如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象<code>Mark Word</code>的锁标志位设置为“00”，表示此对象处于轻量级锁定状态。</p><p>如果轻量级锁的更新操作失败了，虚拟机首先会检查对象的<code>Mark Word</code>是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明多个线程竞争锁。</p><p>若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。</p><h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3><p>升级为重量级锁时，锁标志的状态值变为“10”，此时<code>Mark Word</code>中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。</p><p>整体的锁状态升级流程如下：</p><p><img src="https://img.senup.cn/blog/20200808/74Gl8fNWBuTP.png?imageslim" alt="mark"></p><p>综上，偏向锁通过对比<code>Mark Word</code>解决加锁问题，避免执行<code>CAS</code>操作。而轻量级锁是通过用<code>CAS</code>操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。</p><h2 id="公平锁-非公平锁"><a href="#公平锁-非公平锁" class="headerlink" title="公平锁/非公平锁"></a>公平锁/非公平锁</h2><p>公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</p><p>非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p><p>直接用语言描述可能有点抽象，这里作者用从别处看到的一个例子来讲述一下公平锁和非公平锁。</p><p><img src="https://img.senup.cn/blog/20200808/JWP19It0MLXF.png?imageslim" alt="mark"></p><p>如上图所示，假设有一口水井，有管理员看守，管理员有一把锁，只有拿到锁的人才能够打水，打完水要把锁还给管理员。每个过来打水的人都要管理员的允许并拿到锁之后才能去打水，如果前面有人正在打水，那么这个想要打水的人就必须排队。管理员会查看下一个要去打水的人是不是队伍里排最前面的人，如果是的话，才会给你锁让你去打水；如果你不是排第一的人，就必须去队尾排队，这就是公平锁。</p><p>但是对于非公平锁，管理员对打水的人没有要求。即使等待队伍里有排队等待的人，但如果在上一个人刚打完水把锁还给管理员而且管理员还没有允许等待队伍里下一个人去打水时，刚好来了一个插队的人，这个插队的人是可以直接从管理员那里拿到锁去打水，不需要排队，原本排队等待的人只能继续等待。如下图所示：</p><p><img src="https://img.senup.cn/blog/20200808/QvjUUNjgLuTG.png?imageslim" alt="mark"></p><p>接下来我们通过<code>ReentrantLock</code>的源码来讲解公平锁和非公平锁。</p><p><img src="https://blogimage-1258928558.cos.ap-guangzhou.myqcloud.com/java-lock/6edea205.png" alt="img"></p><p>根据代码可知，<code>ReentrantLock</code>里面有一个内部类<code>Sync</code>，<code>Sync</code>继承<code>AQS</code>（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在<code>Sync</code>中实现的。它有公平锁<code>FairSync</code>和非公平锁<code>NonfairSync</code>两个子类。<code>ReentrantLock</code>默认使用非公平锁，也可以通过构造器来显示的指定使用公平锁。</p><p>下面我们来看一下公平锁与非公平锁的加锁方法的源码:</p><p><img src="https://blogimage-1258928558.cos.ap-guangzhou.myqcloud.com/java-lock/bc6fe583.png" alt="img"></p><p>通过上图中的源代码对比，我们可以明显的看出公平锁与非公平锁的<code>lock()</code>方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件：<code>hasQueuedPredecessors()</code>。</p><p><img src="https://blogimage-1258928558.cos.ap-guangzhou.myqcloud.com/java-lock/bd0036bb.png" alt="img"></p><p>再进入<code>hasQueuedPredecessors()</code>，可以看到该方法主要做一件事情：主要是判断当前线程是否位于同步队列中的第一个。如果是则返回<code>true</code>，否则返回<code>false</code>。</p><p>综上，公平锁就是通过同步队列来实现多个线程按照申请锁的顺序来获取锁，从而实现公平的特性。非公平锁加锁时不考虑排队等待问题，直接尝试获取锁，所以存在后申请却先获得锁的情况。</p><h2 id="可重入锁-不可重入锁"><a href="#可重入锁-不可重入锁" class="headerlink" title="可重入锁/不可重入锁"></a>可重入锁/不可重入锁</h2><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。<code>Java</code>中<code>ReentrantLock</code>和<code>synchronized</code>都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。下面用示例代码来进行分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法1执行..."</span>);</span><br><span class="line">        doOthers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doOthers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法2执行..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，类中的两个方法都是被内置锁<code>synchronized</code>修饰的，<code>doSomething()</code>方法中调用<code>doOthers()</code>方法。因为内置锁是可重入的，所以同一个线程在调用<code>doOthers()</code>时可以直接获得当前对象的锁，进入<code>doOthers()</code>进行操作。</p><p>如果是一个不可重入锁，那么当前线程在调用<code>doOthers()</code>之前需要将执行<code>doSomething()</code>时获取当前对象的锁释放掉，实际上该对象锁已被当前线程所持有，且无法释放。所以此时会出现死锁。</p><p>而为什么可重入锁就可以在嵌套调用时可以自动获得锁呢？我们通过图示和源码来分别解析一下。</p><p>还是打水的例子，有多个人在排队打水，此时管理员允许锁和同一个人的多个水桶绑定。这个人用多个水桶打水时，第一个水桶和锁绑定并打完水之后，第二个水桶也可以直接和锁绑定并开始打水，所有的水桶都打完水之后打水人才会将锁还给管理员。这个人的所有打水流程都能够成功执行，后续等待的人也能够打到水。这就是可重入锁。</p><p><img src="https://blogimage-1258928558.cos.ap-guangzhou.myqcloud.com/java-lock/58fc5bc9.png" alt="img"></p><p>但如果是非可重入锁的话，此时管理员只允许锁和同一个人的一个水桶绑定。第一个水桶和锁绑定打完水之后并不会释放锁，导致第二个水桶不能和锁绑定也无法打水。当前线程出现死锁，整个等待队列中的所有线程都无法被唤醒。</p><p><img src="https://blogimage-1258928558.cos.ap-guangzhou.myqcloud.com/java-lock/ea597a0c.png" alt="img"></p><p>之前我们说过<code>ReentrantLock</code>和<code>synchronized</code>都是重入锁，那么我们通过重入锁<code>ReentrantLock</code>以及非可重入锁<code>NonReentrantLock</code>的源码来对比分析一下为什么非可重入锁在重复调用同步资源时会出现死锁。</p><p>首先<code>ReentrantLock</code>和<code>NonReentrantLock</code>都继承父类<code>AQS</code>，其父类<code>AQS</code>中维护了一个同步状态<code>status</code>来计数重入次数，<code>status</code>初始值为0。</p><p>当线程尝试获取锁时，可重入锁先尝试获取并更新<code>status</code>值，如果<code>status == 0</code>表示没有其他线程在执行同步代码，则把<code>status</code>置为1，当前线程开始执行。如果<code>status != 0</code>，则判断当前线程是否是获取到这个锁的线程，如果是的话执行<code>status+1</code>，且当前线程可以再次获取锁。而非可重入锁是直接去获取并尝试更新当前<code>status</code>的值，如果<code>status != 0</code>的话会导致其获取锁失败，当前线程阻塞。</p><p>释放锁时，可重入锁同样先获取当前<code>status</code>的值，在当前线程是持有锁的线程的前提下。如果<code>status-1 == 0</code>，则表示当前线程所有重复获取锁的操作都已经执行完毕，然后该线程才会真正释放锁。而非可重入锁则是在确定当前线程是持有锁的线程之后，直接将<code>status</code>置为0，将锁释放。</p><p><img src="https://blogimage-1258928558.cos.ap-guangzhou.myqcloud.com/java-lock/32536e7a.png" alt="img"></p><h2 id="独享锁-共享锁"><a href="#独享锁-共享锁" class="headerlink" title="独享锁/共享锁"></a>独享锁/共享锁</h2><p>独享锁和共享锁同样是一种概念。我们先介绍一下具体的概念，然后通过<code>ReentrantLock</code>和<code>ReentrantReadWriteLock</code>的源码来介绍独享锁和共享锁。</p><p>独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。<code>JDK</code>中的<code>synchronized</code>和<code>JUC</code>中<code>Lock</code>的实现类就是互斥锁。</p><p>共享锁是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</p><p>独享锁与共享锁也是通过<code>AQS</code>来实现的，通过实现不同的方法，来实现独享或者共享。</p><p>下图为<code>ReentrantReadWriteLock</code>的部分源码：</p><p><img src="https://blogimage-1258928558.cos.ap-guangzhou.myqcloud.com/java-lock/762a042b.png" alt="img"></p><p>我们看到<code>ReentrantReadWriteLock</code>有两把锁：<code>ReadLock</code>和<code>WriteLock</code>，由词知意，一个读锁一个写锁，合称“读写锁”。再进一步观察可以发现<code>ReadLock</code>和<code>WriteLock</code>是靠内部类<code>Sync</code>实现的锁。<code>Sync</code>是<code>AQS</code>的一个子类，这种结构在<code>CountDownLatch</code>、<code>ReentrantLock</code>、<code>Semaphore</code>里面也都存在。</p><p>在<code>ReentrantReadWriteLock</code>里面，读锁和写锁的锁主体都是<code>Sync</code>，但读锁和写锁的加锁方式不一样。读锁是共享锁，写锁是独享锁。读锁的共享锁可保证并发读非常高效，而读写、写读、写写的过程互斥，因为读锁和写锁是分离的。所以<code>ReentrantReadWriteLock</code>的并发性相比一般的互斥锁有了很大提升。</p><p>那读锁和写锁的具体加锁方式有什么区别呢？在了解源码之前我们需要回顾一下其他知识。 在最开始提及<code>AQS</code>的时候我们也提到了<code>state</code>字段（int类型，32位），该字段用来描述有多少线程获持有锁。</p><p>在独享锁中这个值通常是0或者1（如果是重入锁的话state值就是重入的次数），在共享锁中<code>state</code>就是持有锁的数量。但是在<code>ReentrantReadWriteLock</code>中有读、写两把锁，所以需要在一个整型变量<code>state</code>上分别描述读锁和写锁的数量（或者也可以叫状态）。于是将<code>state</code>变量“按位切割”切分成了两个部分，高16位表示读锁状态（读锁个数），低16位表示写锁状态（写锁个数）。如下图所示：</p><p><img src="https://blogimage-1258928558.cos.ap-guangzhou.myqcloud.com/java-lock/8793e00a.png" alt="img"></p><p>了解了概念之后我们再来看代码，先看写锁的加锁源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">Thread current = Thread.currentThread();</span><br><span class="line"><span class="keyword">int</span> c = getState(); <span class="comment">// 取到当前锁的个数</span></span><br><span class="line"><span class="keyword">int</span> w = exclusiveCount(c); <span class="comment">// 取写锁的个数w</span></span><br><span class="line"><span class="keyword">if</span> (c != <span class="number">0</span>) &#123; <span class="comment">// 如果已经有线程持有了锁(c!=0)</span></span><br><span class="line">    <span class="comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span><br><span class="line"><span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread()) <span class="comment">// 如果写线程数（w）为0（换言之存在读锁） 或者持有锁的线程不是当前线程就返回失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)    <span class="comment">// 如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line"><span class="comment">// Reentrant acquire</span></span><br><span class="line">    setState(c + acquires);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (writerShouldBlock() || !compareAndSetState(c, c + acquires)) <span class="comment">// 如果当且写线程数为0，并且当前线程需要阻塞那么就返回失败；或者如果通过CAS增加写线程数失败也返回失败。</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">setExclusiveOwnerThread(current); <span class="comment">// 如果c=0，w=0或者c&gt;0，w&gt;0（重入），则设置当前线程或锁的拥有者</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这段代码首先取到当前锁的个数c，然后再通过c来获取写锁的个数w。因为写锁是低16位，所以取低16位的最大值与当前的c做与运算（ int w = exclusiveCount©; ），高16位和0与运算后是0，剩下的就是低位运算的值，同时也是持有写锁的线程数目。</li><li>在取到写锁线程的数目后，首先判断是否已经有线程持有了锁。如果已经有线程持有了锁(c!=0)，则查看当前写锁线程的数目，如果写线程数为0（即此时存在读锁）或者持有锁的线程不是当前线程就返回失败（涉及到公平锁和非公平锁的实现）。</li><li>如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。</li><li>如果当且写线程数为0（那么读线程也应该为0，因为上面已经处理c!=0的情况），并且当前线程需要阻塞那么就返回失败；如果通过CAS增加写线程数失败也返回失败。</li><li>如果c=0,w=0或者c&gt;0,w&gt;0（重入），则设置当前线程或锁的拥有者，返回成功！</li></ul><p><code>tryAcquire()</code>除了重入条件（当前线程为获取了写锁的线程）之外，增加了一个读锁是否存在的判断。如果存在读锁，则写锁不能被获取，原因在于：必须确保写锁的操作对读锁可见，如果允许读锁在已被获取的情况下对写锁的获取，那么正在运行的其他读线程就无法感知到当前写线程的操作。</p><p>因此，只有等待其他读线程都释放了读锁，写锁才能被当前线程获取，而写锁一旦被获取，则其他读写线程的后续访问均被阻塞。写锁的释放与<code>ReentrantLock</code>的释放过程基本类似，每次释放均减少写状态，当写状态为0时表示写锁已被释放，然后等待的读写线程才能够继续访问读写锁，同时前次写线程的修改对后续的读写线程可见。</p><p>接着是读锁的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">    Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">        getExclusiveOwnerThread() != current)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;                                   <span class="comment">// 如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态</span></span><br><span class="line">    <span class="keyword">int</span> r = sharedCount(c);</span><br><span class="line">    <span class="keyword">if</span> (!readerShouldBlock() &amp;&amp;</span><br><span class="line">        r &lt; MAX_COUNT &amp;&amp;</span><br><span class="line">        compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">            firstReader = current;</span><br><span class="line">            firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">            firstReaderHoldCount++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            HoldCounter rh = cachedHoldCounter;</span><br><span class="line">            <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                readHolds.set(rh);</span><br><span class="line">            rh.count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fullTryAcquireShared(current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在<code>tryAcquireShared(int unused)</code>方法中，如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态。如果当前线程获取了写锁或者写锁未被获取，则当前线程（线程安全，依靠<code>CAS</code>保证）增加读状态，成功获取读锁。读锁的每次释放（线程安全的，可能有多个读线程同时释放读锁）均减少读状态，减少的值是<code>1&lt;&lt;16</code>。所以读写锁才能实现读读的过程共享，而读写、写读、写写的过程互斥。</p><p>此时，我们再回头看一下互斥锁<code>ReentrantLock</code>中公平锁和非公平锁的加锁源码：</p><p><img src="https://blogimage-1258928558.cos.ap-guangzhou.myqcloud.com/java-lock/8b7878ec.png" alt="img"></p><p>我们发现在<code>ReentrantLock</code>虽然有公平锁和非公平锁两种，但是它们添加的都是独享锁。根据源码所示，当某一个线程调用<code>lock</code>方法获取锁时，如果同步资源没有被其他线程锁住，那么当前线程在使用<code>CAS</code>更新<code>state</code>成功后就会成功抢占该资源。而如果公共资源被占用且不是被当前线程占用，那么就会加锁失败。所以可以确定<code>ReentrantLock</code>无论读操作还是写操作，添加的锁都是都是独享锁。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis中$和#的区别及应用场景</title>
      <link href="p/1b99.html"/>
      <url>p/1b99.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img.senup.cn/blog/20200807/kzzwWYoLjAQG.png?imageslim" alt="mark"></p><a id="more"></a><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="预编译"><a href="#预编译" class="headerlink" title="#:预编译"></a>#:预编译</h2><p>解析为一个JDBC预编译语句（prepared statement）的参数标记符，把参数部分用占位符<code>？</code>代替。动态解析为：</p><p><code>select * from t_user where username = ？ ;</code></p><p>而传入的参数将会经过PreparedStatement方法的强制类型检查和安全检查等处理，最后作为一个合法的字符串传入。</p><h2 id="简单替换"><a href="#简单替换" class="headerlink" title="$:简单替换"></a>$:简单替换</h2><p>在动态SQL解析阶段将会进行变量替换，假如传递的参数为Alice，最终处理结果如下：</p><p><code>select * from t_user where username = &#39;Alice&#39; ;</code></p><p>这样在预编译之前的sql语句已经不包含变量了，因此可以看出${} 变量的替换阶段是在动态SQL解析阶段。</p><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><h2 id="是否预防SQL注入"><a href="#是否预防SQL注入" class="headerlink" title="是否预防SQL注入*"></a>是否预防SQL注入*</h2><p>以上不同的处理方式可以看出，<strong>#{}预处理之后可以预防SQL注入；而${}在预编译之前就已经被替换，有被注入的风险</strong>，如下例：</p><p>如果传入的username 为 <code>a&#39; or &#39;1=1</code>，那么使用${}处理后直接替换字符串的sql就解析为：</p><p><code>select * from t_user where username = &#39;a&#39; or &#39;1=1&#39; ;</code></p><p>这样的话所有的用户数据就被查出来了，这样就属于SQL注入。</p><p><strong>如果使用#{}，经过sql动态解析和预编译，会把单引号转义为&#39;</strong></p><p>那么sql最终解析为：</p><p><code>select * from t_user where username = &quot;a\&#39; or \&#39;1=1 &quot;;</code></p><p>//这样会查不出任何数据，有效阻止sql注入</p><p>有的业务场景经常用到模糊查询，也就是like处理，推荐使用以下处理方式：</p><p><code>t_user.username like #username#</code></p><p>java代码里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!StringUtil.isEmpty(<span class="keyword">this</span>.username)) &#123;</span><br><span class="line"></span><br><span class="line">table.setUsername(<span class="string">"%"</span> + <span class="keyword">this</span>.username + <span class="string">"%"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者也可以使用数据库函数进行连接处理：</p><p><code>select * from t_user u where username like CONCAT(&#39;%&#39;, #username#, &#39;%&#39;)</code></p><p><strong>注意：以上就可以发现在某些特定场景下只能用${}，比如order by 后的排序字段，表名、列名,因为需要替换为不变的常量。如果表名中使用#{}的话，会变成如下：</strong></p><p><code>select * from #{tablename}</code>–&gt;<code>tablename</code>传参为<code>t_user</code>—&gt;处理后变成 <code>select * from &#39;t_user&#39;</code>，多了单引号，没有这样的表名，这样的话就会报错了，<code>order by</code>同理。</p><p>因此，<code>${}</code>比较特殊， 他的应用场景是 <strong>需要动态传入 表名或列名时使用</strong>。</p><h2 id="性能考虑"><a href="#性能考虑" class="headerlink" title="性能考虑"></a><em>性能考虑</em></h2><p>因为预编译语句对象可以重复利用，把一个sql预编译后产生的PreparedStatement对象缓存下来，下次对于同一个sql，可以直接使用缓存的PreparedStatement对象，mybatis默认情况下，对所有的sql进行预编译，这样的话<strong>#{}的处理方式性能会相对高些</strong>。</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p><strong>能使用#{}的时候尽量使用#{}</strong></p><p><strong>表名、order by的排序字段作为变量时，使用${}。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis中动态SQL的使用</title>
      <link href="p/9f90.html"/>
      <url>p/9f90.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul><a id="more"></a><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>使用动态 SQL 最常见情景是根据条件包含 where 子句的一部分。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findActiveBlogWithTitleLike&quot;</span><br><span class="line">     resultType=&quot;Blog&quot;&gt;</span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE state = ‘ACTIVE’</span><br><span class="line">  &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>这条语句提供了可选的查找文本功能。如果不传入 “title”，那么所有处于 “ACTIVE” 状态的 BLOG 都会返回；如果传入了 “title” 参数，那么就会对 “title” 一列进行模糊查找并返回对应的 BLOG 结果（细心的读者可能会发现，“title” 的参数值需要包含查找掩码或通配符字符）。</p><p>如果希望通过 “title” 和 “author” 两个参数进行可选搜索该怎么办呢？首先，我想先将语句名称修改成更名副其实的名称；接下来，只需要加入另一个条件即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findActiveBlogLike&quot;</span><br><span class="line">     resultType=&quot;Blog&quot;&gt;</span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &lt;if test=&quot;author != null and author.name != null&quot;&gt;</span><br><span class="line">    AND author_name like #&#123;author.name&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h3><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><p>还是上面的例子，但是策略变为：传入了 “title” 就按 “title” 查找，传入了 “author” 就按 “author” 查找的情形。若两者都没有传入，就返回标记为 featured 的 BLOG（这可能是管理员认为，与其返回大量的无意义随机 Blog，还不如返回一些由管理员挑选的 Blog）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findActiveBlogLike&quot;</span><br><span class="line">     resultType=&quot;Blog&quot;&gt;</span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  &lt;choose&gt;</span><br><span class="line">    &lt;when test=&quot;title != null&quot;&gt;</span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    &lt;/when&gt;</span><br><span class="line">    &lt;when test=&quot;author != null and author.name != null&quot;&gt;</span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    &lt;/when&gt;</span><br><span class="line">    &lt;otherwise&gt;</span><br><span class="line">      AND featured = 1</span><br><span class="line">    &lt;/otherwise&gt;</span><br><span class="line">  &lt;/choose&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="trim、where、set"><a href="#trim、where、set" class="headerlink" title="trim、where、set"></a>trim、where、set</h3><p>前面几个例子已经合宜地解决了一个臭名昭著的动态 SQL 问题。现在回到之前的 “if” 示例，这次我们将 “state = ‘ACTIVE’” 设置成动态条件，看看会发生什么。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findActiveBlogLike&quot;</span><br><span class="line">     resultType=&quot;Blog&quot;&gt;</span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE</span><br><span class="line">  &lt;if test=&quot;state != null&quot;&gt;</span><br><span class="line">    state = #&#123;state&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &lt;if test=&quot;author != null and author.name != null&quot;&gt;</span><br><span class="line">    AND author_name like #&#123;author.name&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>如果没有匹配的条件会怎么样？最终这条 SQL 会变成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM BLOG</span><br><span class="line">WHERE</span><br></pre></td></tr></table></figure><p>这会导致查询失败。如果匹配的只是第二个条件又会怎样？这条 SQL 会是这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM BLOG</span><br><span class="line">WHERE</span><br><span class="line">AND title like ‘someTitle’</span><br></pre></td></tr></table></figure><p>这个查询也会失败。这个问题不能简单地用条件元素来解决。这个问题是如此的难以解决，以至于解决过的人不会再想碰到这种问题。</p><p>MyBatis 有一个简单且适合大多数场景的解决办法。而在其他场景中，可以对其进行自定义以符合需求。而这，只需要一处简单的改动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findActiveBlogLike&quot;</span><br><span class="line">     resultType=&quot;Blog&quot;&gt;</span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  &lt;where&gt;</span><br><span class="line">    &lt;if test=&quot;state != null&quot;&gt;</span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;author != null and author.name != null&quot;&gt;</span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">  &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p><p>如果 <em>where</em> 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能。比如，和 <em>where</em> 元素等价的自定义 trim 元素为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;trim prefix=&quot;WHERE&quot; prefixOverrides=&quot;AND |OR &quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/trim&gt;</span><br></pre></td></tr></table></figure><p><em>prefixOverrides</em> 属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）。上述例子会移除所有 <em>prefixOverrides</em> 属性中指定的内容，并且插入 <em>prefix</em> 属性中指定的内容。</p><p>用于动态更新语句的类似解决方案叫做 <em>set<em>。</em>set</em> 元素可以用于动态包含需要更新的列，忽略其它不更新的列。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;updateAuthorIfNecessary&quot;&gt;</span><br><span class="line">  update Author</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">      &lt;if test=&quot;username != null&quot;&gt;username=#&#123;username&#125;,&lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;password != null&quot;&gt;password=#&#123;password&#125;,&lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;email != null&quot;&gt;email=#&#123;email&#125;,&lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;bio != null&quot;&gt;bio=#&#123;bio&#125;&lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><p>这个例子中，<em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p><p>来看看与 <em>set</em> 元素等价的自定义 <em>trim</em> 元素吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;trim prefix=&quot;SET&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/trim&gt;</span><br></pre></td></tr></table></figure><p>注意，我们覆盖了后缀值设置，并且自定义了前缀值。</p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectPostIn&quot; resultType=&quot;domain.blog.Post&quot;&gt;</span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  &lt;foreach item=&quot;item&quot; index=&quot;index&quot; collection=&quot;list&quot;</span><br><span class="line">      open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  &lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符，看它多智能！</p><p><strong>提示</strong> 你可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象作为集合参数传递给 <em>foreach</em>。当使用可迭代对象或者数组时，index 是当前迭代的序号，item 的值是本次迭代获取到的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。</p><p>至此，我们已经完成了与 XML 配置及映射文件相关的讨论。下一章将详细探讨 Java API，以便你能充分利用已经创建的映射配置。</p><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>要在带注解的映射器接口类中使用动态 SQL，可以使用 <em>script</em> 元素。比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Update(&#123;&quot;&lt;script&gt;&quot;,</span><br><span class="line">  &quot;update Author&quot;,</span><br><span class="line">  &quot;  &lt;set&gt;&quot;,</span><br><span class="line">  &quot;    &lt;if test=&apos;username != null&apos;&gt;username=#&#123;username&#125;,&lt;/if&gt;&quot;,</span><br><span class="line">  &quot;    &lt;if test=&apos;password != null&apos;&gt;password=#&#123;password&#125;,&lt;/if&gt;&quot;,</span><br><span class="line">  &quot;    &lt;if test=&apos;email != null&apos;&gt;email=#&#123;email&#125;,&lt;/if&gt;&quot;,</span><br><span class="line">  &quot;    &lt;if test=&apos;bio != null&apos;&gt;bio=#&#123;bio&#125;&lt;/if&gt;&quot;,</span><br><span class="line">  &quot;  &lt;/set&gt;&quot;,</span><br><span class="line">  &quot;where id=#&#123;id&#125;&quot;,</span><br><span class="line">  &quot;&lt;/script&gt;&quot;&#125;)</span><br><span class="line">void updateAuthorValues(Author author);</span><br></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p><code>bind</code> 元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectBlogsLike&quot; resultType=&quot;Blog&quot;&gt;</span><br><span class="line">  &lt;bind name=&quot;pattern&quot; value=&quot;&apos;%&apos; + _parameter.getTitle() + &apos;%&apos;&quot; /&gt;</span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE title LIKE #&#123;pattern&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="多数据库支持"><a href="#多数据库支持" class="headerlink" title="多数据库支持"></a>多数据库支持</h3><p>如果配置了 databaseIdProvider，你就可以在动态代码中使用名为 “_databaseId” 的变量来为不同的数据库构建特定的语句。比如下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insert&quot;&gt;</span><br><span class="line">  &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;BEFORE&quot;&gt;</span><br><span class="line">    &lt;if test=&quot;_databaseId == &apos;oracle&apos;&quot;&gt;</span><br><span class="line">      select seq_users.nextval from dual</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;_databaseId == &apos;db2&apos;&quot;&gt;</span><br><span class="line">      select nextval for seq_users from sysibm.sysdummy1&quot;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">  &lt;/selectKey&gt;</span><br><span class="line">  insert into users values (#&#123;id&#125;, #&#123;name&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><h3 id="动态-SQL-中的插入脚本语言"><a href="#动态-SQL-中的插入脚本语言" class="headerlink" title="动态 SQL 中的插入脚本语言"></a>动态 SQL 中的插入脚本语言</h3><p>MyBatis 从 3.2 版本开始支持插入脚本语言，这允许你插入一种语言驱动，并基于这种语言来编写动态 SQL 查询语句。</p><p>可以通过实现以下接口来插入一种语言：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface LanguageDriver &#123;</span><br><span class="line">  ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql);</span><br><span class="line">  SqlSource createSqlSource(Configuration configuration, XNode script, Class&lt;?&gt; parameterType);</span><br><span class="line">  SqlSource createSqlSource(Configuration configuration, String script, Class&lt;?&gt; parameterType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现自定义语言驱动后，你就可以在 mybatis-config.xml 文件中将它设置为默认语言：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">  &lt;typeAlias type=&quot;org.sample.MyLanguageDriver&quot; alias=&quot;myLanguage&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">  &lt;setting name=&quot;defaultScriptingLanguage&quot; value=&quot;myLanguage&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><p>或者，你也可以使用 <code>lang</code> 属性为特定的语句指定语言：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectBlog&quot; lang=&quot;myLanguage&quot;&gt;</span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>或者，在你的 mapper 接口上添加 <code>@Lang</code> 注解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface Mapper &#123;</span><br><span class="line">  @Lang(MyLanguageDriver.class)</span><br><span class="line">  @Select(&quot;SELECT * FROM BLOG&quot;)</span><br><span class="line">  List&lt;Blog&gt; selectBlog();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong> 可以使用 Apache Velocity 作为动态语言，更多细节请参考 MyBatis-Velocity 项目。</p><p>你前面看到的所有 xml 标签都由默认 MyBatis 语言提供，而它由语言驱动 <code>org.apache.ibatis.scripting.xmltags.XmlLanguageDriver</code>（别名为 <code>xml</code>）所提供。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html" target="_blank" rel="noopener">参考</a></h3>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合mybatis-pagehelper</title>
      <link href="p/1416.html"/>
      <url>p/1416.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="引入分页插件依赖"><a href="#引入分页插件依赖" class="headerlink" title="引入分页插件依赖"></a>引入分页插件依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通用mapper逆向工具（可选） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="配置yml"><a href="#配置yml" class="headerlink" title="配置yml"></a>配置yml</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分页插件配置</span></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line">  <span class="attr">helperDialect:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">supportMethodsArguments:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="使用分页插件"><a href="#使用分页插件" class="headerlink" title="使用分页插件"></a>使用分页插件</h1><p>在查询前使用分页插件，原理：统一拦截sql，为其提供分页功能</p><ul><li><p>page: 第几页</p></li><li><p>pageSize: 每页显示条数</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PageHelper.startPage(page, pageSize);</span><br></pre></td></tr></table></figure><h1 id="封装-amp-使用"><a href="#封装-amp-使用" class="headerlink" title="封装&amp;使用"></a>封装&amp;使用</h1><p>分页数据封装到 PagedGridResult.java 传给前端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PageInfo&lt;?&gt; pageList = <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line">PagedGridResult grid = <span class="keyword">new</span> PagedGridResult();</span><br><span class="line">grid.setPage(page);</span><br><span class="line">grid.setRows(list);</span><br><span class="line">grid.setTotal(pageList.getPages());</span><br><span class="line">grid.setRecords(pageList.getTotal());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: PagedGridResult.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.imooc.utils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 用来返回分页Grid的数据格式</span></span><br><span class="line"><span class="comment"> * Copyright: Copyright (c) 2019</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PagedGridResult</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> page;        <span class="comment">// 当前页数</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> total;       <span class="comment">// 总页数 </span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">long</span> records;     <span class="comment">// 总记录数</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;?&gt; rows;     <span class="comment">// 每行显示的内容</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> page;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPage</span><span class="params">(<span class="keyword">int</span> page)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.page = page;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> total;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(<span class="keyword">int</span> total)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.total = total;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getRecords</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> records;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRecords</span><span class="params">(<span class="keyword">long</span> records)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.records = records;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> List&lt;?&gt; getRows() &#123;</span><br><span class="line">      <span class="keyword">return</span> rows;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRows</span><span class="params">(List&lt;?&gt; rows)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.rows = rows;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h3 id="impl"><a href="#impl" class="headerlink" title="impl"></a>impl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PagedGridResult <span class="title">queryPagedComments</span><span class="params">(String itemId,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              Integer level,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              Integer page,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              Integer pageSize)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"itemId"</span>, itemId);</span><br><span class="line">    map.put(<span class="string">"level"</span>, level);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mybatis-pagehelper</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * page: 第几页</span></span><br><span class="line"><span class="comment">     * pageSize: 每页显示条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PageHelper.startPage(page, pageSize);</span><br><span class="line"></span><br><span class="line">    List&lt;ItemCommentVO&gt; list = itemsMapperCustom.queryItemComments(map);</span><br><span class="line">    <span class="comment">//信息脱敏</span></span><br><span class="line">    <span class="keyword">for</span> (ItemCommentVO vo : list) &#123;</span><br><span class="line">        vo.setNickname(DesensitizationUtil.commonDisplay(vo.getNickname()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> setterPagedGrid(list, page);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> PagedGridResult <span class="title">setterPagedGrid</span><span class="params">(List&lt;?&gt; list, Integer page)</span> </span>&#123;</span><br><span class="line">    PageInfo&lt;?&gt; pageList = <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line">    PagedGridResult grid = <span class="keyword">new</span> PagedGridResult();</span><br><span class="line">    grid.setPage(page);</span><br><span class="line">    grid.setRows(list);</span><br><span class="line">    grid.setTotal(pageList.getPages());</span><br><span class="line">    grid.setRecords(pageList.getTotal());</span><br><span class="line">    <span class="keyword">return</span> grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"查询商品评论"</span>, notes = <span class="string">"查询商品评论"</span>, httpMethod = <span class="string">"GET"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/comments"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> IMOOCJSONResult <span class="title">comments</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @ApiParam(name = <span class="string">"itemId"</span>, value = <span class="string">"商品id"</span>, required = <span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">        @RequestParam String itemId,</span></span><br><span class="line"><span class="function">        @<span class="title">ApiParam</span><span class="params">(name = <span class="string">"level"</span>, value = <span class="string">"评价等级"</span>, required = <span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">        @RequestParam Integer level,</span></span><br><span class="line"><span class="function">        @<span class="title">ApiParam</span><span class="params">(name = <span class="string">"page"</span>, value = <span class="string">"查询下一页的第几页"</span>, required = <span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">        @RequestParam Integer page,</span></span><br><span class="line"><span class="function">        @<span class="title">ApiParam</span><span class="params">(name = <span class="string">"pageSize"</span>, value = <span class="string">"分页的每一页显示的条数"</span>, required = <span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">        @RequestParam Integer pageSize) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(itemId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> IMOOCJSONResult.errorMsg(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (page == <span class="keyword">null</span>) &#123;</span><br><span class="line">        page = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pageSize == <span class="keyword">null</span>) &#123;</span><br><span class="line">        pageSize = COMMON_PAGE_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PagedGridResult grid = itemService.queryPagedComments(itemId,</span><br><span class="line">                                                            level,</span><br><span class="line">                                                            page,</span><br><span class="line">                                                            pageSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> IMOOCJSONResult.ok(grid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-采用map传递多参数&amp;信息脱敏</title>
      <link href="p/39f1.html"/>
      <url>p/39f1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以一个电商项目的查询商品评论列表功能举例。</p><a id="more"></a><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ItemCommentVO&gt; <span class="title">queryItemComments</span><span class="params">(@Param(<span class="string">"paramsMap"</span>)</span> Map&lt;String, Object&gt; map)</span>;</span><br></pre></td></tr></table></figure><h3 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryItemComments"</span> <span class="attr">parameterType</span>=<span class="string">"Map"</span> <span class="attr">resultType</span>=<span class="string">"com.imooc.pojo.vo.ItemCommentVO"</span>&gt;</span></span><br><span class="line">  SELECT</span><br><span class="line">      ic.comment_level as commentLevel,</span><br><span class="line">      ic.content as content,</span><br><span class="line">      ic.sepc_name as specName,</span><br><span class="line">      ic.created_time as createdTime,</span><br><span class="line">      u.face as userFace,</span><br><span class="line">      u.nickname as nickname</span><br><span class="line">  FROM</span><br><span class="line">      items_comments ic</span><br><span class="line">  LEFT JOIN</span><br><span class="line">      users u</span><br><span class="line">  ON</span><br><span class="line">      ic.user_id = u.id</span><br><span class="line">  WHERE</span><br><span class="line">      ic.item_id = #&#123;paramsMap.itemId&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">" paramsMap.level != null and paramsMap.level != '' "</span>&gt;</span></span><br><span class="line">        AND ic.comment_level = #&#123;paramsMap.level&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据商品id查询商品的评价（分页）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> itemId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> level</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PagedGridResult <span class="title">queryPagedComments</span><span class="params">(String itemId, Integer level,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          Integer page, Integer pageSize)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="impl"><a href="#impl" class="headerlink" title="impl"></a>impl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PagedGridResult <span class="title">queryPagedComments</span><span class="params">(String itemId,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              Integer level,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              Integer page,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              Integer pageSize)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"itemId"</span>, itemId);</span><br><span class="line">    map.put(<span class="string">"level"</span>, level);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mybatis-pagehelper</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * page: 第几页</span></span><br><span class="line"><span class="comment">     * pageSize: 每页显示条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PageHelper.startPage(page, pageSize);</span><br><span class="line"></span><br><span class="line">    List&lt;ItemCommentVO&gt; list = itemsMapperCustom.queryItemComments(map);</span><br><span class="line">    <span class="comment">//信息脱敏</span></span><br><span class="line">    <span class="keyword">for</span> (ItemCommentVO vo : list) &#123;</span><br><span class="line">        vo.setNickname(DesensitizationUtil.commonDisplay(vo.getNickname()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> setterPagedGrid(list, page);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> PagedGridResult <span class="title">setterPagedGrid</span><span class="params">(List&lt;?&gt; list, Integer page)</span> </span>&#123;</span><br><span class="line">    PageInfo&lt;?&gt; pageList = <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line">    PagedGridResult grid = <span class="keyword">new</span> PagedGridResult();</span><br><span class="line">    grid.setPage(page);</span><br><span class="line">    grid.setRows(list);</span><br><span class="line">    grid.setTotal(pageList.getPages());</span><br><span class="line">    grid.setRecords(pageList.getTotal());</span><br><span class="line">    <span class="keyword">return</span> grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"查询商品评论"</span>, notes = <span class="string">"查询商品评论"</span>, httpMethod = <span class="string">"GET"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/comments"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> IMOOCJSONResult <span class="title">comments</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @ApiParam(name = <span class="string">"itemId"</span>, value = <span class="string">"商品id"</span>, required = <span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">        @RequestParam String itemId,</span></span><br><span class="line"><span class="function">        @<span class="title">ApiParam</span><span class="params">(name = <span class="string">"level"</span>, value = <span class="string">"评价等级"</span>, required = <span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">        @RequestParam Integer level,</span></span><br><span class="line"><span class="function">        @<span class="title">ApiParam</span><span class="params">(name = <span class="string">"page"</span>, value = <span class="string">"查询下一页的第几页"</span>, required = <span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">        @RequestParam Integer page,</span></span><br><span class="line"><span class="function">        @<span class="title">ApiParam</span><span class="params">(name = <span class="string">"pageSize"</span>, value = <span class="string">"分页的每一页显示的条数"</span>, required = <span class="keyword">false</span>)</span></span></span><br><span class="line"><span class="function">        @RequestParam Integer pageSize) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(itemId)) &#123;</span><br><span class="line">        <span class="keyword">return</span> IMOOCJSONResult.errorMsg(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (page == <span class="keyword">null</span>) &#123;</span><br><span class="line">        page = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pageSize == <span class="keyword">null</span>) &#123;</span><br><span class="line">        pageSize = COMMON_PAGE_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PagedGridResult grid = itemService.queryPagedComments(itemId,</span><br><span class="line">                                                            level,</span><br><span class="line">                                                            page,</span><br><span class="line">                                                            pageSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> IMOOCJSONResult.ok(grid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="脱敏工具类"><a href="#脱敏工具类" class="headerlink" title="脱敏工具类"></a>脱敏工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.applet.Main;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用脱敏工具类</span></span><br><span class="line"><span class="comment"> * 可用于：</span></span><br><span class="line"><span class="comment"> *      用户名</span></span><br><span class="line"><span class="comment"> *      手机号</span></span><br><span class="line"><span class="comment"> *      邮箱</span></span><br><span class="line"><span class="comment"> *      地址等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DesensitizationUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYMBOL = <span class="string">"*"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = commonDisplay(<span class="string">"慕课网"</span>);</span><br><span class="line">        String mobile = commonDisplay(<span class="string">"13900000000"</span>);</span><br><span class="line">        String mail = commonDisplay(<span class="string">"admin@imooc.com"</span>);</span><br><span class="line">        String address = commonDisplay(<span class="string">"北京大运河东路888号"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(mobile);</span><br><span class="line">        System.out.println(mail);</span><br><span class="line">        System.out.println(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用脱敏方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">commonDisplay</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == value || <span class="string">""</span>.equals(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = value.length();</span><br><span class="line">        <span class="keyword">int</span> pamaone = len / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> pamatwo = pamaone - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> pamathree = len % <span class="number">2</span>;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pamathree == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> SYMBOL;</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.append(SYMBOL);</span><br><span class="line">            stringBuilder.append(value.charAt(len - <span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (pamatwo &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                stringBuilder.append(value.substring(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">                stringBuilder.append(SYMBOL);</span><br><span class="line">                stringBuilder.append(value.substring(len - <span class="number">1</span>, len));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pamatwo &gt;= SIZE / <span class="number">2</span> &amp;&amp; SIZE + <span class="number">1</span> != len) &#123;</span><br><span class="line">                <span class="keyword">int</span> pamafive = (len - SIZE) / <span class="number">2</span>;</span><br><span class="line">                stringBuilder.append(value.substring(<span class="number">0</span>, pamafive));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">                    stringBuilder.append(SYMBOL);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((pamathree == <span class="number">0</span> &amp;&amp; SIZE / <span class="number">2</span> == <span class="number">0</span>) || (pamathree != <span class="number">0</span> &amp;&amp; SIZE % <span class="number">2</span> != <span class="number">0</span>)) &#123;</span><br><span class="line">                    stringBuilder.append(value.substring(len - pamafive, len));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    stringBuilder.append(value.substring(len - (pamafive + <span class="number">1</span>), len));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> pamafour = len - <span class="number">2</span>;</span><br><span class="line">                stringBuilder.append(value.substring(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pamafour; i++) &#123;</span><br><span class="line">                    stringBuilder.append(SYMBOL);</span><br><span class="line">                &#125;</span><br><span class="line">                stringBuilder.append(value.substring(len - <span class="number">1</span>, len));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启MyBatis日志Sql打印</title>
      <link href="p/1357.html"/>
      <url>p/1357.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># mybatis 配置</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># web访问端口号  约定：8088</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="comment">#  port: 8088</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">  <span class="attr">max-http-header-size:</span> <span class="string">80KB</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 配置数据源信息</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">datasource:</span>                                           <span class="comment"># 数据源的相关配置</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span>          <span class="comment"># 数据源类型：HikariCP</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span>          <span class="comment"># mysql驱动</span></span><br><span class="line"><span class="comment">#    url: jdbc:mysql://localhost:3306/foodie-shop-dev?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line"><span class="comment">#    password: root</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">30000</span>       <span class="comment"># 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 默认:30秒</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">5</span>                 <span class="comment"># 最小连接数</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">20</span>           <span class="comment"># 最大连接数</span></span><br><span class="line">      <span class="attr">auto-commit:</span> <span class="literal">true</span>               <span class="comment"># 自动提交</span></span><br><span class="line">      <span class="attr">idle-timeout:</span> <span class="number">600000</span>            <span class="comment"># 连接超时的最大时长（毫秒），超时则被释放（retired），默认:10分钟</span></span><br><span class="line">      <span class="attr">pool-name:</span> <span class="string">DateSourceHikariCP</span>     <span class="comment"># 连接池名字</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">1800000</span>           <span class="comment"># 连接的生命时长（毫秒），超时而且没被使用则被释放（retired），默认:30分钟 1800000ms</span></span><br><span class="line">      <span class="attr">connection-test-query:</span> <span class="string">SELECT</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="number">512000</span>     <span class="comment"># 文件上传大小限制为500kb</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="number">512000</span>  <span class="comment"># 请求大小限制为500kb</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># mybatis 配置</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.imooc.pojo</span>          <span class="comment"># 所有POJO类所在包路径</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span>      <span class="comment"># mapper映射文件</span></span><br><span class="line"><span class="comment">#  configuration:</span></span><br><span class="line"><span class="comment">#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># mybatis mapper 配置</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># 通用 Mapper 配置</span></span><br><span class="line"><span class="attr">mapper:</span></span><br><span class="line">  <span class="attr">mappers:</span> <span class="string">com.imooc.my.mapper.MyMapper</span></span><br><span class="line">  <span class="attr">not-empty:</span> <span class="literal">false</span>    <span class="comment"># 在进行数据库操作的的时候，判断表达式 username != null, 是否追加 username != ''</span></span><br><span class="line">  <span class="attr">identity:</span> <span class="string">MYSQL</span></span><br><span class="line"><span class="comment"># 分页插件配置</span></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line">  <span class="attr">helperDialect:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">supportMethodsArguments:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用网站第二弹</title>
      <link href="p/1790.html"/>
      <url>p/1790.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>从我拿起笔，准备叙述你的细节开始，<br>总是忍不住走神，真抱歉，<br>情话没写出来，<br>可我实实在在地想了你一个小时。</p>            <i class="fa fa-quote-right"></i>          </blockquote><a id="more"></a><p>1、Windows、Office等微软原版镜像下载：<a href="https://msdn.itellyou.cn/2、V2EX：科技宅/程序员，新奇想法聚集地：https://www.v2ex.com/3：计算机书籍控：汇总各类编程语言的pdf书籍下" target="_blank" rel="noopener">https://msdn.itellyou.cn/2、V2EX：科技宅/程序员，新奇想法聚集地：https://www.v2ex.com/3：计算机书籍控：汇总各类编程语言的pdf书籍下</a>…<br>1、Windows、Office等微软原版镜像下载： <a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></p><p>2、V2EX：科技宅/程序员，新奇想法聚集地： <a href="https://www.v2ex.com/" target="_blank" rel="noopener">https://www.v2ex.com/</a></p><p>3：计算机书籍控：汇总各类编程语言的pdf书籍下载：<a href="http://bestcbooks.com/" target="_blank" rel="noopener">http://bestcbooks.com/</a></p><p>4：最新版迅雷发布站： <a href="http://yangtai.xunlei.com/" target="_blank" rel="noopener">http://yangtai.xunlei.com/</a></p><p>5、有趣网址之家：汇集上千个有趣网站： <a href="https://youquhome.com/" target="_blank" rel="noopener">https://youquhome.com/</a></p><p>6、书格：提供大量古籍免费下载的网站：<a href="http://pc.shuge.org:8888/" target="_blank" rel="noopener">http://pc.shuge.org:8888/</a>  </p><p>7、不会百度吗？动图链接生成站：<a href="http://buhuibaidu.me/" target="_blank" rel="noopener">http://buhuibaidu.me/</a>  </p><p>8、苦瓜书盘：免费电子书下载站：<a href="https://kgbook.com/" target="_blank" rel="noopener">https://kgbook.com/</a>  </p><p>9、免费论文下载站：<a href="http://lib.cust.edu.cn/webs/list/notice/723.html" target="_blank" rel="noopener">http://lib.cust.edu.cn/webs/list/notice/723.html</a>  </p><p>10、收录上万个国内外网站的导航站：<a href="http://www.egouz.com/" target="_blank" rel="noopener">http://www.egouz.com/</a></p><p>11、小视频解析下载站：<a href="http://downfi.com/video/" target="_blank" rel="noopener">http://downfi.com/video/</a> 12、BOOK ZZ国外的一个免费书籍下载站： <a href="http://zh.b-ok.xyz/" target="_blank" rel="noopener">http://zh.b-ok.xyz/</a></p><p>13、查看国内影视作品拍摄备案的网站：<a href="http://www.sapprft.gov.cn/sapprft/channels/10564.shtml" target="_blank" rel="noopener">http://www.sapprft.gov.cn/sapprft/channels/10564.shtml</a>  </p><p>14、高质量百度网盘资源搜索站：<a href="http://www.aisouziyuan.com" target="_blank" rel="noopener">www.aisouziyuan.com</a></p><p>15、稿定抠图：在线免费抠图网站：<a href="https://www.gaoding.com/koutu" target="_blank" rel="noopener">https://www.gaoding.com/koutu</a></p><p>16、Windows 绝赞应用是一个汇总Windows平台上一些良心软件的网站，目前汇集软件上百个，均将流氓类软件排除在外。地址： <a href="https://amazing-apps.gitbooks.io/windows-apps-that-amaze-us/content/zh-CN/" target="_blank" rel="noopener">https://amazing-apps.gitbooks.io/windows-apps-that-amaze-us/content/zh-CN/</a></p><p>17、好读：电子书下载站：<a href="http://www.haodoo.net" target="_blank" rel="noopener">http://www.haodoo.net</a> 18、优品PPT是是一家专注于分享高质量的免费PPT模板下载网站。包括PPT图表、PPT背景图片、PPT素材、PPT教程等各类PPT资源。地址： <a href="http://www.ypppt.com/" target="_blank" rel="noopener">http://www.ypppt.com/</a>  </p><p>19、谷歌浏览器crx插件下载站：<a href="https://www.crx4chrome.com" target="_blank" rel="noopener">https://www.crx4chrome.com</a></p><p>20、simpledesktops：简约电脑壁纸网站：<a href="http://simpledesktops.com/" target="_blank" rel="noopener">http://simpledesktops.com/</a></p><p>21、ape8是一个专门致力于提供国内外无损音乐下载的网站，网站提供的音乐都可以进行免费下载，值得收藏。地址： <a href="http://ape8.com" target="_blank" rel="noopener">http://ape8.com</a></p><p>22、文言文、白话文互译站：<a href="https://fanyi.baidu.com" target="_blank" rel="noopener">https://fanyi.baidu.com</a> 23、视频鱼是一个视频解析站，支持BiliBili、AcFun、优酷网、腾讯视频、微博秒拍、搜狐、乐视、百度视频、土豆网、芒果tv、凤凰视频、新浪视频、56、酷6、央视网、天天看看、网易视频、百度贴吧、爆米花网、Dilidili、豆瓣、斗鱼、熊猫、风行网、爱奇艺、激动网、秒拍、PPTV、企鹅直播、战旗等，输入地址即可获取下载地址。地址： <a href="http://www.shipinyu.cn/" target="_blank" rel="noopener">http://www.shipinyu.cn/</a></p><p>24、W3School 是一个不以盈利为目的的编程教程网站，当然教程主要是网页编程类的，从基础的 HTML 到 CSS，乃至进阶的 XML、SQL、JS、PHP 和 ASP.NET，教程完全免费。地址： <a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">http://www.w3school.com.cn/</a></p><p>25、SooPAT提供国内外专利检索与下载服务： <a href="http://www.soopat.com" target="_blank" rel="noopener">http://www.soopat.com</a></p><p>26、正版行业标准下载站： <a href="http://www.gb688.cn/bzgk/gb/index" target="_blank" rel="noopener">http://www.gb688.cn/bzgk/gb/index</a></p><p>27、无损音乐吧也是一个分享无损音乐专辑的网站，提供百度网盘免费下载，目前网站已收录上万首歌曲。地址： <a href="http://www.dtshot.com/" target="_blank" rel="noopener">http://www.dtshot.com/</a></p><p>31、迅雷仓主要分享720P，乃至4K高清电影下载的网站，资源挺全，还有左右3D格式电影。地址： <a href="http://www.xunleicang.com/" target="_blank" rel="noopener">http://www.xunleicang.com/</a></p><p>33、阳光电影是个老网站了，网站虽说界面简陋，但资源丰富，提供资源免费下载。地址： <a href="http://www.ygdy8.com/" target="_blank" rel="noopener">http://www.ygdy8.com/</a></p><p>34、八零电子书是专业提供玄幻,言情,武侠,历史,网游,科幻,恐怖,文学,名著,经管,励志,传记,法律,教育,外国名著等全本小说免费下载的网站，资源很新，下载畅通无套路。地址： <a href="https://www.80txt.com/" target="_blank" rel="noopener">https://www.80txt.com/</a></p><p>35、世界数字图书馆是联合国与上百个国家联合创办的公益性质书籍分享网站，书籍均提供扫描版免费下载，涵盖了193个国家近20000多书籍资料，涵盖公元前 8000&#8197;年至 2000年世界范围内的文库，值得收藏。地址： <a href="https://www.wdl.org/zh/" target="_blank" rel="noopener">https://www.wdl.org/zh/</a></p><p>36、PhotoFunia是一个在线编辑照片的网站，里面有各种各样的图片特效，由于是国外网站，所以慢一些，但是确实好玩。地址： <a href="http://photofunia.com/" target="_blank" rel="noopener">http://photofunia.com/</a></p><p>37、百度搜索风云榜以数亿网民的每日搜索行为作为数据基础，建立权威全面的各类关键词排行榜，引领热词阅读时代。各个类别的数据热点都能看到。地址： <a href="http://top.baidu.com/" target="_blank" rel="noopener">http://top.baidu.com/</a></p><p>38、百度识图做的也是挺不错的，识图就是上传图片，找到其在互联网里出现的蛛丝马迹，常用来找电影出处或者原图。地址： <a href="http://image.baidu.com/?fr=shitu" target="_blank" rel="noopener">http://image.baidu.com/?fr=shitu</a> 39、腾讯位置大数据主要是汇集国内热门景点热力图、人口迁徙图等大数据，以地图图像形式展示，非常有意思。地址： <a href="https://heat.qq.com" target="_blank" rel="noopener">https://heat.qq.com</a>  </p><p>40、百度指数主要统计某事件或者人物的热度趋势，按照时间，包括媒体热度、资讯指数等。地址： <a href="http://index.baidu.com/" target="_blank" rel="noopener">http://index.baidu.com/</a>  </p><p>41、掘金社区也是一个小众社区，主要是分享编程技术，开发者交流的网站，里面干货教程很多，经验交流也很多，很好的网站，各种编程语言都会涉及到。地址： <a href="https://juejin.im/" target="_blank" rel="noopener">https://juejin.im/</a>  </p><p>42、绿色软件分享站： <a href="https://www.portablesoft.org/" target="_blank" rel="noopener">https://www.portablesoft.org/</a> 43、Photopea是国外一个独立开发者开发的网页版PS，与PS界面基本一致，直接在线运行，完全免费，功能也是挺多的，部分地区网络可能无法访问。地址： <a href="https://www.photopea.com/" target="_blank" rel="noopener">https://www.photopea.com/</a>  </p><p>44、uwp应用分享站，适用于win8和win10： <a href="https://uwp.cn/" target="_blank" rel="noopener">https://uwp.cn/</a></p><p>45、电影天堂是一个电影资源分享站，每天都会更新，迅雷下载即可，资源挺丰富，值得收藏。地址： <a href="https://www.dy2018.com/" target="_blank" rel="noopener">https://www.dy2018.com/</a>  </p><p>48、编程类书籍电子书下载站： <a href="https://itbook.download" target="_blank" rel="noopener">https://itbook.download</a>  </p><p>49、穿帮网是一个专门收集影视剧穿帮片段的网站，不过目前停止更新了，找穿帮看来也是挺累哈，目不过好在积累了很多啊。地址： <a href="http://www.bug.cn/" target="_blank" rel="noopener">http://www.bug.cn/</a></p><p>50、阿里图标下载站： <a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a></p><p>51、天眼查也是一个很出名的网站，通过搜集政府各大公开信息，整合在一起，提供企业信息、老板等众多信息，对于找工作、鉴定虚假公司有极大帮助。地址： <a href="https://www.tianyancha.com/" target="_blank" rel="noopener">https://www.tianyancha.com/</a></p><p>52、开源中国：编程者代码交流网站：<a href="https://www.oschina.net/" target="_blank" rel="noopener">https://www.oschina.net/</a></p><p>53、专利下载站： <a href="https://www.drugfuture.com/cnpat/cn_patent.asp" target="_blank" rel="noopener">https://www.drugfuture.com/cnpat/cn_patent.asp</a> 54、Logo生成站： <a href="https://www.logosc.cn/" target="_blank" rel="noopener">https://www.logosc.cn/</a>  </p><p>55、果壳网：科普知识站： <a href="https://www.guokr.com/" target="_blank" rel="noopener">https://www.guokr.com/</a> 56、微软官方office模板站： <a href="https://templates.office.com" target="_blank" rel="noopener">https://templates.office.com</a></p><p>57、GitHub好项目分享站： <a href="https://www.hellogithub.com/" target="_blank" rel="noopener">https://www.hellogithub.com/</a></p><p>58、d-maps是一个提供全世界各国、各区域地图下载的网站，提供pdf、GIF、AI、CDR、SVG、WMF等格式。地址： <a href="https://d-maps.com/index.php?lang=zh" target="_blank" rel="noopener">https://d-maps.com/index.php?lang=zh</a> 59、爱奇艺指数： <a href="http://index.iqiyi.com/" target="_blank" rel="noopener">http://index.iqiyi.com/</a></p><p>60、微信搜索站： <a href="http://weixin.sogou.com/" target="_blank" rel="noopener">http://weixin.sogou.com/</a></p><p>61、茶杯狐是一个影视资源搜索站，内容检索还是不错的，主要是各家网站聚合搜索，能找到不少好东西。地址：<a href="https://www.cupfox.com/" target="_blank" rel="noopener">https://www.cupfox.com/</a>  </p><p>62、音乐搜索器：多站合一音乐搜索解决方案，输入音乐名字，即可下载各大音乐平台下的音乐。地址： <a href="http://www.guqiankun.com/tools/music/" target="_blank" rel="noopener">http://www.guqiankun.com/tools/music/</a></p><p>63、腾讯设计导航： <a href="https://idesign.qq.com/#!index/site" target="_blank" rel="noopener">https://idesign.qq.com/#!index/site</a></p><p>64、喵搜主要是动漫资源站，提供新动漫的检索与下载，一般是磁力链接。地址： <a href="https://nyaso.com/" target="_blank" rel="noopener">https://nyaso.com/</a> 65、Yandex：俄罗斯搜索引擎巨头： <a href="https://www.yandex.com/" target="_blank" rel="noopener">https://www.yandex.com/</a><br>66、科技资讯网： <a href="https://www.infoq.cn/" target="_blank" rel="noopener">https://www.infoq.cn/</a></p><p>67、中国传统色RGB站： <a href="http://zhongguose.com" target="_blank" rel="noopener">http://zhongguose.com</a> 68、苹果电脑软件分享站：Mac毒是一个专门分享苹果电脑软件的网站，软件资源很全，正版、修改版软件都有，值得收藏。地址： <a href="https://www.macdu.org/" target="_blank" rel="noopener">https://www.macdu.org/</a> 69、IT之家：知名科技资讯站： <a href="https://www.ithome.com/" target="_blank" rel="noopener">https://www.ithome.com/</a></p><p>70、程序员工具箱这个网站主要分享各类程序员需要的在线工具，体验还不错，值得收藏。地址： <a href="https://tool.lu/" target="_blank" rel="noopener">https://tool.lu/</a> 71、人工智能资料分享站： <a href="https://www.tinymind.cn/" target="_blank" rel="noopener">https://www.tinymind.cn/</a></p><p>72、PNGIMG是一个专门分享透明图片的网站，也就是PS中无背景的png图片，目前网站收录了6万多张，提供免费下载。地址： <a href="http://pngimg.com/" target="_blank" rel="noopener">http://pngimg.com/</a></p><p>73、Chrome的crx插件分享下载站： <a href="http://chromecj.com/" target="_blank" rel="noopener">http://chromecj.com/</a></p><p>74、Wallpaper abyss是全球最大的免费壁纸网站之一，有中文网页，资源非常多，每天都会更新壁纸，目前全站壁纸数量已达75万之多，且分门别类清晰，手机、电脑壁纸全覆盖，分辨率从2K-8K，也是很良心的网站。地址： <a href="https://wall.alphacoders.com/?lang=Chinese" target="_blank" rel="noopener">https://wall.alphacoders.com/?lang=Chinese</a></p><p>75、纹理素材分享下载站： <a href="http://www.hituyu.com/" target="_blank" rel="noopener">http://www.hituyu.com/</a> 76、智图：腾讯出的图片压缩站： <a href="https://zhitu.isux.us/" target="_blank" rel="noopener">https://zhitu.isux.us/</a>  </p><p>77、百度黑白图片上色站： <a href="http://shangse.w7d7.com/" target="_blank" rel="noopener">http://shangse.w7d7.com/</a></p><p>78、国家数据统计共享站： <a href="http://data.stats.gov.cn/" target="_blank" rel="noopener">http://data.stats.gov.cn/</a> 79、改造emoji表情站： <a href="https://phlntn.com/emojibuilder/" target="_blank" rel="noopener">https://phlntn.com/emojibuilder/</a></p><p>80、七麦数据：移动应用数据统计网： <a href="https://www.qimai.cn/rank" target="_blank" rel="noopener">https://www.qimai.cn/rank</a></p><p>81、photomosh是一个图片特效处理站，内涵几十种图片特效，操作简洁。地址： <a href="https://photomosh.com/" target="_blank" rel="noopener">https://photomosh.com/</a>  </p><p>82、我爱分享站是一个分享百度网盘资源的网站，体验还不错，值得收藏。地址： <a href="http://www.wwaaffxx.com/" target="_blank" rel="noopener">http://www.wwaaffxx.com/</a></p><p>83、iOS限免资源站： <a href="http://i.apptao.com/list" target="_blank" rel="noopener">http://i.apptao.com/list</a></p><p>84、深度开源：开源程序资讯站： <a href="http://www.open-open.com/" target="_blank" rel="noopener">http://www.open-open.com/</a></p><p>85、游侠网：电脑游戏下载站： <a href="http://down.ali213.net/" target="_blank" rel="noopener">http://down.ali213.net/</a>  </p><p>86、最美应用是一个每天分享安卓、iOS手机app的网站，app介绍图文并茂，质量很高。地址： <a href="http://zuimeia.com" target="_blank" rel="noopener">http://zuimeia.com</a></p><p>87、电视直播站： <a href="http://bddn.cn/zb.htm" target="_blank" rel="noopener">http://bddn.cn/zb.htm</a>  </p><p>88、搜狗软件下载站：<a href="http://xiazai.sogou.com/" target="_blank" rel="noopener">http://xiazai.sogou.com/</a></p><p>89、百度流量研究院： <a href="http://tongji.baidu.com/data/" target="_blank" rel="noopener">http://tongji.baidu.com/data/</a> 90、小鸡词典：网络用语词典库： <a href="https://jikipedia.com/" target="_blank" rel="noopener">https://jikipedia.com/</a>  </p><p>91、下载搜是一个汇集资源下载、各种软件搜索下载的网站，值得收藏。地址： <a href="https://www.xiazaisou.com/" target="_blank" rel="noopener">https://www.xiazaisou.com/</a>  </p><p>92、AI研习社： <a href="https://ai.yanxishe.com/page/resources" target="_blank" rel="noopener">https://ai.yanxishe.com/page/resources</a></p><p>93、unsplash是一个提供壁纸下载的网站，并提供电脑手机客户端，壁纸质量很高，且无版权，免费下载。地址： <a href="https://unsplash.com/wallpaper" target="_blank" rel="noopener">https://unsplash.com/wallpaper</a>  </p><p>96、烧脑的网页文字游戏： <a href="http://hell.one-story.cn/hell-start.html" target="_blank" rel="noopener">http://hell.one-story.cn/hell-start.html</a></p><p>97、学习站推荐：我要自学网： <a href="http://www.51zxw.net/" target="_blank" rel="noopener">http://www.51zxw.net/</a>  </p><p>98、无版权图片下载站： <a href="https://www.pexels.com/" target="_blank" rel="noopener">https://www.pexels.com/</a> 99、电影推荐站： <a href="http://www.mvcat.com" target="_blank" rel="noopener">http://www.mvcat.com</a></p><p>100、清酒踏月在线音乐站是一个提供多平台音乐在线听，并提供音乐下载。地址：</p><p>@:<br>101、煎蛋：新鲜事、图分享站： <a href="http://jandan.net/" target="_blank" rel="noopener">http://jandan.net/</a> 102、美图秀秀在线版： <a href="http://xiuxiu.web.meitu.com" target="_blank" rel="noopener">http://xiuxiu.web.meitu.com</a> 103、国外知名程序员问答站： <a href="https://stackoverflow.com/" target="_blank" rel="noopener">https://stackoverflow.com/</a></p><p>104、开源技术文档分享站： <a href="https://love2.io/" target="_blank" rel="noopener">https://love2.io/</a></p><p>105、80s电影： <a href="https://www.80s.tw/" target="_blank" rel="noopener">https://www.80s.tw/</a></p><p>106、地球从无到有动图演示站： <a href="http://timelineofearth.com/" target="_blank" rel="noopener">http://timelineofearth.com/</a>  </p><p>107、谷歌星空站： <a href="http://stars.chromeexperiments.com/" target="_blank" rel="noopener">http://stars.chromeexperiments.com/</a></p><p>108、搜索引擎大全：List of search engines是维基百科的一个条目，里面汇总了世界上有名的搜索引擎站，汇总很详细，值得查看。地址： <a href="https://en.m.wikipedia.org/wiki/List_of_search_engines" target="_blank" rel="noopener">https://en.m.wikipedia.org/wiki/List_of_search_engines</a></p><p>109、gitstar-ranking是一个统计GitHub中用户、组织、项目的星总数排行的站。地址： <a href="https://gitstar-ranking.com/" target="_blank" rel="noopener">https://gitstar-ranking.com/</a></p><p>110、电影首发站： <a href="https://www.dysfz.tv/" target="_blank" rel="noopener">https://www.dysfz.tv/</a></p><p>111、Python经典教程站： <a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000</a></p><p>112、第一范文网是一家专门汇集各种范文的网站，从小学生到大学生，几乎全年龄段都需要，范文种类齐全，值得收藏。地址： <a href="https://www.diyifanwen.com/" target="_blank" rel="noopener">https://www.diyifanwen.com/</a></p><p>113、owllook是一个专门搜集小说的站，并支持小说在线阅读，排版很好。地址： <a href="https://www.owllook.net/" target="_blank" rel="noopener">https://www.owllook.net/</a></p><p>114、pexels是一个专门分享高质量无版权图片的网站，里面的图片可以随便使用，质量也很高。地址： <a href="https://www.pexels.com/" target="_blank" rel="noopener">https://www.pexels.com/</a>  </p><p>115、雅书是一个分享PDF电子书免费下载的网站： <a href="https://b.yabook.org/" target="_blank" rel="noopener">https://b.yabook.org/</a></p><p>116、绿色便携软件站： <a href="https://www.portablesoft.org/" target="_blank" rel="noopener">https://www.portablesoft.org/</a></p><p>118、爱资料在线工具站是一个分享五花八门在线工具网站。地址： <a href="https://www.toolnb.com/" target="_blank" rel="noopener">https://www.toolnb.com/</a></p><p>119、美剧、英剧、日剧等资源下载站： <a href="https://fantopia.club/" target="_blank" rel="noopener">https://fantopia.club/</a></p><p>120、sourceforge是一个国外的软件站，不管是开源的还是商业软件都能找到，资源丰富，找免费软件必备。地址： <a href="https://sourceforge.net/directory/os:windows/" target="_blank" rel="noopener">https://sourceforge.net/directory/os:windows/</a></p><p>121、zd423算是一个经典的软件分享站，虽说如今的网站界面大改，但其实原先的资源都还在，各位善用搜索即可找到好多软件。地址： <a href="http://www.zdfans.com/page/new_2_1.html" target="_blank" rel="noopener">http://www.zdfans.com/page/new_2_1.html</a>  </p><p>122、简笔画教程站： <a href="http://www.easydrawingtutorials.com" target="_blank" rel="noopener">http://www.easydrawingtutorials.com</a>  </p><p>121、zd423算是一个经典的软件分享站，虽说如今的网站界面大改，但其实原先的资源都还在，各位善用搜索即可找到好多软件。地址： <a href="http://www.zdfans.com/page/new_2_1.html" target="_blank" rel="noopener">http://www.zdfans.com/page/new_2_1.html</a>  </p><p>122、简笔画教程站： <a href="http://www.easydrawingtutorials.com" target="_blank" rel="noopener">http://www.easydrawingtutorials.com</a>  </p><p>124、文件搜也是个资源搜索站，只不过它是专注于微盘、百度网盘资源搜索，值得收藏。地址： <a href="http://wjsou.com/" target="_blank" rel="noopener">http://wjsou.com/</a></p><p>125、一站搜是一个电影、美剧、港剧、日韩剧资源下载站，提供电驴、磁力、迅雷下载链接，资源更新及时丰富，值得收藏。地址： <a href="http://v.yizhansou.com/" target="_blank" rel="noopener">http://v.yizhansou.com/</a> 127、周读是一个电子书库，提供大量电子书免费下载，大多是mobi、epub、txt、pdf等格式。地址： <a href="http://www.ireadweek.com" target="_blank" rel="noopener">http://www.ireadweek.com</a> 128、PDF书籍下载站： <a href="http://pdfzj.cn/" target="_blank" rel="noopener">http://pdfzj.cn/</a></p><p>129、国外知名电影评价站： <a href="https://www.rottentomatoes.com/" target="_blank" rel="noopener">https://www.rottentomatoes.com/</a>  </p><p>130、冷知识百科： <a href="https://baike.baidu.com/vbaike#" target="_blank" rel="noopener">https://baike.baidu.com/vbaike#</a> 131、人工智能人脸合成站： <a href="https://thispersondoesnotexist.com/" target="_blank" rel="noopener">https://thispersondoesnotexist.com/</a></p><p>132、果汁排行榜主要汇总了各行各业的排行榜网站，算是一个另类的导航站吧。地址： <a href="http://guozhivip.com/rank/" target="_blank" rel="noopener">http://guozhivip.com/rank/</a>  </p><p>133、站长之家：网站热度排行榜： <a href="http://top.chinaz.com/" target="_blank" rel="noopener">http://top.chinaz.com/</a></p><p>136、智能电视网专注分享电视相关软件，包括智能电视软件、直播源、各种盒子修改教程的网站。地址： <a href="https://www.znds.com/" target="_blank" rel="noopener">https://www.znds.com/</a></p><p>137、公益科普站： <a href="http://songshuhui.net/" target="_blank" rel="noopener">http://songshuhui.net/</a>  </p><p>138、软件缘是一个专注分享精品便携软件的网站。地址： <a href="https://www.appcgn.com/" target="_blank" rel="noopener">https://www.appcgn.com/</a>  </p><p>139、kisspng是一个分享透明背景图片的网站，适合制作头像，PS放置图片、海报制作必备。地址： <a href="https://www.kisspng.com/" target="_blank" rel="noopener">https://www.kisspng.com/</a></p><p>140、neets是一个观影社区站，提供影视资源多聚合观看地址，当然也是个网友交流社区。地址： <a href="https://neets.cc/" target="_blank" rel="noopener">https://neets.cc/</a></p><p>143、sq688这个网站只分享无损音乐，里面的音乐提供百度网盘免费下载，值得收藏。地址： <a href="https://www.sq688.com/" target="_blank" rel="noopener">https://www.sq688.com/</a></p><p>145、智能电视市场：当贝市场： <a href="https://m.dangbei.com/" target="_blank" rel="noopener">https://m.dangbei.com/</a>  </p><p>146、蜜蜂市场： <a href="http://www.fengmanginfo.com/beemarket" target="_blank" rel="noopener">http://www.fengmanginfo.com/beemarket</a></p><p>148、学习资料库是一个质量很高的学习资料搜索网站，拥有各种视频教程，学习资料。它免费提供包括：英语资料，考研资料，学习软件，图书书籍，学习课件，学习文摘，学习教材，电子杂志，有声读物，素材资料等等资料。它还提供各种视频教程，包括：计算机类，平面设计，经济管理，社会科学，外语语言，历史地理，文学艺术等等视频教程。学习资料搜索等，地址： <a href="http://www.xuexi111.com/" target="_blank" rel="noopener">http://www.xuexi111.com/</a></p><p>149、大数据导航|全网信息搜索查询： <a href="http://hao.199it.com/" target="_blank" rel="noopener">http://hao.199it.com/</a>  </p><p>150、有趣网址之家收录了上千个有趣的网站，值得收藏，几乎每天都会有新奇的网站收录。地址： <a href="https://youquhome.com/" target="_blank" rel="noopener">https://youquhome.com/</a></p><p>151、键盘鼠标自动作曲网： <a href="https://aidn.jp/mikutap/152、异次元软件世界也是个软件推荐老站了，里面推荐的软件也是五花八门，值得推荐与收藏。地址：" target="_blank" rel="noopener">https://aidn.jp/mikutap/152、异次元软件世界也是个软件推荐老站了，里面推荐的软件也是五花八门，值得推荐与收藏。地址：</a> <a href="https://www.iplaysoft.com/" target="_blank" rel="noopener">https://www.iplaysoft.com/</a>  </p><p>153、萌番组是一个提供新番下载的网站，免费的磁力资源，还有新番时间表。地址： <a href="https://bangumi.moe/" target="_blank" rel="noopener">https://bangumi.moe/</a></p><p>154、米艺字是一个专门生成各种艺术字体的网站，通过输入文字，即可选择生成五花八门的字体图，看免费下载生成的字体图片。地址： <a href="http://www.miyizi.com/" target="_blank" rel="noopener">http://www.miyizi.com/</a></p><p>155、TingFM是一个在线收音机收听站，汇集全国各地电台。地址： <a href="https://tingfm.com/" target="_blank" rel="noopener">https://tingfm.com/</a>  </p><p>156、比格张是一个发现优秀网站资源的分享平台。每天推荐一些国内外更多优秀且高质量的设计、产品、创意、图片、素材、工具资源、社区、技术等主题的网站资源。比格张希望连接更多的网站，发现更大的世界，让上网变得更加精彩。地址： <a href="http://www.bigezhang.com" target="_blank" rel="noopener">http://www.bigezhang.com</a></p><p>157、奇迹秀：<a href="http://www.bigezhang.com" target="_blank" rel="noopener">http://www.bigezhang.com</a></p><p>158、新媒体运营：<a href="http://www.yunyingxuetang.com这个网站主要针对的是自媒体运营人员，里面有一些经验总结，当然你要学到真的东西是需要收费的。大家可以看看免费的内容还是不错的。" target="_blank" rel="noopener">www.yunyingxuetang.com这个网站主要针对的是自媒体运营人员，里面有一些经验总结，当然你要学到真的东西是需要收费的。大家可以看看免费的内容还是不错的。</a></p><p>159、虫网是国内一个著名的摄影爱好者交流区，网站有很多话题，其中的私房Tag，还是很秀色可餐的。地址： <a href="https://tuchong.com/tags/%E7%A7%81%E6%88%BF/" target="_blank" rel="noopener">https://tuchong.com/tags/%E7%A7%81%E6%88%BF/</a></p><p>160、pexels的无版权视频素材提供众多无版权视频素材下载，值得视频制作爱好者收藏。地址： <a href="https://videos.pexels.com" target="_blank" rel="noopener">https://videos.pexels.com</a></p><p>161、猫猫壁纸下载站是一个提供各种尺寸、类型壁纸免费下载的网站，壁纸十分丰富，就是现在不更新了。地址： <a href="http://www.wallcoo.com/" target="_blank" rel="noopener">http://www.wallcoo.com/</a></p><p>162、纪录片天地是一个专门分享国内外纪录片的网站，提供百度网盘或者迅雷下载链接，值得收藏。地址： <a href="http://www.jlpcn.net/" target="_blank" rel="noopener">http://www.jlpcn.net/</a>  </p><p>163、我的小书屋 ： <a href="http://mebook.cc" target="_blank" rel="noopener">http://mebook.cc</a> 内含大量精品书籍，出版图书，网络小说，杂志期刊，漫画书，工具书，应有尽有。一般都会提供两三个书籍格式，方便不同设备阅读。书籍质量很高，全部免费下载，喜欢找书的来这里逛逛，能省好多钱。</p><p>164、视频下载 ：<a href="http://www.videograbber.net/zh有时候是不是想下载优酷、爱奇艺里的视频素材？官方下载出来的.flv格式，.qsv格式，根本没法编辑播放，怎么能下载成mp4格式呢？Video" target="_blank" rel="noopener">www.videograbber.net/zh有时候是不是想下载优酷、爱奇艺里的视频素材？官方下载出来的.flv格式，.qsv格式，根本没法编辑播放，怎么能下载成mp4格式呢？Video</a> Grabber就可以帮你下载优酷、爱奇艺、哔哩哔哩、搜狐等其他网站的视频。只需一键点击，就可以解锁真实的视频文件，而且有多种视频文件可供选择，比如MP4、FLV、3GP、WMV、WEBM、MP3等等。还可以选择高清（HD）视频格式。</p><p>165、茶杯狐 ：<a href="http://www.cupfox.com一个聚合影视资源搜索的网站。首页非常干净、简洁比如我搜索《大人物》，可以找到哪个网站有这个资源的下载，点进去即可直接抵达想要的资源。" target="_blank" rel="noopener">www.cupfox.com一个聚合影视资源搜索的网站。首页非常干净、简洁比如我搜索《大人物》，可以找到哪个网站有这个资源的下载，点进去即可直接抵达想要的资源。</a></p><p>166、我爱搜盘 ：<a href="http://www.52sopan.com一个百度网盘资源搜索引擎，快速搜索海量百度网盘资源中的有效链接,对于无效链接可以提交无效。还支持通过百度网盘的分享链接查询提取密码。之前分享的App，搜百度网盘里的资源，都是调用这些网站，如果你不想安装App，可以直接进入网站搜索资源。" target="_blank" rel="noopener">www.52sopan.com一个百度网盘资源搜索引擎，快速搜索海量百度网盘资源中的有效链接,对于无效链接可以提交无效。还支持通过百度网盘的分享链接查询提取密码。之前分享的App，搜百度网盘里的资源，都是调用这些网站，如果你不想安装App，可以直接进入网站搜索资源。</a></p><p>167、.冷熊简历 ： <a href="http://cv.ftqq.com" target="_blank" rel="noopener">http://cv.ftqq.com</a> 一个基于Markdown编辑器的在线简历制作工具，提供简历编辑，下载，生成pdf。点击内容栏，可自由添加简历的编辑项的模板，包括：联系方式，工作经历，个人信息，能力证明，技能清单几个模块。如果你用不好Word的排版，不妨试试用Markdown编辑器来做一份简历吧。</p><p>168、ebb是一个观看动漫新番的网站，可以在线观看各种最新更新的番剧，支持以图片搜索番剧，可以使用谷歌账号一键登录，登录之后可以查看播放记录。如果想用手机观看，可以下载APP进行观看。网站的整体体验还是相当不错，有少量不影响美观的广告，觉得很有影响的使用广告插件屏蔽。地址： <a href="https://ebb.io/" target="_blank" rel="noopener">https://ebb.io/</a>  </p><p>169、学习资料库 ：<a href="http://www.xuexi111.org质量很高的学习资料网站，随便翻一番都能找到优质的资料，还在上学的一定不要错过这个网站，推荐大家去看看。" target="_blank" rel="noopener">www.xuexi111.org质量很高的学习资料网站，随便翻一番都能找到优质的资料，还在上学的一定不要错过这个网站，推荐大家去看看。</a></p><p>百科全书3600G<br><a href="https://pan.baidu.com/s/11RepUz1Thl3PDYZDTIwpMA#list/path=%2F&amp;parentPath=%2F" target="_blank" rel="noopener">https://pan.baidu.com/s/11RepUz1Thl3PDYZDTIwpMA#list/path=%2F&amp;parentPath=%2F</a></p><p>私藏的十个网站，不看后悔系列，谁用谁知道</p><p>1、MSDN我告诉你（<a href="https://msdn.itellyou.cn/）想重装系统，但是不知道在哪下载系统镜像？这个网站不仅可以免费下载系统镜像，而且版本特别全，最重要的是没有广告，现在很多网上的电脑系统安装完成后，都会给你的电脑安装诸多你并不需要的全家桶，但这个网站上是真正的纯净版系统，一个插件都没有。" target="_blank" rel="noopener">https://msdn.itellyou.cn/）想重装系统，但是不知道在哪下载系统镜像？这个网站不仅可以免费下载系统镜像，而且版本特别全，最重要的是没有广告，现在很多网上的电脑系统安装完成后，都会给你的电脑安装诸多你并不需要的全家桶，但这个网站上是真正的纯净版系统，一个插件都没有。</a></p><p>2、大学生资源网（<a href="http://www.dxzy163.com/）是一个功能超级强大的在线视频网站，里面不仅有从考研到大学到小学的免费课程，还有关于电脑网络、医学视频、历史地理等全面的知识，非常适合在校大学生。包括资格考试的视频也有：工程建筑、考试认证、财会考试、公务员考试、司法考试。这都是花钱都买不到的财富！" target="_blank" rel="noopener">http://www.dxzy163.com/）是一个功能超级强大的在线视频网站，里面不仅有从考研到大学到小学的免费课程，还有关于电脑网络、医学视频、历史地理等全面的知识，非常适合在校大学生。包括资格考试的视频也有：工程建筑、考试认证、财会考试、公务员考试、司法考试。这都是花钱都买不到的财富！</a></p><p>3、自己整理的网站书签（ <a href="http://www.bewindoweb.com/dwg.php" target="_blank" rel="noopener">http://www.bewindoweb.com/dwg.php</a> ）这是实验室一个师兄把他大部分能想到的、有用的网站都整理成了书签，其中包括了写论文必备、程序员通用、数据源下载、在线工具网站、设计素材、办公常用、学生常用…….你能想到的，想不到的有用的网站都收集在这里面了，一共100多个，当你需要学习工作的时候，直接去对应的网站找到你想要的东西，大大提升你的效率。<br>4、在线办公（ <a href="https://uzer.me/" target="_blank" rel="noopener">https://uzer.me/</a> ）不需要安装，就可以在线编辑Office，使用PS、Visio、Xmind、Matlab、Jupyter等等大型软件。还有CAD、WPS、SPSS等，有了它，我们的PC上就不需要装那么多软件了。</p><p>5、全球电视直播（<a href="http://bddn.cn/zb.htm）这是一个丰富眼界的网站，你想看看外国人看的电视内容都是什么吗？这里面统统都有，不仅包含港澳台、美国、西雅图、伦敦、俄罗斯的电视节目这里都有。" target="_blank" rel="noopener">http://bddn.cn/zb.htm）这是一个丰富眼界的网站，你想看看外国人看的电视内容都是什么吗？这里面统统都有，不仅包含港澳台、美国、西雅图、伦敦、俄罗斯的电视节目这里都有。</a></p><p>6、PPT导航网站(<a href="http://www.hippter.com/)这个网站相当一个文件合集，对PPT的资源网站进行分门别类的整理。你见过的，没见过的，它都帮你找到了！解决你所有的素材资源问题！" target="_blank" rel="noopener">http://www.hippter.com/)这个网站相当一个文件合集，对PPT的资源网站进行分门别类的整理。你见过的，没见过的，它都帮你找到了！解决你所有的素材资源问题！</a></p><p>7、格式转换大全（ <a href="https://cn.office-converter.com/" target="_blank" rel="noopener">https://cn.office-converter.com/</a> ）office文档格式、视频格式、音频格式、图片格式、电子书格式…….只有你想不到，没有你找不到，有所的格式都可以在这个网站上转换。你瞅瞅：</p><p>甚至文件压缩也是可以在这个网站上完成的：</p><p>8、geektyper（ <a href="http://geektyper.com/" target="_blank" rel="noopener">http://geektyper.com/</a> ）这个是程序员装B神器，我们看过很多电影，里面的黑客随便敲击两下键盘，然后代码快速滚动，然后蹦出一个进度条，某个特别厉害的系统就被破解了，后者银行的钱就没了。这个网站就可以让你体验一下当黑客的感觉，看下面的图片，是不是似曾相似：<br>9、谷歌插件网（ <a href="http://chromecj.com/" target="_blank" rel="noopener">http://chromecj.com/</a> ）因为一些众所周知的原因，谷歌浏览器上面很多实用的插件都用不了，但是有了这个网站之后，无需科学上网也可以下载chrome浏览器插件。</p><p>10、免费下载电子书（ <a href="http://freecomputerbooks.com/" target="_blank" rel="noopener">http://freecomputerbooks.com/</a> ）这是一个专注于计算机、变成、数学、电子工程、软件工程等技术书籍的网站，所有资源均可免费下载。网站的分类做得非常棒，资源也很丰富，还能看到不少2019年新出版的新书<br>10个网站</p><p>1、开源中国： <a href="https://www.oschina.net/project" target="_blank" rel="noopener">https://www.oschina.net/project</a><br>各种免费的开源资源，分类非常详细，如果有编程需要这个网站必须保存！</p><p>2、掘金 ：<a href="https://juejin.im/" target="_blank" rel="noopener">https://juejin.im/</a><br>一个比知乎更加垂直的编程语言类社区，喜欢纯干货的保存走起~</p><p>3、V2EX <a href="https://www.v2ex.com/" target="_blank" rel="noopener">https://www.v2ex.com/</a><br>一个活跃用户很多的“分享和探索的地方”<br>4、国家广电总局 <a href="http://www.sapprft.gov.cn/sapprft/channels/10564.shtml" target="_blank" rel="noopener">http://www.sapprft.gov.cn/sapprft/channels/10564.shtml</a><br>通过广电的网站，其实可以最快速知道所有影视剧的将拍情况。很多影视大V都是在这里获取的一手信息呦！</p><p>5、国家哲学社会科学文献中心 <a href="http://www.ncpssd.org" target="_blank" rel="noopener">http://www.ncpssd.org</a><br>各种文献期刊可以免费看免费下载。</p><p>6、国家统计数据库 <a href="http://data.stats.gov.cn/" target="_blank" rel="noopener">http://data.stats.gov.cn/</a><br>网站内有全国各种最新最全数据，只有掌握了数据才能战无不胜！</p><p>7、国家大剧院 <a href="http://www.ncpa-classic.com/" target="_blank" rel="noopener">http://www.ncpa-classic.com/</a><br>内有各种免费和付费的高质量音乐，不过比较小众，有需要的自取。</p><p>8、世界数字图书馆 <a href="https://www.wdl.org/zh/" target="_blank" rel="noopener">https://www.wdl.org/zh/</a><br>内有数万年间，全球文献资料，真的爆照牛！如果对历史感兴趣必备，即使没兴趣也可以留着，未来必定有用！</p><p>9、国家标准全文公开系统 <a href="http://www.gb688.cn/bzgk/gb/index" target="_blank" rel="noopener">http://www.gb688.cn/bzgk/gb/index</a><br>内有国家各项标准，比如食品安全和信息安全。</p><p>10、中国裁判文书网 <a href="http://wenshu.court.gov.cn/" target="_blank" rel="noopener">http://wenshu.court.gov.cn/</a><br>这个是法律有关的网站，未来在借钱或者找合作伙伴的话可以先看下对方是否有“案底”然后安心合作。<br>找书<br>个人搜集的找书方案，欢迎大家交流</p><p>大原则</p><p>按以下顺序进行搜索，</p><p>1、搜索引擎<br>2、网盘搜索<br>3、网站进行搜索<br>4、破解APP搜索<br>5、书籍论坛搜索/代找/求书<br>6、电子书QQ群/微信群免费互助求书<br>7、淘宝/咸鱼pdf等付费渠道代找</p><p>以上内容下方都有推荐。</p><p>搜索引擎</p><p>搜狗<br>360<br>必应<br>百度 </p><p>示例：搜索书名 .格式名    例如  活着 pdf    活着 epub<br>书名关键词后加上格式（pdf/epub/mobi/azw3/txt）例如：百年孤独 epub。<br>书名 + filetype/inurl:格式 ；例如：格林童话 filetype:mobi ; 三个火枪手 inurl:pdf。<br>书名 + 提取码 ；例如：万历十五年 提取码。</p><p>2、网盘搜索<br>黑名单<br>任何时候在搜索引擎看到以下网站，连那一秒的点击时间都可以省了。欢迎大家用踊跃举报类似无良网站。</p><p><a href="http://www.yiquhai.com/" target="_blank" rel="noopener">http://www.yiquhai.com/</a><br>易趣海 纯诈骗网站。搜索一些冷门新书时，这个网站往往会跳出来，套路特别真实，会给你显示一个差不多的文件大小，一个度盘链接。然后让你付费显示链接。付费完毕以后，点进去发现资源已被删除，这时候这坏逼网站还会贴心地建议你向上传者留言补档，如果上传者3天之泪未回复，可以直接申请退款云云，当然，最后这些都是套路。</p><p><a href="http://booksk.com/" target="_blank" rel="noopener">http://booksk.com/</a><br>好多书 这个网站的性质没有易趣海那样恶劣。这个网站的核心思路是：以网上收集来的资料来卖钱。因为网站书库做得还挺大，所以经常会出现在搜索结果里。实事求是的讲，咱这讨论的网站大家都懂的，没谁能占领啥道德制高点；并且一个站长/团队希望借自己搜集资料来牟利，也不是罪大恶极的事，毕竟人的确付出了劳动。我把这个网站放到这纯粹出于一个实际的理由：没有必要。基本上那里有的，我上面提到的免费或者半免费的平台一定会有回收站。</p><p><a href="http://www.lingocn.com/" target="_blank" rel="noopener">http://www.lingocn.com/</a><br>好资源 和好多书一个路数，在搜索引擎里看到请直接过滤。</p><p>网盘搜索引擎白名单推荐：如风搜，大力搜等等。。。</p><p>3、网站推荐</p><p>（1）阅读链<br>（2）鸠摩搜书<br>优点：一个专门针对电子书的聚合搜索引擎。制作者很用心，界面清新可爱，聚合了度盘搜索，几大电子书平台搜索结果（包括周读，和上面提到的skebooks等），甚至还包括了喜马拉雅有声书以及淘宝豆瓣等纸质书平台结果，可以说是相当贴心了。<br>缺点：包含的电子书平台还是较少，新一点的书基本上只有skebooks一个结果，很多时候甚至不如谷歌上书名加mobi好用。<br>（3）智奇搜书       <a href="http://kindle.archiew.top/" target="_blank" rel="noopener">http://kindle.archiew.top/</a><br>（4）<a href="http://ebook.name/" target="_blank" rel="noopener">http://ebook.name/</a><br>（5）精品电子书 <a href="http://pan.shudan.vip" target="_blank" rel="noopener">http://pan.shudan.vip</a>            8000本精品电子书下载，每天上午更新10部，建议收藏订阅！ 中文 ★★★★<br>（6）Feedbooks <a href="http://www.feedbooks.com/需要梯子" target="_blank" rel="noopener">http://www.feedbooks.com/需要梯子</a>  无 英语 ★★★★<br>（7）我与书 <a href="http://woyushu.com" target="_blank" rel="noopener">http://woyushu.com</a> 路路通off 中文/英文 ★★★★★<br>（8）<a href="https://hotbaidu.com/" target="_blank" rel="noopener">https://hotbaidu.com/</a> 需要梯子  正版资源  资源多 支持多家网盘<br>（9）书单搜索 <a href="https://www.shudan.vip" target="_blank" rel="noopener">https://www.shudan.vip</a> 网站收录了30多个电子书网站的下载资源，只要搜索一次书名，就可以获得多个网站提供的关于此书的下载地址，让搜书更简单！ 中文 ★★★★<br>（10）书单网  提供多个知名网站的图书检索。<br>（11）<a href="http://www.iread.cf/login" target="_blank" rel="noopener">http://www.iread.cf/login</a>   正版资源  登陆才能下载，直链保存 体验很好<br>（12）<a href="https://ebook.lorefree.com/" target="_blank" rel="noopener">https://ebook.lorefree.com/</a>  去中心化，资源分享搜索平台。<br>（13）三秋书屋   大多是正版资源 新站 小说/套装<br>（14）子午书简   适合kindle用户，是一个站长为分享kindle电子书专门建立的网站，可在线阅读，也可下载epub或mobi格式，亦可推送至kindle。<br>（15）<a href="https://epubw.com" target="_blank" rel="noopener">https://epubw.com</a>  资源全，但很多不是正版  书籍全部带有硬性的网站广告。 百度网盘下载，<br>（16）偶书 ◤集中发布式网站◢  新发现，强烈推荐！！！<br>优点：a，和epubw一样，全站度盘，全站免费。b，和epubw不一样的地方在于，补齐了前者两大短板：PDF扫描书籍与书籍合集。PDF书籍内容还没有深究，但该网站的合集书单做得相当专业，考虑到还全站免费，就更显难能可贵。c，不会像epubw以及一些公众号一样，把网站信息或广告插满书籍的边边角角，除了书名上会带网址，内容是干净的。<br>缺点：风格过于无私，既不挂广告，也不卖代币，也不鼓励用户分享，这样不讲基本法的美好，总让人隐隐不安。希望是我心理阴暗，Longlive obook。<br>（17）Epubw ◤集中发布式网站◢ 这个网站的结果基本上可以通过谷歌搜索：书名 epub，就找出来，都不用去主页搜索了。以新书为主。<br>优点：a，全站免费，全站度盘，简单明了。b，资源覆盖面与更新速度尚可，稍逊于一票RF的门徒，同类型网站里应该是排第一了。c，书籍版本应该是经过站务团队筛选并且转制，质量有保障，比如都有目录与封面。d，全格式（其中pdf是硬转的）<br>缺点：a，有全页面覆盖的点击广告。不过貌似点出来一次关掉以后就不会再跳出来了。b，没有扫描版PDF资源，也没有任何合集资源。c，该站书籍不仅在书籍内容里会插入网站地址，还会在书籍的metadata里作者这一栏插入网站信息，这是相当讨厌的行为。我个人习惯每本书下下来都用calibre把meta信息重新编辑一下，还可以插入一些你个人感兴趣的信息（比如豆瓣评分），这样在设备上管理和查看书籍都方便很多。书库体量：★★★☆☆   书籍质量：★★★★☆   使用体验：★★★★☆<br>（18）书语者<br>（19）Skebooks<br>（20）Iamtxt<br>（21）辣豆瓣<br>（22）周读<br>（23）Sobooks(原Sokindle)<br>（24）丸子书屋<br>（25）Lore Free<br>（26）Iread </p><p>以下网站之间，往往书库大量重合，并且通过百度的书名加扩展名，一般都可以囊括这些网站资源。放在这里，作为参考。这些网站至少可以保障：a，资源真实可信。b，免费用户至少有一天一本的额度。所以在搜索引擎里看到这些网站，大可以一试。<br>EPBU、MOBI格式：<br>【完美文库】(<a href="http://www.wmwk.org/Login.aspx" target="_blank" rel="noopener">http://www.wmwk.org/Login.aspx</a>) 可在线阅读及下载，可下载txt,mobi,epub格式。<br>【COAY】 (<a href="http://coay.com/" target="_blank" rel="noopener">http://coay.com/</a>) 提供ePub、mobi格式电子书下载，支持iBooks，Kindle，Stanza等阅读器。<br>【EBOOKEE】(<a href="http://bbs.ebookee.net/)每周推荐不同书单供下载。" target="_blank" rel="noopener">http://bbs.ebookee.net/)每周推荐不同书单供下载。</a><br>【掌上书苑】 (<a href="http://www.cnepub.com/)下载电子书需要书币，提供epub和mobi格式下载，还可以推送到kindle。" target="_blank" rel="noopener">http://www.cnepub.com/)下载电子书需要书币，提供epub和mobi格式下载，还可以推送到kindle。</a><br>【书仓网】 (<a href="http://shucang.com/" target="_blank" rel="noopener">http://shucang.com/</a>) 可在线阅读，提供epub,mobi,pdf等多种格式下载。<br>【好读网站】 (<a href="http://haodoo.net/" target="_blank" rel="noopener">http://haodoo.net/</a>) 可下载的格式有：updb，pdb，prc，epub。<br>【威锋电子书分享】 (<a href="http://bbs.weiphone.com/thread-htm-fid-224.html/" target="_blank" rel="noopener">http://bbs.weiphone.com/thread-htm-fid-224.html/</a>) 威锋论坛多为epub和pdf格式。<br>【福尔书库】 (<a href="http://forebook.mobi/" target="_blank" rel="noopener">http://forebook.mobi/</a>) 福尔书库，提供多种格式下载，包括mobi、epub等，可推送到kindle。</p><p>PDF、CHM格式：<br>七彩英语 ：提供英文原版电子书下载，大多为pdf格式，注意有解压密码。<br>原版图书下载： 英文图书杂志，以计算机及经管励志类书籍为主。<br>皮皮书屋 ： 收集的书籍专攻计算机科学以及相关延伸学科。大部分是pdf和chm格式。<br>西东网 ： 学习资料共享，主要提供教育方面的电子书及其他资料，大多为pdf格式。<br>library.nu：著名英文电子书下载网站，书籍大部分是pdf格式。注意部分文件下载后需要解压密码。<br>feedbooks ：如果想下载免费图书可点击“Free Public Domain Books”浏览或直接搜索。 </p><p>4、论坛<br>kindle百度贴吧<br><a href="http://www.iread.cf/login" target="_blank" rel="noopener">http://www.iread.cf/login</a><br>readfree<br><a href="https://openresearch-repository.anu.edu.au/" target="_blank" rel="noopener">https://openresearch-repository.anu.edu.au/</a>)</p><p>5、其他<br>（1）国外很有名的古藤堡电子书共享计划： 英文书籍为主，也有部分中文书籍，繁体。<br>古登堡计划的中文书籍<br>（2）爱问共享资料 新浪旗下的在线资料分享站，电子书资源丰富，可以按格式搜索。注册即赠送积分，部分电子书下载需要积分，也有很多电子书是骗下载赚积分的，可能只是几个章节，可以先看评论再选择是否下载。搜索 kindle 电子书的时候可以用“6 寸”、“mobi”这样的关键词。<br>（3）电驴大全 懒人就到这里批量下载吧<br>（4）Kindle电子书分享网<br>（5）万千合集站<br>（6）脚本之家<br>（7）PDF之家<br>（8）itbook<br>（9）Library Genesis：英文  免费且高质量的英文电子书<br>（10）libgen：知识共享界的云中仙人。08年由一群俄罗斯科学家创办，至今10年来，书库一直稳步增长，从外文书籍到学术文章，应有尽有。近些年也有很多国内的分享者在上面分享中文资料，但与庞大细密的西文书库相比，当前中文书库体量还是比较捉襟见肘。<br>（11）Bookzz电子书库：另一个英文书籍巨库。英文书籍的书库体量与libgen等量齐观，近些年甚至有赶超的趋势。</p><p>公信信息<br>—————————–干货开始——————————-<br>企业类</p><p>1、全国企业信用信息公示系统：<a href="http://www.gsxt.gov.cn/index.html" target="_blank" rel="noopener">http://www.gsxt.gov.cn/index.html</a></p><p>注释：作生意找工作不知道该公司靠不靠谱，可以上这里查询公司是不是正规公司，信用情况如何。   </p><pre><code>查询法人，股东等资料，免于被骗  【做生意必备】</code></pre><p>2、国家药品监督管理局：<a href="http://www.nmpa.gov.cn/" target="_blank" rel="noopener">http://www.nmpa.gov.cn/</a></p><pre><code>注释：官网查询，凡是没有通过国家药监局备案的产品都是三无产品！           药品、医疗器械、化妆品 【采购必备】</code></pre><p>​      </p><p>个人类</p><p>1、个人征信中心：<a href="https://ipcrs.pbccrc.org.cn" target="_blank" rel="noopener">https://ipcrs.pbccrc.org.cn</a></p><pre><code>注释：这个是用来查询自己的个人信用记录，违约、延迟还款和查询是否存在不良记录，信用不足会影响银行贷款等行为！（银行一般规定：一个月不要查询超过三次）           个人初次使用，注册后可查询生成自己的信用情况，一般申请后24小时会生成征信报告。如非必要请不要乱查，会影响贷款、办理信息卡等。           （银行或者贷款公司，需经你本人签名，才能以机构名义查询）【 个人必备】</code></pre><p>2、中国执行信息公开网：<a href="http://zxgk.court.gov.cn" target="_blank" rel="noopener">http://zxgk.court.gov.cn</a></p><pre><code>通过本网，可以查询被查询人，具体有什么案子或者是有什么东西正在被执行</code></pre><p>注释：输入姓名或身份证号就可以查到一个人的失信记录，做生意、借钱、重大交易前可查看对方是否老赖或有纠纷等情况。</p><p>3、最高人民法院中国裁判文书网：<a href="http://wenshu.court.gov.cn" target="_blank" rel="noopener">http://wenshu.court.gov.cn</a></p><pre><code>根据《最高人民法院关于人民法院在互联网公布裁判文书的规定》,自2014年1月1日起,除涉及国家秘密、个人隐私的、未成年人犯罪、调解结案以外的判决文书,各法院判决文书均应在该网站上公布。因该网站为“裁判文书网”,故仅适用于已届判决阶段的案件。</code></pre><p>注释：输入你要查询的人物姓名，检索对方的名字，刑事案件，个人经济纠纷，债权债务信息一目了然！</p><p>自媒体工具<br>视频类工具<br>1、V视频助手解析全网各大视频下载的一个平台，支持下载阳光宽频网、快手、微信、百度视频、梨视频、腾讯视频、秒拍视频、微博 视频、今日头条、西瓜视频等。官方网址：<a href="http://v.ranks.xin/" target="_blank" rel="noopener">http://v.ranks.xin/</a><br>2、Savefrom解析YouTube、Facebook等各大视频下载平台，对于很多想下载视频的朋友来说是必不可少的一件工具，只要把链 接输入进去，然后点击解析，就很容易把视频下载下来了。官方网址：<a href="https://en.savefrom.net/" target="_blank" rel="noopener">https://en.savefrom.net/</a><br>3、ClipconverterClip Converter是一个免费的在线媒体转换应用程序，它使您可以重新录制，转换和下载几乎所有音频或视频URL为通用格式。当前支持的服务：YouTube，Vimeo，Facebook Video等。官网地址：<a href="https://www.clipconverter.cc/" target="_blank" rel="noopener">https://www.clipconverter.cc/</a><br>4、NEWCGER-视频素材|AE模板免费下载站官网地址：<a href="https://www.newcger.com/shipinsucai/list_4.html" target="_blank" rel="noopener">https://www.newcger.com/shipinsucai/list_4.html</a><br>5、FLVCD-硕鼠|FLV下载|视频下载官网地址：<a href="http://www.flvcd.com" target="_blank" rel="noopener">http://www.flvcd.com</a><br>图片类工具   </p><p>1、Soogif专门做动态图的，不仅可以做，而且还有非常强大的图库，能够根据你的需求来按照关键词搜索出动态图，很实用的一个工具。官方网址：<a href="http://www.soogif.com/" target="_blank" rel="noopener">http://www.soogif.com/</a><br>文库类工具               </p><p>1、嗨文库可以免费现在百度文库的非常好用的工具。官方网址：<a href="http://www.hiwenku.com/" target="_blank" rel="noopener">http://www.hiwenku.com/</a><br>2、文图一款可以快速制作数据化报告分析的工具，只需要把数据输入进去，挑选模板，就能够一键制作出精美的数据化报告分析图，堪称数据神器，非常适合装逼。官方网址：<a href="https://wentu.io/" target="_blank" rel="noopener">https://wentu.io/</a><br>3、P大叔这个软件对于一些爱学习的朋友来说是非常实用的，因为它有一个强大的功能，可以导出公众号的所有历史文章，保存起来更加方便学习。官方网址：<a href="http://pdfuncle.com/" target="_blank" rel="noopener">http://pdfuncle.com/</a><br>自媒体运营工具<br>卡思数据-视频内容行业风向标地址：<a href="https://www.caasdata.com" target="_blank" rel="noopener">https://www.caasdata.com</a><br>新榜-内容产业服务平台地址：<a href="https://www.newrank.cn" target="_blank" rel="noopener">https://www.newrank.cn</a><br>微信指数：<a href="https://data.newrank.cn/trend.html" target="_blank" rel="noopener">https://data.newrank.cn/trend.html</a><br>头条指数：<a href="https://index.toutiao.com" target="_blank" rel="noopener">https://index.toutiao.com</a><br>抖参谋-抖音生意参谋，短视频电商必备工具地址：<a href="https://dcm.doudada.com" target="_blank" rel="noopener">https://dcm.doudada.com</a><br>草料二维码-提供二维码生成，美化，印制，管理，统计等服务，帮助企业通过二维码展示信息并采集线下数据，提升营销和管理效率。地址：<a href="https://cli.im" target="_blank" rel="noopener">https://cli.im</a><br>社群管理工具<br>WeTool - 微信社群管理工具，高效稳定助力社群运营地址：<a href="https://www.wxb.com/wetool" target="_blank" rel="noopener">https://www.wxb.com/wetool</a><br>爆汁裂变-猎鲸微信营销系统，微信多账号管理工具地址：<a href="http://www.baozhi666.com/" target="_blank" rel="noopener">http://www.baozhi666.com/</a><br>SEO相关工具<br>各大搜索引擎提交入口地址：<a href="http://www.webmasterhome.cn/seo/addurl.asp" target="_blank" rel="noopener">http://www.webmasterhome.cn/seo/addurl.asp</a><br>监控宝-24小时监控网站运行状况地址：<a href="https://www.jiankongbao.com安全宝-网站安全专家|防黑客、抗DDos、网站加速地址：http://www.anquanbao.com免费网站地图制作工具——Sitemap" target="_blank" rel="noopener">https://www.jiankongbao.com安全宝-网站安全专家|防黑客、抗DDos、网站加速地址：http://www.anquanbao.com免费网站地图制作工具——Sitemap</a> X地址：<a href="http://cn.sitemapx.com" target="_blank" rel="noopener">http://cn.sitemapx.com</a><br>RankNow-百度推广排位助手，360调价软件，搜狗竞价助手地址：<a href="http://www.ranknowcn.comMOZ-全网外链查询地址：https://moz.com/link-explorer数据监测类工具" target="_blank" rel="noopener">http://www.ranknowcn.comMOZ-全网外链查询地址：https://moz.com/link-explorer数据监测类工具</a><br>1、百度统计免费、技术相对成熟，与百度SEM/信息流推广完美结合。官网：<a href="https://tongji.baidu.com" target="_blank" rel="noopener">https://tongji.baidu.com</a><br>2、Google Analytics（GA）免费/付费，不仅仅是数据统计，更是个数据分析工具，各类访问路径、直接转化、辅助转化等数据足够满足你。官网：<a href="http://www.google.cn/analytics/" target="_blank" rel="noopener">http://www.google.cn/analytics/</a><br>3、友盟+免费/付费，数据统计类产品比较成熟全面。官网：<a href="http://www.umeng.com/" target="_blank" rel="noopener">http://www.umeng.com/</a><br>信息流广告跟踪工具<br>1、信息流雷达对信息流广告追踪，提供广告的热度、行业、平台等多维度 的TOP 排名统计，热点广告数据分析等功能。官网：<a href="http://feedsradar.ad1024.com/" target="_blank" rel="noopener">http://feedsradar.ad1024.com/</a><br>2、App Growing移动营销数据分析平台，除了国内主流平台的信息流广告追踪功能外，另外可实现App Store实时榜单和关键词排名查询（ASO）和苹果搜索广告投放监测（ASM）。官网：<a href="https://appgrowing.cn/" target="_blank" rel="noopener">https://appgrowing.cn/</a><br>3、Socialbeta偏向营销全案，没有细分信息流广告，对于需要做全案的同学来说，可以参考。官网：<a href="http://socialbeta.com/" target="_blank" rel="noopener">http://socialbeta.com/</a><br>APP推广监测工具               </p><p>Android监测国内的统计工具：友盟、腾讯移动统计、talkingdata、avodcloud、dataeye等。国外的统计工具：mixpanel、flurry、localytics、google analytics for mobile等。<br>IOS监测第三方广告监测平台：umtrack、appcpa、mobile app tracking、Tapstream等。广告平台自带广告监测工具：Inmobi AdTracker、google adwords等。<br>微信大数据分析工具               </p><p>清博大数据：<a href="http://www.gsdata.cn神策数据：https://www.sensorsdata.cn/新浪舆情" target="_blank" rel="noopener">http://www.gsdata.cn神策数据：https://www.sensorsdata.cn/新浪舆情</a><br>数据可视化工具               </p><p>百度ECharts：<a href="http://echarts.baidu.com/图表秀：http://www.tubiaoxiu.com/数据观：http://shujuguan.cn/BDP个人版：https://me.bdp.cn/home.html魔镜：http://www.moojnn.com/" target="_blank" rel="noopener">http://echarts.baidu.com/图表秀：http://www.tubiaoxiu.com/数据观：http://shujuguan.cn/BDP个人版：https://me.bdp.cn/home.html魔镜：http://www.moojnn.com/</a><br>词频分析工具               </p><p>Rost：<a href="http://dl.pconline.com.cn/图悦：http://www.picdata.cn/语义分析系统：http://ictclas.nlpir.org/nlpir/Tagul：https://tagul.com/腾讯文智：http://nlp.qq.com/semantic.cgi" target="_blank" rel="noopener">http://dl.pconline.com.cn/图悦：http://www.picdata.cn/语义分析系统：http://ictclas.nlpir.org/nlpir/Tagul：https://tagul.com/腾讯文智：http://nlp.qq.com/semantic.cgi</a><br>互联网趋势分析工具               </p><p>百度指数：<a href="http://index.baidu.com/微博指数：http://data.weibo.com/index好搜指数：http://index.so.com/#index搜狗指数：http://zhishu.sogou.com/百度司南：http://sinan.baidu.com" target="_blank" rel="noopener">http://index.baidu.com/微博指数：http://data.weibo.com/index好搜指数：http://index.so.com/#index搜狗指数：http://zhishu.sogou.com/百度司南：http://sinan.baidu.com</a><br>在线调查工具<br>腾讯问卷调查：<a href="http://wj.qq.com/金数据：https://jinshuju.net/麦客：http://www.mikecrm.com/问卷星：http://www.sojump.com/调查派：http://www.diaochapai.com/问卷网：http://www.wenjuan.com/" target="_blank" rel="noopener">http://wj.qq.com/金数据：https://jinshuju.net/麦客：http://www.mikecrm.com/问卷星：http://www.sojump.com/调查派：http://www.diaochapai.com/问卷网：http://www.wenjuan.com/</a><br>PPT模板工具<br>我图网：<a href="http://www.ooopic.com/pptmuban/51PPT模板：http://www.51pptmoban.com/ppt/第1PPT：http://www.1ppt.com/站长素材：http://sc.chinaz.com/ppt/office" target="_blank" rel="noopener">http://www.ooopic.com/pptmuban/51PPT模板：http://www.51pptmoban.com/ppt/第1PPT：http://www.1ppt.com/站长素材：http://sc.chinaz.com/ppt/office</a> PPT：<a href="http://office.mmais.com.cn/List.shtml?cat=PPT稻壳儿：http://www.docer.com/" target="_blank" rel="noopener">http://office.mmais.com.cn/List.shtml?cat=PPT稻壳儿：http://www.docer.com/</a><br>淘宝客必备工具合集               </p><p>代{过}{滤}理APP工具：1、花生日记APP查询优惠券，商学院（新手教程，推广技巧）、花粉社区（各种可以分享裂变的素材）、新人免单等。<br>2、好省APP可用自己联盟账号，变现形式丰富（含淘宝、拼多多、京东、唯品会、苏宁美团等100多个平台返利）、APP内置云社群发单及个人号返利功能。<br>3、更省APP新用户注册后，不需要让用户手动做淘宝授权，可自动 授权的，可提高用户使用的成功率，据更省负责人介绍，这个体验 在业内是独家的。<br>4、美逛APP不抽佣，重裂变，平台免单补贴天天有，已实现 APP+ 小程序+微信工具（机器人发单发圈）矩阵化推广，18 年导购交易额破百亿。<br>5、赚生活APP赚生活 APP 最大的优点是， 一个不打自家品牌的代{过}{滤}理 APP，淘客把用户放在上面，能放心些。<br>6、美赚 · 淘客系统全平台打通体系，除了 APP，还能用自己的公众号和小 程序，打造自己的私域流量。<br>7、芬香APP芬香不仅是一个自购省钱的社交电商平台，更重要的是它允许注册用户无需付费情况下，继续升级为超级会员实现分享赚钱。</p><p>社群代{过}{滤}理工具<br>1、坚果<br>业内较早期开发淘客代{过}{滤}理工具商之一，在代{过}{滤}理微信云发 单方式很有自己的经验。<br>2、主推<br>配置出 cms 网站，和共享 app 有差不多的返利、代{过}{滤}理、分销功能，可以和个人号、社群、公众号、返利机器人结合使用，支持升级独立自营app。<br>3、领航<br>技术开发能力强，迭代速度快，专注社群精推，代{过}{滤}理可以自主云发单。</p><p>发单工具<br>1、实惠猪<br>实惠猪是专为QQ群、微信群淘客量身打造的一款专业QQ群、微信群淘客软件,是目前行业内使用人数最多,功能最强大的软件，集合了各种QQ群、微信群淘客所需要的功能，彻底解放QQ群、微信群淘客的双手。<br>2、蒲公英<br>靠谱，稳定。缺点是上手比较难，不过软件开发者“格式化”可以远程协助，帮你设置好。<br>3、美丽折<br>功能强大，有几十种功能，软件发单功能上有一个突出亮点，每个发出的商品中转页中免费匹配了CMS 和微信后台多号发单。<br>4、互力<br>互力抓住了16年底，淘客从扣扣群时代过渡到微信群时代的机会，成为了微信发单工具中的佼佼者。<br>5、千语<br>千语淘客助手是为大家提供淘客qq群发软件插件微信功能以及大淘客工具推广QQ群定时群发，一个老牌的发单工具。<br>商品库<br>1、大淘客大淘客官网：<a href="http://www.dataoke.com" target="_blank" rel="noopener">www.dataoke.com</a><br>2、好单库好单库官网：<a href="http://www.haodanku.com" target="_blank" rel="noopener">www.haodanku.com</a></p><p>其它更多实用工具合集</p><p>1、reg007有时候你想知道你都注册过哪些网站来着，忘记保存密码下一次登录的时候都不知道用什么邮箱注册的，那么这个平台就可以帮到你，能够快速的找到你经常用的手机号和邮箱注册过的网站，让你不用为忘记密码而烦恼，直接申诉就可以找到账号了。官方网址：<a href="https://www.reg007.com/" target="_blank" rel="noopener">https://www.reg007.com/</a><br>2、传送门这个网站可以帮助你快速了解各个领域，现阶段都在讨论哪一些话题，能够帮助你第一时间就可以掌握各个行业的动态，这个是互联网创业人必备的一个工具，超级实用，你关注哪个行业，就直接按照分类就可以找到哪个行业文章了。官方网址：<a href="http://chuansong.me/" target="_blank" rel="noopener">http://chuansong.me/</a><br>3、陶大师-淘宝直通车TOP20W关键词表下载地址：<a href="http://www.taodashi.cn/TOP20W/" target="_blank" rel="noopener">http://www.taodashi.cn/TOP20W/</a><br>4、七麦数据（原ASO100）-专业移动推广数据分析平台地址：<a href="https://www.qimai.cn/" target="_blank" rel="noopener">https://www.qimai.cn/</a><br>5、西刺免费代{过}{滤}理IP-国内外代{过}{滤}理IP地址：<a href="https://www.xicidaili.com/" target="_blank" rel="noopener">https://www.xicidaili.com/</a><br>6、电子书转换器-将PDF和其它格式转换成电子书地址：<a href="https://toepub.com" target="_blank" rel="noopener">https://toepub.com</a><br>7、imagerecycle-网站的图像和PDF压缩地址：<a href="https://www.imagerecycle.com/zh-cn/" target="_blank" rel="noopener">https://www.imagerecycle.com/zh-cn/</a><br>8、云眼-网站AB测试工具地址：<a href="https://www.eyeofcloud.com/" target="_blank" rel="noopener">https://www.eyeofcloud.com/</a></p><p>===========================================================<br>第一期软件推荐<br>买了新电脑的小伙伴们，刚一打开电脑，发现“234X浏览器、234X输入法、234X网址导航…”，这些都是电脑卖家注册234X广告联盟，安装234X全家桶赚钱的，导致一会弹出一个新闻迷你页，一会弹出一个购物指南，特别烦！这里先推荐一个软件，强力卸载并删除附属目录、残留文件、残留注册表。<br>软件：Geek<br>推荐指数：★★★★★<br>详     情：分为专业版[收费]和非专业版（其实相对于普通用户根本用不到专业版），非专业版功能强大支持强制卸载，卸载自动搜索软件根目录，注册表并删除其残留文件。<br>  下载链接：<a href="http://down-ww3.newasp.net/pcdown/soft/xk/UninstallToo.rar" target="_blank" rel="noopener">http://down-ww3.newasp.net/pcdown/soft/xk/UninstallToo.rar</a></p><p>卸载完了那些不良全家桶软件，就该下载一些安全软件了（虽然Windows有自带的Defender但还是不习惯，功能又少），此刻我推荐的软件有火绒安全、腾讯电脑管家。</p><p>软件：火绒安全<br>推荐指数：★★★☆☆<br>详     情：没有强大的修复工具箱，一些电脑不出声等小问题需要百度搜索解决，其次他们官网的口号是：“强悍、轻巧，干净”，说实话他过于干净了，没有丰富的工具集，让它很难适合广大家庭的需求。其次面对一些不是很符合国情的木马和其它病毒，火绒就处于完全两眼摸黑的状态。<br>  下载链接：<a href="https://down5.huorong.cn/sysdiag-full-5.0.37.8.exe" target="_blank" rel="noopener">https://down5.huorong.cn/sysdiag-full-5.0.37.8.exe</a>    </p><p>软件：腾讯电脑管家<br>推荐指数：★★★★☆<br>详     情：首先拥有强大的工具集，例如：弹窗拦截、DNS优选、路由器Wi-Fi管家……，其次是大众拥有的QQ&amp;微信登录，很方便。腾讯电脑管家的病毒查杀率也是很高的。<br>  下载链接：<a href="https://pm.myapp.com/invc/xfspeed/qqpcmgr/download/QQPCDownload1602.exe" target="_blank" rel="noopener">https://pm.myapp.com/invc/xfspeed/qqpcmgr/download/QQPCDownload1602.exe</a></p><p>安装完杀毒软件，就开始选择媒体播放软件了，我为您提供以下几款！</p><p>软件：PotPlayer<br>推荐指数：★★★★★<br>详     情：Potplayer是一款功能强大的媒体播放器，有强大的内置解码器，可以自制或者下载好看的材质包（女生福音<br>  下载链接：<a href="https://potplayer.en.softonic.com/" target="_blank" rel="noopener">https://potplayer.en.softonic.com/</a></p><p>软件：VLC media player<br>推荐指数：★★★★☆<br>详     情：也是一款功能强大的媒体播放器，还可以将m3u8索引文件转化为ts切片文件（具体：百度经验<a href="https://jingyan.baidu.com/article/49ad8bce8c588b5834d8faee.html），非常方便，但四星的主要原因还是UI太丑了（手动滑稽" target="_blank" rel="noopener">https://jingyan.baidu.com/article/49ad8bce8c588b5834d8faee.html），非常方便，但四星的主要原因还是UI太丑了（手动滑稽</a><br>  下载链接：<a href="https://www.videolan.org/" target="_blank" rel="noopener">https://www.videolan.org/</a></p><p>媒体播放器说完了，再说说图片查看器有哪些好的，现在网络上好的图片查看器真的几乎没有，主要好的查看器都有广告，例如234X看图王功能强大却生错了地方…<br>软件：2345看图王<br>推荐指数：★★★☆☆<br>详     情：功能是真的强大，如果没有广告，我会选择不屏蔽它的证书继续用它，关键广告真的烦得要死，还会给你偷偷安装234X的软件，受不了广告的可以选择跳过这个软件，其实论坛上有它的去广告版本，你们可以自行搜索。我就不放链接了！<br>  下载链接：<a href="http://dl.2345.com/pic/2345pic_v9.2.exe" target="_blank" rel="noopener">http://dl.2345.com/pic/2345pic_v9.2.exe</a></p><p>软件：极速看图<br>推荐指数：★★★★★<br>详     情：功能不算太强大，但也可以，关键没有广告，支持svg、psd等格式的查看，当前我用的就是这个了。<br>  下载链接：<a href="http://download.52pcfree.com/Fastpic_Setup20191217.exe" target="_blank" rel="noopener">http://download.52pcfree.com/Fastpic_Setup20191217.exe</a></p><p>接下来是浏览器了<br>软件：GoogleChrome<br>推荐指数：★★★★★<br>详     情：一、没广告；二、好内核；三、速度快。<br>  下载链接：<a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">https://www.google.cn/intl/zh-CN/chrome/</a></p><p>软件：火狐浏览器<br>推荐指数：★★★★★<br>详     情：不用说了吧，反正就很好（任性<br>  下载链接：<a href="https://download-ssl.firefox.com.cn/releases-sha2/stub/official/zh-CN/Firefox-latest.exe" target="_blank" rel="noopener">https://download-ssl.firefox.com.cn/releases-sha2/stub/official/zh-CN/Firefox-latest.exe</a>       </p><p>软件：Microsoft Edge（新版）<br>推荐指数：★★★★★<br>详     情：B站视频链接av87279039<br>  下载链接：<a href="https://www.microsoft.com/en-us/edge" target="_blank" rel="noopener">https://www.microsoft.com/en-us/edge</a></p><p>干货软件第二期预告：下期分享好用的网站</p><p>*经过上一期的帖子评论发现上次还是有一点缺陷，这次不会再犯了！</p><p>注意本帖仅提供软件的正版下载链接，破解版请自行论坛或百度搜索！</p><p>Notepad++</p><p>★★★★★</p><p>这是一款代码编辑器，支持编辑各种语言（HTML、C++、Java、PHP……）支持16种国家的编码模式，支持安装各种拓展插件，来丰富编辑器功能，支持生成MD5、sha-256；支持录制宏脚本。本人则用它代替系统记事本来使用。  </p><p>下载链接</p><p><a href="https://notepad-plus.softonic.cn/" target="_blank" rel="noopener">https://notepad-plus.softonic.cn/</a></p><hr><p>Visual Studio Code</p><p>★★★★★</p><p>这也是一款代码编辑器，支持各种语言各种编码模式（需要软件内搜索安装对应的解码器），支持中文（也需要安装语言），重要一点UI很好看。</p><p>下载链接</p><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">https://code.visualstudio.com/Download</a></p><hr><p>Adobe Dreamweaver</p><p>★★★★★</p><p>这还是一款代码编辑器，不过仅支持编辑HTML、css、JavaScript等用于web开发的语言，功能强大，支持实时视图查看编辑，美中不足的是有时候代码提示会不显示，需要删除前段再打出一个字母才会再次提示。非常适合建站小白使用的web开发编辑器。</p><p>下载链接：</p><p><a href="https://www.adobe.com/cn/products/dreamweaver.html" target="_blank" rel="noopener">https://www.adobe.com/cn/products/dreamweaver.html</a></p><hr><p>ApowerREC</p><p>★★★★★</p><p>这是一款录屏软件，拥有强大的功能，支持10种视频录制格式（包括GIF），6种音频录制格式，支持5种图片格式，还能设置鼠标点击效果和鼠标区域高光显示，支持录制分割等功能，支持中文。这里不推荐bandicam的主要原因是有时候视频无法用PR打开。</p><p>下载链接</p><p><a href="https://www.apowersoft.cn/record-all-screen" target="_blank" rel="noopener">https://www.apowersoft.cn/record-all-screen</a></p><hr><p>Acrobat Reader DC</p><p>★★★★★</p><p>这是一款PDF查看器，专为查看PDF开发的，比一般的图片查看器查看PDF的功能要丰富很多，有24种功能，包括：富媒体、优化PDF、比较文件、动作向导、证书、JavaScript……</p><p>下载链接：</p><p><a href="https://acrobat.adobe.com/cn/zh-Hans/acrobat/pdf-reader.html" target="_blank" rel="noopener">https://acrobat.adobe.com/cn/zh-Hans/acrobat/pdf-reader.html</a></p><hr><p>Portrait+<br>★★★★★<br>这是一款自动人像美白、美妆、祛斑磨皮的软件，功能丰富，强大。</p><p>下载链接：软件已下架但提供官网查询，其他网站提供下载</p><p><a href="https://arcsoft-portrait.updatestar.com/en/edit" target="_blank" rel="noopener">https://arcsoft-portrait.updatestar.com/en/edit</a></p><hr><p>Adobe全家桶</p><p>★★★★☆</p><p>这个就不用介绍了吧！包含Photoshop、After Effects、Premiere Pro、Illustrator、Audition……，四星主要原因是软件绑定Adobe云，无法卸载Adobe云。</p><p>下载链接：</p><p><a href="https://www.adobe.com/cn/creativecloud/catalog/desktop.html" target="_blank" rel="noopener">https://www.adobe.com/cn/creativecloud/catalog/desktop.html</a></p><hr><p>小丸工具箱</p><p>★★★★☆</p><p>小丸工具箱是一款用于处理音视频等多媒体文件的软件。是一款x264、ffmpeg等命令行程序的图形界面。功能：1.高质量的H264+AAC视频压制2.ASS/SRT字幕内嵌到视频3.AAC/WAV/FLAC/ALAC音频转换4.MP4/MKV/FLV的无损抽取和封装四星主要原因UI真的很难看！</p><p>下载链接：</p><p><a href="https://maruko.appinn.me/" target="_blank" rel="noopener">https://maruko.appinn.me/</a></p><hr><p>Bandizip</p><p>★★★★★</p><p>这是一款解压缩软件，拥有美观的UI丰富的功能，关键还没有广告。非常推荐！</p><p>下载链接：</p><p><a href="http://www.bandizip.com/" target="_blank" rel="noopener">http://www.bandizip.com/</a></p><hr><p>CCleaner</p><p>★★★★★</p><p>是一款系统清理软件，拥有专业版[收费]和非专业版，普通用户非专业版就足够了，它支持清理无效注册表、缺失DLL、查询软件更新、磁盘分析、重复文件查找、系统还原、驱动器擦除、Cookie查看并清除……非常好用。</p><p>下载链接：</p><p><a href="https://www.ccleaner.com/download" target="_blank" rel="noopener">https://www.ccleaner.com/download</a></p><hr><p>MorphVOX Pro</p><p>★★★★☆</p><p>是一款变声器软件，变声效果很好（如果不好电流声等是你的麦克风的问题），吃鸡假扮小姐姐更方便呦，建议麦克风不好的别用，论坛有破解版我就不放链接了。四星主要原因是UI和程序有时候编码错误，但不影响使用！</p><p>下载链接：</p><p><a href="http://www.bianyindashi.com/download" target="_blank" rel="noopener">http://www.bianyindashi.com/download</a></p><p>软件继续<br>1.ColouriseSG-老照片彩化神器</p><p>可以把家里的老照片拿出来了！把黑白照片彩化，看看当时的场景。这个过程还是很感触的，有老照片的人一定要试试。</p><p>2.幕享-免费无线投屏神器</p><p>投屏软件大家多多少少都用过，但是能投手机、电脑声音还功能完全免费，我反正是遇到的第一个。像手机投电脑啊，电脑投电脑啊，电脑投手机都是完全没问题，高清还音画同步<del>爱了爱了</del></p><p>3.Guimp- 世界上最小的网站</p><p>你们能看见它吗？这真的是世界上最小的网站，不过网站虽小却五脏俱全，甚至还可以在里面玩游戏，就看你视力行不行了~</p><p>4.LightPDF- 免费处理PDF文件网站</p><p>现在大部分PDF工具都是收费的，所以给大家推荐一个免费无广的网站，一个被论文折磨过，以及修改过无数封简历的人，真诚推荐大家一定要收藏一个这样的工具，你总有一天会来谢我的。</p><p>5.Color Hunt- 色彩搭配网站<br>对于色彩搭配弱的而言，这个网站非常值得借鉴，哪些颜色配在一起合适，舒服，一目了然。</p><p>6.FakeupDate- 摸鱼神器</p><p>工作想摸鱼却又害怕被发现？这个摸鱼神器还不快快Get？用假的系统升级界面欺骗同事和上级吧，摸鱼的一把好手。嘻嘻。</p><p>好啦，以上就是这次的分享，如果大家喜欢这种资源的话，多多评分鸭<del>也可以留言告诉我还想要哪方面的资源，我的收藏夹里还有很多宝贝嘻嘻嘻</del></p><p>分隔线： </p><p>补一下第二波</p><p>7.稿定设计-最强在线PS工具</p><p>这是一个完全免费的在线PS工具，是稿定设计联合 Photopea 打造的最强在线 PS 工具。简单总结几个优点：操作简单，无需下载，可以轻松实现抠图等操作。</p><p>8.医学微视-权威科普医院知识</p><p>这是一个以视频的方式分享各种医学知识的良心网站，由中国医学科学院健康科普研究中心监制，不提供销售任何产品，无需担心恰饭！用短视频的方式让你轻松了解医学知识和各种疾病。</p><p>9.考试酷-自学神器<br>这个网站，集齐了从小学到大学各个地方的试卷，快收藏起来以后虐小孩啊哈哈哈哈<del>除此之外，各种职业考试试卷也是有的喔</del></p><p>10.搞定杂乱像素-拯救糊图神器</p><p>有的时候我们好不容易找到一张图/表情包，结果糊到没眼看，这个可以简单快速的帮你修复图片，效果堪称磨皮啊哈哈。</p><p>11.Photomosh-在线添加图片特效</p><p>这个厉害了，里面有超多酷炫的特效可以随意添加和自由组合<del>右侧那一排都是，每个都好玩</del>还可以帮你录制成gif动图！</p><p>8.png (429.97 KB, 下载次数: 0)<br>下载附件  保存到相册<br>2019-12-30 11:51 上传</p><p>好啦，又补充了5个嘻嘻，希望能对大家有帮助鸭<del>还是那句话，记得收藏收藏收藏鸭，我还会来更新哒</del></p><p>新鲜又实用还免费的神器， </p><ol><li>幕享-免费投屏神器</li></ol><p>官网：<a href="https://letsview.com/zh/" target="_blank" rel="noopener">https://letsview.com/zh/</a></p><p>幕享是一款支持安卓、iOS、Windows、Mac等全平台全设备的免费投屏神器，只需要同一个WiFi网络，便可以轻松实现投屏。当前支持的功能有：手机投电脑、电脑投手机、手机投电视、电脑投电视，电脑投电脑等<del>除了具备画面高清，播放流畅这些投屏软件基本素质外，还支持投声音，经常用投屏的小伙伴应该懂这个有多刚需！！！除此之外，软件还自带截图、录制、白板等功能，让你感受到更完美的投屏体验</del></p><p>我是最近在家的时候，看到我那上网课的弟弟成日抱着手机打瞌睡，然后我那慈爱的妈妈还成日担心他抱着手机影响视力，这才想着用投屏拯救我可爱小老弟的学业，这才搜到了幕享，试了一下投屏很简单，而且兼容很多视频App，像腾讯课堂啊、365名师啊、混沌大学，我试了一下都可以直接用软件内置TV按钮投屏，钉钉虽然不能直接软件内投屏，但是用普通投屏，也是可以投屏到电视上观看的。自从投屏之后啊，我弟瞌睡没了，腰板挺直了，这才真的叫妈妈再也不用担心我（小老弟）的学习~</p><ol start="2"><li>图曰-设计师福音</li></ol><p>先说一下，是图曰（yue），不是你们想的那个……每次跟身边朋友推荐的时候，嗯，都要解释一遍~这个软件最吸引人的主要有两点：</p><p>&lt;1&gt;免费超高清图库</p><p>图曰里面包含了百万免费高清图库，包含各种分类，比如纯色、中国风、互联网、读书分类等等，可以说是设计师和新媒体小编的福音了。</p><p>&lt;2&gt; 智能图片加字</p><p>顾名思义，你拍下一张图，系统可以帮你自动匹配文字。 我拿自家狗子试了一波水，还别说，匹配还算精准，有点意思。</p><p>3.时间块-时间管理</p><p>这个比起番茄时钟这类软件更加实用，简单明了，直接就是彩色的色块，按照自己的分类将不同的颜色命名好。当你发现睡觉那一栏占据了你几乎全部江山，反正我看得是挺心塞哈～有些东西就是眼不见心为净，看见了就不能当作看不到。你试试，绝对管个百分之六七十的用处，实在是那种如泰山，雷打不动的人的话，那……</p><p>4.Q-Dir-多窗口文件整理工具</p><p>Q-Dir 是一款多窗口文件整理工具，特别适合当你频繁地在各个文件夹中跳转进行复制粘贴的文件归档操作。如果你的电脑硬盘中文件已经凌乱无章难以归类的话，非常建议你使用这款软件来进行高效率的整理。</p><p>为了方便大家下载使用，我把安装包放在网盘里了，有需要的小伙伴可以自取哦~</p><p>链接：<a href="https://pan.baidu.com/s/1-jPOjElJFE7M3X4DFELHyw" target="_blank" rel="noopener">https://pan.baidu.com/s/1-jPOjElJFE7M3X4DFELHyw</a></p><p>提取码：mogu</p><p>找书籍<br>书栈网（极力推荐）： <a href="https://www.bookstack.cn/" target="_blank" rel="noopener">https://www.bookstack.cn/</a><br>码农之家（计算机电子书下载）：<a href="http://www.xz577.com" target="_blank" rel="noopener">www.xz577.com</a><br>鸠摩搜书：<a href="http://www.jiumodiary.com" target="_blank" rel="noopener">www.jiumodiary.com</a><br>云海电子图书馆：<a href="http://www.pdfbook.cn" target="_blank" rel="noopener">www.pdfbook.cn</a><br>周读（书籍搜索）：ireadweek.com<br>知轩藏书：<a href="http://www.zxcs.me/" target="_blank" rel="noopener">http://www.zxcs.me/</a><br>脚本之家电子书下载：<a href="https://www.jb51.net/books/" target="_blank" rel="noopener">https://www.jb51.net/books/</a><br>搜书VIP-电子书搜索：<a href="http://www.soshuvip.com/all.html" target="_blank" rel="noopener">http://www.soshuvip.com/all.html</a><br>书格（在线古籍图书馆）：<a href="https://new.shuge.org/" target="_blank" rel="noopener">https://new.shuge.org/</a><br>caj云阅读：<a href="http://cajviewer.cnki.net/cajcloud/" target="_blank" rel="noopener">http://cajviewer.cnki.net/cajcloud/</a><br>必看网（人生必看的书籍）：<a href="https://www.biikan.com/" target="_blank" rel="noopener">https://www.biikan.com/</a></p><p>冷知识 / 黑科技<br>上班摸鱼必备（假装电脑系统升级）： <a href="http://fakeupdate.net/" target="_blank" rel="noopener">http://fakeupdate.net/</a><br>PIECES 拼图（30 个 CSS 碎片进行拼图，呈现 30 种濒临灭绝的动物）： <a href="http://www.species-in-pieces.com/" target="_blank" rel="noopener">http://www.species-in-pieces.com/</a><br>图片立体像素画： <a href="https://pissang.github.io/voxelize-image/" target="_blank" rel="noopener">https://pissang.github.io/voxelize-image/</a><br>福利单词（一个不太正经的背单词网站）： <a href="http://dict.ftqq.com" target="_blank" rel="noopener">http://dict.ftqq.com</a><br>查无此人（刷新网站，展现一张AI 生成的人脸照片）：<a href="https://thispersondoesnotexist.com/" target="_blank" rel="noopener">https://thispersondoesnotexist.com/</a><br>在线制作地图图例：<a href="https://mapchart.net/" target="_blank" rel="noopener">https://mapchart.net/</a><br>创意光线绘画：<a href="http://weavesilk.com/" target="_blank" rel="noopener">http://weavesilk.com/</a><br>星系观察： <a href="https://stellarium-web.org/" target="_blank" rel="noopener">https://stellarium-web.org/</a><br>煎蛋：<a href="http://jandan.net/" target="_blank" rel="noopener">http://jandan.net/</a><br>渣男-说话的艺术：<a href="https://lovelive.tools/" target="_blank" rel="noopener">https://lovelive.tools/</a><br>全历史：<a href="https://www.allhistory.com/" target="_blank" rel="noopener">https://www.allhistory.com/</a><br>IDAta：<a href="https://www.cn-ki.net/" target="_blank" rel="noopener">https://www.cn-ki.net/</a><br>术语在线：<a href="http://www.termonline.cn/" target="_blank" rel="noopener">http://www.termonline.cn/</a></p><p>写代码<br>GitHub：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>码云：<a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a><br>源码之家：<a href="https://www.mycodes.net/" target="_blank" rel="noopener">https://www.mycodes.net/</a><br>JSON to Dart： <a href="https://javiercbk.github.io/json_to_dart/" target="_blank" rel="noopener">https://javiercbk.github.io/json_to_dart/</a><br>Json在线解析验证： <a href="https://www.json.cn/" target="_blank" rel="noopener">https://www.json.cn/</a><br>在线接口测试（Getman）：<a href="https://getman.cn/" target="_blank" rel="noopener">https://getman.cn/</a></p><p>资源搜索<br>DogeDoge搜索引擎：<a href="http://www.dogedoge.com" target="_blank" rel="noopener">www.dogedoge.com</a><br>秘迹搜索：<a href="https://mijisou.com/" target="_blank" rel="noopener">https://mijisou.com/</a><br>小白盘：<a href="https://www.xiaobaipan.com/" target="_blank" rel="noopener">https://www.xiaobaipan.com/</a><br>云盘精灵（资源搜索）：<a href="http://www.yunpanjingling.com" target="_blank" rel="noopener">www.yunpanjingling.com</a><br>虫部落（资源搜索）：<a href="http://www.chongbuluo.com" target="_blank" rel="noopener">www.chongbuluo.com</a><br>如风搜（资源搜索）：<a href="http://www.rufengso.net/" target="_blank" rel="noopener">http://www.rufengso.net/</a><br>爱扒：<a href="https://www.zyboe.com/" target="_blank" rel="noopener">https://www.zyboe.com/</a><br>小工具<br>奶牛快传（在线传输文件利器）： cowtransfer.com<br>文叔叔（大文件传输，不限速）：<a href="https://www.wenshushu.cn/" target="_blank" rel="noopener">https://www.wenshushu.cn/</a><br>云端超级应用空间（PS，PPT，Excel，Ai）：<a href="https://uzer.me/" target="_blank" rel="noopener">https://uzer.me/</a><br>香当网（年终总结，个人简历，事迹材料，租赁合同，演讲稿）：<a href="https://www.xiangdang.net/" target="_blank" rel="noopener">https://www.xiangdang.net/</a><br>二维码生成：<a href="https://cli.im/" target="_blank" rel="noopener">https://cli.im/</a><br>熵数（图表制作，数据可视化）：<a href="https://dydata.io/appv2/#/pages/index/home" target="_blank" rel="noopener">https://dydata.io/appv2/#/pages/index/home</a><br>拷贝兔：<a href="https://cp.anyknew.com/" target="_blank" rel="noopener">https://cp.anyknew.com/</a><br>图片无限变放大：<a href="http://bigjpg.com/zh" target="_blank" rel="noopener">http://bigjpg.com/zh</a><br>在线转换器（在线转换器转换任何测量单位）：<a href="https://zh.justcnw.com/" target="_blank" rel="noopener">https://zh.justcnw.com/</a><br>调查问卷制作：<a href="https://www.wenjuan.com/" target="_blank" rel="noopener">https://www.wenjuan.com/</a><br>果核剥壳（软件下载）：<a href="https://www.ghpym.com/" target="_blank" rel="noopener">https://www.ghpym.com/</a><br>软件下载：<a href="https://www.unyoo.com/" target="_blank" rel="noopener">https://www.unyoo.com/</a><br>MSDN我告诉你（windows10系统镜像下载）：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a><br>文库vvv：<a href="http://baidu.wenkuvvv.com/" target="_blank" rel="noopener">http://baidu.wenkuvvv.com/</a></p><p>导航页（工具集）<br>大数据导航：<a href="http://hao.199it.com/" target="_blank" rel="noopener">http://hao.199it.com/</a><br>世界各国网址大全： <a href="http://www.world68.com/" target="_blank" rel="noopener">http://www.world68.com/</a><br>小森林导航：<a href="http://www.xsldh6.com/" target="_blank" rel="noopener">http://www.xsldh6.com/</a><br>简捷工具：<a href="http://www.shulijp.com/" target="_blank" rel="noopener">http://www.shulijp.com/</a><br>NiceTool.net 好工具网：<a href="http://www.nicetool.net/" target="_blank" rel="noopener">http://www.nicetool.net/</a><br>现实君工具箱（综合型在线工具集成网站）：<a href="http://tool.uixsj.cn/" target="_blank" rel="noopener">http://tool.uixsj.cn/</a><br>蓝调网站：<a href="http://lcoc.top/" target="_blank" rel="noopener">http://lcoc.top/</a><br>偷渡鱼：<a href="https://touduyu.com/" target="_blank" rel="noopener">https://touduyu.com/</a><br>牛导航：<a href="http://www.ziliao6.com/" target="_blank" rel="noopener">http://www.ziliao6.com/</a><br>小呆导航：<a href="https://www.webjike.com/index.html" target="_blank" rel="noopener">https://www.webjike.com/index.html</a><br>简法主页：<a href="http://www.jianfast.com/" target="_blank" rel="noopener">http://www.jianfast.com/</a><br>KIM主页：<a href="https://kim.plopco.com/" target="_blank" rel="noopener">https://kim.plopco.com/</a><br>聚BT：<a href="https://jubt.net/cn/index.html" target="_blank" rel="noopener">https://jubt.net/cn/index.html</a><br>精准云工具合集：<a href="https://jingzhunyun.com/" target="_blank" rel="noopener">https://jingzhunyun.com/</a><br>兔2工具合集：<a href="https://www.tool2.cn/" target="_blank" rel="noopener">https://www.tool2.cn/</a><br>爱资料工具（在线实用工具集合）：<a href="http://www.toolnb.com" target="_blank" rel="noopener">www.toolnb.com</a><br>工具导航：<a href="https://hao.logosc.cn/" target="_blank" rel="noopener">https://hao.logosc.cn/</a><br>搞学习<br>CSDN： <a href="https://www.csdn.net/" target="_blank" rel="noopener">https://www.csdn.net/</a><br>TED（最优质的演讲）：<a href="https://www.ted.com/" target="_blank" rel="noopener">https://www.ted.com/</a><br>谷粉学术： <a href="https://gfsoso.99lb.net/scholar.html" target="_blank" rel="noopener">https://gfsoso.99lb.net/scholar.html</a><br>大学资源网：<a href="http://www.dxzy163.com/" target="_blank" rel="noopener">http://www.dxzy163.com/</a><br>网易公开课：<a href="https://open.163.com/ted/" target="_blank" rel="noopener">https://open.163.com/ted/</a><br>网易云课堂：<a href="https://study.163.com/" target="_blank" rel="noopener">https://study.163.com/</a><br>中国大学MOOC：<a href="https://www.icourse163.org" target="_blank" rel="noopener">https://www.icourse163.org</a><br>网易云课堂：<a href="https://study.163.com" target="_blank" rel="noopener">https://study.163.com</a><br>知乎：<a href="https://www.zhihu.com" target="_blank" rel="noopener">https://www.zhihu.com</a><br>学堂在线：<a href="https://www.xuetangx.com" target="_blank" rel="noopener">https://www.xuetangx.com</a><br>答题易：<a href="https://www.wentiyi.com/" target="_blank" rel="noopener">https://www.wentiyi.com/</a><br>爱课程：<a href="https://www.icourses.cn" target="_blank" rel="noopener">https://www.icourses.cn</a><br>猫咪论文：<a href="https://lunwen.im/" target="_blank" rel="noopener">https://lunwen.im/</a><br>问答吧：<a href="https://www.wendaba.com/" target="_blank" rel="noopener">https://www.wendaba.com/</a><br>iData（论文搜索）：<a href="http://www.cn-ki.net" target="_blank" rel="noopener">www.cn-ki.net</a><br>文泉考试：<a href="https://www.wqkaoshi.com" target="_blank" rel="noopener">https://www.wqkaoshi.com</a><br>微软爱写作:<a href="https://app.mtutor.engkoo.com/englishwriting/" target="_blank" rel="noopener">https://app.mtutor.engkoo.com/englishwriting/</a><br>Oeasy:<a href="http://oeasy.org/" target="_blank" rel="noopener">http://oeasy.org/</a><br>学设计<br>码力全开（产品/设计师/独立开发者的资源库）： <a href="https://www.maliquankai.com/designnav/" target="_blank" rel="noopener">https://www.maliquankai.com/designnav/</a><br>免费音频素材：<a href="https://icons8.cn/music" target="_blank" rel="noopener">https://icons8.cn/music</a><br>新CG儿（视频素材模板，无水印+免费下载）：<a href="https://www.newcger.com/" target="_blank" rel="noopener">https://www.newcger.com/</a><br>Iconfont（阿里巴巴矢量图标库）： <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a><br>小图标下载：<a href="https://www.easyicon.net/" target="_blank" rel="noopener">https://www.easyicon.net/</a><br>Flight Icon：<a href="https://www.flighticon.co/" target="_blank" rel="noopener">https://www.flighticon.co/</a><br>第一字体转换器：<a href="http://www.diyiziti.com/" target="_blank" rel="noopener">http://www.diyiziti.com/</a><br>doyoudosh（平面设计）：<a href="http://www.doyoudo.com" target="_blank" rel="noopener">www.doyoudo.com</a><br>企业宣传视频在线制作：<a href="https://duomu.tv/" target="_blank" rel="noopener">https://duomu.tv/</a><br>MAKE海报设计官网：<a href="http://maka.im/" target="_blank" rel="noopener">http://maka.im/</a><br>一键海报神器：<a href="https://www.logosc.cn/photo/?utm" target="_blank" rel="noopener">https://www.logosc.cn/photo/?utm</a> … utm_medium=referral<br>字由（字体设计）：<a href="http://www.hellofont.cn/" target="_blank" rel="noopener">http://www.hellofont.cn/</a><br>查字体网站：<a href="https://fonts.safe.360.cn/" target="_blank" rel="noopener">https://fonts.safe.360.cn/</a><br>爱给网（免费素材下载的网站，包括音效、配乐，3D、视频、游戏，平面、教程）： <a href="http://www.aigei.com/" target="_blank" rel="noopener">http://www.aigei.com/</a><br>在线视频剪辑：<a href="https://bilibili.clipchamp.com/editor" target="_blank" rel="noopener">https://bilibili.clipchamp.com/editor</a><br>搞文档<br>即书（在线制作PPT）：<a href="https://www.keysuper.com/" target="_blank" rel="noopener">https://www.keysuper.com/</a><br>PDF处理：<a href="https://smallpdf.com/cn" target="_blank" rel="noopener">https://smallpdf.com/cn</a><br>PDF处理：<a href="https://www.ilovepdf.com/zh-cn" target="_blank" rel="noopener">https://www.ilovepdf.com/zh-cn</a><br>PDF处理： <a href="https://www.pdfpai.com/" target="_blank" rel="noopener">https://www.pdfpai.com/</a><br>PDF处理：<a href="https://www.hipdf.cn/" target="_blank" rel="noopener">https://www.hipdf.cn/</a><br>图片压缩，PDF处理：<a href="https://docsmall.com/" target="_blank" rel="noopener">https://docsmall.com/</a><br>腾讯文档（在线协作编辑和管理文档）：docs.qq.com<br>ProcessOn（在线协作制作结构图）：<a href="http://www.processon.com" target="_blank" rel="noopener">www.processon.com</a><br>iLovePDF（在线转换PDF利器）：<a href="http://www.ilovepdf.com" target="_blank" rel="noopener">www.ilovepdf.com</a><br>PPT在线制作：<a href="https://www.woodo.cn/" target="_blank" rel="noopener">https://www.woodo.cn/</a><br>PDF24工具（pdf处理工具）：<a href="https://tools.pdf24.org/en" target="_blank" rel="noopener">https://tools.pdf24.org/en</a><br>IMGBOT（在线图片处理）：<a href="http://www.imgbot.ai" target="_blank" rel="noopener">www.imgbot.ai</a><br>**云编辑（在线编辑PDF）：edit.foxitcloud.cn<br>TinyPNG（在线压缩图片）：tinypng.com<br>UZER.ME（在线使用各种大应用）：uzer.me<br>优品PPT（模板下载）： <a href="http://www.ypppt.com/" target="_blank" rel="noopener">http://www.ypppt.com/</a><br>第一PPT（模板下载）：<a href="http://www.1ppt.com/xiazai/" target="_blank" rel="noopener">http://www.1ppt.com/xiazai/</a><br>三顿PPT导航：sandunppt.com<br>找图片<br>电脑壁纸：<a href="http://lcoc.top/bizhi/" target="_blank" rel="noopener">http://lcoc.top/bizhi/</a><br><a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a><br><a href="https://pixabay.com/" target="_blank" rel="noopener">https://pixabay.com/</a><br><a href="https://www.pexels.com/" target="_blank" rel="noopener">https://www.pexels.com/</a><br><a href="https://visualhunt.com/" target="_blank" rel="noopener">https://visualhunt.com/</a><br><a href="https://www.ssyer.com/" target="_blank" rel="noopener">https://www.ssyer.com/</a><br>彼岸图网：<a href="http://pic.netbian.com/" target="_blank" rel="noopener">http://pic.netbian.com/</a><br>极像素（超高清大图）：<a href="https://www.sigoo.com/" target="_blank" rel="noopener">https://www.sigoo.com/</a><br>免费版权图片搜索：<a href="https://www.logosc.cn/so/" target="_blank" rel="noopener">https://www.logosc.cn/so/</a></p><p>各种<br>此人不存在（<a href="https://thispersondoesnotexist.com/）" target="_blank" rel="noopener">https://thispersondoesnotexist.com/）</a><br>一个生成各种人像的网站，电视剧中经常使用的小众网站！<br>每次刷新网站都会出现一个人脸，各种各样。<br>美丑男女都有，各种肤色！<br>不过你千万别对这上面的人，产生想法，因为每一个人都不存在于这个世界！<br>这些人像都是AI生成的，与世界上任何一个人都长得不同！<br>因此电视剧经常会使用作为遗像之类的。</p><p>2、Lastwords（<a href="http://www.planecrashinfo.com/lastwords.htm" target="_blank" rel="noopener">http://www.planecrashinfo.com/lastwords.htm</a> ）<br> 这是一个关于死亡的网站！<br>这个网站记录了从1962年到现在，所有空难上飞机的最后一句话！<br>看完你会有所震惊！<br>如果你滴英语跟俺一样渣，请使用翻译软件。<br>当然，专八就自己翻译吧。<br>中国航空遇难的话也能看到，看完有点小暖心。</p><p>3、death_row（<a href="https://www.tdcj.texas.gov/death_row/dr_executed_offenders.html" target="_blank" rel="noopener">https://www.tdcj.texas.gov/death_row/dr_executed_offenders.html</a> ）<br> 这也是一个关于死亡的网站。<br>不过记录的是死囚犯在执行死刑前的最后一句话！<br>你可以选择语言，我选择了中文，你可以看到每位囚犯，留给这个世界的最后一句话。<br>很多囚犯死亡前的最后一句话，莫名的有点心酸。</p><p>4、稿定抠图（<a href="https://www.gaoding.com/koutu?hmsr=zhongcao-kt_zh_pmzd-koutu---pmzd-bdqd&amp;utm_medium=&amp;utm_source=zhongcao）" target="_blank" rel="noopener">https://www.gaoding.com/koutu?hmsr=zhongcao-kt_zh_pmzd-koutu---pmzd-bdqd&amp;utm_medium=&amp;utm_source=zhongcao）</a><br>一款的在线免费抠图网站。<br>使用这个网站，可以让你轻松告别苦逼的一点点抠图的时代，只要认识字，就能抠图！点击下上传图片，接下来神奇的事情出现了，全自动。</p><p>5、假装电脑升级（<a href="http://fakeupdate.net/）" target="_blank" rel="noopener">http://fakeupdate.net/）</a><br>一个让你能假装电脑升级的网站，各种系统都有。<br>没啥用的网站，但很有趣。<br>有个快捷操作：按 F11 开始全屏，按回车还来触发蓝屏界面</p><p>6、今日热榜（<a href="https://tophub.today/）" target="_blank" rel="noopener">https://tophub.today/）</a><br>一个聚合订阅热榜网站，实时追踪全网热点，运营人必备！<br>可以在一个网站上，实时订阅自己想要监控的热榜，非常方便，205个渠道可以订阅：<br>如果网站没有这个渠道，你还可以提交申请进行订阅。<br>简直好用到爆炸，如果从事运营工作的你，一定要看看哈。</p><p>7、问答库（<a href="https://www.asklib.com/）" target="_blank" rel="noopener">https://www.asklib.com/）</a><br>一个超良心的免费考试题库网站。<br>网站收录了数百万的公务员考试、建筑工程、考研等各种题库以及一些常见的练习题目库免费查阅学习！<br>如果你想要自学进行考证，这个网站千万别错过。<br>而且上面的题库更新很及时，讲解也比较细致。<br>而且还有相关题目练习！</p><p>8、wikiHow（<a href="https://zh.wikihow.com/%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">https://zh.wikihow.com/%E9%A6%96%E9%A1%B5</a> ）<br>一个能让所有人学做任何事情的网站。<br>像是更加专业化的维基百科！<br>wikiHow的目标是建立世界最大的最高质量的指导手册。<br>回答非常专业，实操性强！<br>而且为了方便理解，会使用一些漫画作为解释，及时小朋友也能看清楚。<br>网站包含19个分类，让你轻松找到想要的！<br>你可以在这个网站学习到很多专业且有趣的知识。</p><p>综合网址<br>跨平台传输文件<br><a href="https://cp.anyknew.com/" target="_blank" rel="noopener">https://cp.anyknew.com/</a><br><a href="https://cowtransfer.com/" target="_blank" rel="noopener">https://cowtransfer.com/</a></p><p>非常厉害的小说电影搜索网站，建议试试，至少斗破和斗罗都能搜出来，其他的网站都搜索不出来：<br><a href="http://www.soshuvip.com/all.html" target="_blank" rel="noopener">http://www.soshuvip.com/all.html</a><br>备用：<a href="http://www.xuesousuo.com/all.html" target="_blank" rel="noopener">http://www.xuesousuo.com/all.html</a></p><p>非常好看的浏览器主页：<br><a href="https://a.maorx.cn/" target="_blank" rel="noopener">https://a.maorx.cn/</a></p><p>一分钱买迅雷会员1天，从此不求人（最近几天不稳定，过几天恢复1分钱）：<br><a href="http://lingquanzhushou.com/cindex.html" target="_blank" rel="noopener">http://lingquanzhushou.com/cindex.html</a></p><p>查题网站（类似于上学吧的网站）：<br><a href="https://www.shangxueba365.com/?security_verify_img=3838333239" target="_blank" rel="noopener">https://www.shangxueba365.com/?security_verify_img=3838333239</a></p><p>浏览器导航网站：<br><a href="http://ilxdh.com/" target="_blank" rel="noopener">http://ilxdh.com/</a><br><a href="https://www.cainiaodh.com/" target="_blank" rel="noopener">https://www.cainiaodh.com/</a></p><p>无忧软件网 - [url]<a href="http://www.51soft.com/[/url]" target="_blank" rel="noopener">http://www.51soft.com/[/url]</a><br>精品软件秀 -<a href="http://www.ohsoft.com/" target="_blank" rel="noopener">http://www.ohsoft.com/</a><br>163软件园 -<a href="http://www.soft163.com/" target="_blank" rel="noopener">http://www.soft163.com/</a><br>中华破解联盟 -<a href="http://www.softsdown.com/" target="_blank" rel="noopener">http://www.softsdown.com/</a><br>软件万花筒 -<a href="http://www.superdown.com/" target="_blank" rel="noopener">http://www.superdown.com/</a><br>番外地工作室 -<a href="http://fwd.yeah.net/" target="_blank" rel="noopener">http://fwd.yeah.net/</a>　<br>中原破解 -<a href="http://www.crackbest.net/" target="_blank" rel="noopener">http://www.crackbest.net/</a><br>天空软件站 -<a href="http://www.skycn.net/" target="_blank" rel="noopener">http://www.skycn.net/</a><br>赢政天下 -<a href="http://soft.winzheng.com/" target="_blank" rel="noopener">http://soft.winzheng.com/</a><br>多快热下载 -<a href="http://www.iou99.com/" target="_blank" rel="noopener">http://www.iou99.com/</a><br>肥牛精品 -<a href="http://www.51xiazai.com/" target="_blank" rel="noopener">http://www.51xiazai.com/</a><br>精品超酷软件9down -<a href="http://www.9down.com/" target="_blank" rel="noopener">http://www.9down.com/</a><br>康乐园 -<a href="http://64.125.80.150/" target="_blank" rel="noopener">http://64.125.80.150/</a><br>无心精品软件下载 -<a href="http://www.clkj.net/soft/" target="_blank" rel="noopener">http://www.clkj.net/soft/</a><br>注册大本营 -<a href="http://yuanbin.spedia.net/" target="_blank" rel="noopener">http://yuanbin.spedia.net/</a><br>QQ<strong><em>网 -<a href="http://www.qq88.net/" target="_blank" rel="noopener">http://www.qq88.net/</a><br>豆子软件 -<a href="http://www.ggabc.com/" target="_blank" rel="noopener">http://www.ggabc.com/</a><br>网虫乐园 -<a href="http://www2001.myrice.com/" target="_blank" rel="noopener">http://www2001.myrice.com/</a><br>注册大全 -<a href="http://www.zx9.net/reg/index.htm" target="_blank" rel="noopener">http://www.zx9.net/reg/index.htm</a><br>suhu注册码天地 -<a href="http://yanxz.myetang.com/" target="_blank" rel="noopener">http://yanxz.myetang.com/</a><br>飞牌精品软件 -<a href="http://www.ayxz.com/" target="_blank" rel="noopener">http://www.ayxz.com/</a><br>大亨软件园 -<a href="http://www.jxxw.com/" target="_blank" rel="noopener">http://www.jxxw.com/</a><br>天天软件网 -<a href="http://www.365down.com/" target="_blank" rel="noopener">http://www.365down.com/</a><br>Greatboy的网上家园 -<a href="http://greatboy.myrice.com/" target="_blank" rel="noopener">http://greatboy.myrice.com/</a>　<br>珠江路在线 - 888珠江路在线-<a href="http://www.zhujiangroad.com/code/" target="_blank" rel="noopener">http://www.zhujiangroad.com/code/</a><br>火爆软件下载-<a href="http://www.myetoys.com/download/indexok.asp" target="_blank" rel="noopener">http://www.myetoys.com/download/indexok.asp</a><br>软件仓库 -<a href="http://soft.netnest.com.cn/" target="_blank" rel="noopener">http://soft.netnest.com.cn/</a><br>京九网堡下载站 -<a href="http://www.jjwb.com/soft/" target="_blank" rel="noopener">http://www.jjwb.com/soft/</a><br>阿程软件园 -<a href="http://myis.yeah.net/" target="_blank" rel="noopener">http://myis.yeah.net/</a><br>石头软件 -<a href="http://stonesoft.my163.com/" target="_blank" rel="noopener">http://stonesoft.my163.com/</a><br>网友自助中心 -<a href="http://52byte.com/" target="_blank" rel="noopener">http://52byte.com/</a><br>龙龙精品软件 -<a href="http://yesoft.myrice.com/" target="_blank" rel="noopener">http://yesoft.myrice.com/</a><br>鲨鱼丸下载 -<a href="http://www.whatisnet.net/index.asp" target="_blank" rel="noopener">http://www.whatisnet.net/index.asp</a><br>无忧破解基地 -<a href="http://www.51hot.net/soft/" target="_blank" rel="noopener">http://www.51hot.net/soft/</a><br>蔫老虎精品软件资讯网 -<a href="http://www.softicp.com/" target="_blank" rel="noopener">http://www.softicp.com/</a><br>注册码搜索 -<a href="http://www.glavenet.com/sn/" target="_blank" rel="noopener">http://www.glavenet.com/sn/</a><br>听月在线 -<a href="http://www.aptrat.com/" target="_blank" rel="noopener">http://www.aptrat.com/</a><br>逍遥乐人居 -<a href="http://leren.myrice.com/" target="_blank" rel="noopener">http://leren.myrice.com/</a><br>阿蒙电脑乐园 -<a href="http://www.swhsky.com/" target="_blank" rel="noopener">http://www.swhsky.com/</a><br>月之门 -<a href="http://zjhall.51.net/" target="_blank" rel="noopener">http://zjhall.51.net/</a>　　　<br>中华</em></strong> -<a href="http://www.hackercn.com/" target="_blank" rel="noopener">http://www.hackercn.com/</a><br>三脚猫大仓库 -<a href="http://iww.my163.com/" target="_blank" rel="noopener">http://iww.my163.com/</a><br>华娱下载区 -<a href="http://www.zjdownload.net/" target="_blank" rel="noopener">http://www.zjdownload.net/</a><br>万发网☆超级下载基地！ -<a href="http://www.ujd0z1.chinaw3.com/" target="_blank" rel="noopener">http://www.ujd0z1.chinaw3.com/</a><br>***软件园 -<a href="http://go5.163.com/happyhot/" target="_blank" rel="noopener">http://go5.163.com/happyhot/</a><br>城郊漫步下载 -<a href="http://cnfjh.y365.com/softdown/softdown.htm" target="_blank" rel="noopener">http://cnfjh.y365.com/softdown/softdown.htm</a><br>紫色天空 -<a href="http://go1.163.com/tsst/" target="_blank" rel="noopener">http://go1.163.com/tsst/</a><br>动感软件站 -<a href="http://www.mesky.net/softdown/default.asp" target="_blank" rel="noopener">http://www.mesky.net/softdown/default.asp</a><br>当秀 -<a href="http://94down.enorth.com.cn/default.html" target="_blank" rel="noopener">http://94down.enorth.com.cn/default.html</a><br>绵阳青软 - 软件下载[url]<a href="http://www.myqr.com/" target="_blank" rel="noopener">http://www.myqr.com/</a><br>飓风工作室 -<a href="http://helihua.com/soft/" target="_blank" rel="noopener">http://helihua.com/soft/</a><br>K886网络工作室 -<a href="http://www.qyzsz.com/love/k886/default.asp" target="_blank" rel="noopener">http://www.qyzsz.com/love/k886/default.asp</a><br>软件天堂 -<a href="http://lzhj.myrice.com/" target="_blank" rel="noopener">http://lzhj.myrice.com/</a><br>【软件帝国】-<a href="http://aliketen.myetang.com/rj/software.htm" target="_blank" rel="noopener">http://aliketen.myetang.com/rj/software.htm</a><br>明超空间软件下载 -<a href="http://go5.163.com/lmc888/index.htm" target="_blank" rel="noopener">http://go5.163.com/lmc888/index.htm</a><br>紫色天空 -<a href="http://go1.163.com/ccncm/" target="_blank" rel="noopener">http://go1.163.com/ccncm/</a><br>精品软件资讯网 -<a href="http://zlzl.126.com/" target="_blank" rel="noopener">http://zlzl.126.com/</a><br>酷软精品小站 -<a href="http://davy.sosoo.net/" target="_blank" rel="noopener">http://davy.sosoo.net/</a><br>万家下载专区 -<a href="http://winjia.com/soft/" target="_blank" rel="noopener">http://winjia.com/soft/</a><br>奇奇天空软件站 -<a href="http://qqskydownload.yeah.net/" target="_blank" rel="noopener">http://qqskydownload.yeah.net/</a><br>中华软件联盟 -<a href="http://www.softsdown.com/" target="_blank" rel="noopener">http://www.softsdown.com/</a><br>软件大吧 -<a href="http://crazywiond.myetang.com/" target="_blank" rel="noopener">http://crazywiond.myetang.com/</a><br>时空在线 -<a href="http://mhwawa.6to23.com/" target="_blank" rel="noopener">http://mhwawa.6to23.com/</a><br>软件风暴 -<a href="http://software.zhgnet.com/" target="_blank" rel="noopener">http://software.zhgnet.com/</a><br>紫辰软件下载 -<a href="http://3254008.126.com/" target="_blank" rel="noopener">http://3254008.126.com/</a><br>三维视窗 -<a href="http://www.3dwin.com.cn/c/register.php" target="_blank" rel="noopener">http://www.3dwin.com.cn/c/register.php</a><br>划破长空 -<a href="http://go5.163.com/tudou110/" target="_blank" rel="noopener">http://go5.163.com/tudou110/</a><br>我要下载 -<a href="http://www.51xz.net/" target="_blank" rel="noopener">http://www.51xz.net/</a><br>天天安全网 - 有关病毒防护[url]<a href="http://www.ttian.net/" target="_blank" rel="noopener">http://www.ttian.net/</a><br>败絮其外 - 老牌的破解站点[url]<a href="http://bxqw.yeah.net/" target="_blank" rel="noopener">http://bxqw.yeah.net/</a><br>911下载城 - 软件全面,更新快[url]<a href="http://www.cn911.net" target="_blank" rel="noopener">http://www.cn911.net</a><br>精品推介站 -<a href="http://kickme.to/vdown" target="_blank" rel="noopener">http://kickme.to/vdown</a><br>天码行空 -<a href="http://www.wutai.com/" target="_blank" rel="noopener">http://www.wutai.com/</a><br>软件聚宝盆 -<a href="http://soft.km169.net/" target="_blank" rel="noopener">http://soft.km169.net/</a><br>最酷软件 -<a href="http://weboy.okey.net/~weboy/" target="_blank" rel="noopener">http://weboy.okey.net/~weboy/</a><br>小臭臭精品网 -<a href="http://xccsoft.yeah.net/" target="_blank" rel="noopener">http://xccsoft.yeah.net/</a><br>疯狂下载 -<a href="http://www.hx2nn.com/" target="_blank" rel="noopener">http://www.hx2nn.com/</a><br>坏鱼网络 -<a href="http://www.badyu.net/" target="_blank" rel="noopener">http://www.badyu.net/</a><br>中文之家 -<a href="http://www.xycn.com/china/index.asp" target="_blank" rel="noopener">http://www.xycn.com/china/index.asp</a><br>木子丹软件园 -<a href="http://www.mehe.net/soft/" target="_blank" rel="noopener">http://www.mehe.net/soft/</a><br>注册破解天地 -<a href="http://crsoft.6to23.com/" target="_blank" rel="noopener">http://crsoft.6to23.com/</a><br>先锋世界 -<a href="http://www.51xf.com/down/" target="_blank" rel="noopener">http://www.51xf.com/down/</a><br>汉化软件基地 -<a href="http://smg.vip.myrice.com/" target="_blank" rel="noopener">http://smg.vip.myrice.com/</a><br>废话软件 -<a href="http://www.fm356.net/" target="_blank" rel="noopener">http://www.fm356.net/</a><br>龙龙精品屋 -<a href="http://yesoft.myrice.com/" target="_blank" rel="noopener">http://yesoft.myrice.com/</a><br>全方位下载 -<a href="http://fixdown.yeah.net/" target="_blank" rel="noopener">http://fixdown.yeah.net/</a><br>天蝎下载 -<a href="http://mylizi.com/" target="_blank" rel="noopener">http://mylizi.com/</a><br>舒畅软件 -<a href="http://www.shuchang.net/" target="_blank" rel="noopener">http://www.shuchang.net/</a><br>飚网同盟软件下载 -<a href="http://www.100to100.net/down2/index.asp" target="_blank" rel="noopener">http://www.100to100.net/down2/index.asp</a><br>自由破解联盟FCG -<a href="http://fcg.5599.net/" target="_blank" rel="noopener">http://fcg.5599.net/</a><br>PATCH99 - 各种补丁[url]<a href="http://www.patch99.com/[/url]" target="_blank" rel="noopener">http://www.patch99.com/[/url]</a><br>网迷世界软件下载 -<a href="http://www.fansword.com/" target="_blank" rel="noopener">http://www.fansword.com/</a><br>自由软件 -<a href="http://www.itwet.com/" target="_blank" rel="noopener">http://www.itwet.com/</a><br>魔界天空- 病毒软件下载[url]<a href="http://www.mjtk-v.com/index-one.htm[/url]" target="_blank" rel="noopener">http://www.mjtk-v.com/index-one.htm[/url]</a><br>软件快巴 -<a href="http://www.86ad.com/down/soft/Default.asp" target="_blank" rel="noopener">http://www.86ad.com/down/soft/Default.asp</a><br>无忧酷软 -<a href="http://www.51hot.net/soft" target="_blank" rel="noopener">http://www.51hot.net/soft</a><br>苍狼软件屋 -<a href="http://softwolf.my163.com/" target="_blank" rel="noopener">http://softwolf.my163.com/</a><br>简体中文网 - 以汉化软件为主[url]<a href="http://www.gb-2312.com/[/url]" target="_blank" rel="noopener">http://www.gb-2312.com/[/url]</a><br>电脑空间 -<a href="http://yhq.xiloo.com/" target="_blank" rel="noopener">http://yhq.xiloo.com/</a><br>天下一家 -<a href="http://super.5599.net/down/index.asp" target="_blank" rel="noopener">http://super.5599.net/down/index.asp</a><br>火爆软件 -ttp://<a href="http://www.myetoys.com/download/indexok.asp" target="_blank" rel="noopener">www.myetoys.com/download/indexok.asp</a><br>超级综合网络 -<a href="http://www.zhoucc.com" target="_blank" rel="noopener">http://www.zhoucc.com</a><br>论坛<br>1.龙族联盟论坛★<br><a href="http://www.chinadforce.com/" target="_blank" rel="noopener">http://www.chinadforce.com/</a><br>2.霏凡软件论坛★<br><a href="http://bbs.crsky.com/" target="_blank" rel="noopener">http://bbs.crsky.com/</a><br>3.赢政天下论坛★<br><a href="http://bbs.winzheng.com/" target="_blank" rel="noopener">http://bbs.winzheng.com/</a><br>4.万花筒极酷大论坛<br><a href="http://bbs.superdown.com/" target="_blank" rel="noopener">http://bbs.superdown.com/</a><br>5.汉化新世纪论坛<br><a href="http://bbs.hanzify.org/" target="_blank" rel="noopener">http://bbs.hanzify.org/</a><br>6.天天精品论坛<br><a href="http://bbs.ttdown.com/" target="_blank" rel="noopener">http://bbs.ttdown.com/</a><br>7.说吧朋友社区<br><a href="http://bbs.sayba.cn/" target="_blank" rel="noopener">http://bbs.sayba.cn/</a><br>8.中国破解联盟论坛<br><a href="http://bbs.mumayi.net/" target="_blank" rel="noopener">http://bbs.mumayi.net/</a><br>9.中国狂热破解联盟论坛<br><a href="http://www.5icrack.com/bbs/" target="_blank" rel="noopener">http://www.5icrack.com/bbs/</a><br>10.阿榕软件论坛<br><a href="http://bbs.arongsoft.com/" target="_blank" rel="noopener">http://bbs.arongsoft.com/</a></p><p>木蚂蚁社区<br><a href="http://bbs.mumayi.net/index.php" target="_blank" rel="noopener">http://bbs.mumayi.net/index.php</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过AOP监控serice执行时间</title>
      <link href="p/13ac.html"/>
      <url>p/13ac.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用过Spring 的开发者都知道它有两大核心功能，1.依赖注入（IOC、DI）、2.面向切面编程（AOP）。</p><p>AOP：面向切面编程，往往用来实现关注点的分离的技术。系统是由许多不同的组件所组成的，每一个组件各负责一块特定功能。可以很好的集成日志收集、权限拦截、运行监控等功能。</p><p>同时，它对系统也是无入侵的，无须改动其他业务代码，就能达到收集信息的目的，非常赞。</p><p><strong>以下是使用AOP来监控service的执行时间，在控制台打印不同级别的日志。</strong></p><a id="more"></a><h1 id="AOP概念解析"><a href="#AOP概念解析" class="headerlink" title="AOP概念解析"></a>AOP概念解析</h1><p><strong>Joinpoint</strong>（连接点）：类里面可以被增强的方法即为连接点。例如，想要修改哪个方法的功能，那么该方法就是一个链接点。</p><p><strong>Target</strong>（目标对象）：要增强的类成为 <strong>Target</strong>。</p><p><strong>Pointcut</strong>（切入点）：对 <strong>Jointpoint</strong> 进行拦截的定义即为切入点。例如，拦截所有以 <strong>insert</strong> 开始的方法，这个定义即为切入点。</p><p><strong>Advice</strong>（通知）：拦截到 <strong>Jointpoint</strong> 之后要做的事情就是通知。通知分为前置通知、后置通知、异常通知、最终通知和环绕通知。例如，前面说到的打印日志监控就是通知。</p><p><strong>Aspect</strong>（切面）：即 <strong>Pointcut</strong> 和 <strong>Advice</strong> 的结合。</p><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="创建切面"><a href="#创建切面" class="headerlink" title="创建切面"></a>创建切面</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.Joinpoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceLogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log =</span><br><span class="line">            LoggerFactory.getLogger(ServiceLogAspect<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AOP通知：</span></span><br><span class="line"><span class="comment">     * 1. 前置通知：在方法调用之前执行</span></span><br><span class="line"><span class="comment">     * 2. 后置通知：在方法正常调用之后执行</span></span><br><span class="line"><span class="comment">     * 3. 环绕通知：在方法调用之前和之后，都分别可以执行的通知</span></span><br><span class="line"><span class="comment">     * 4. 异常通知：如果在方法调用过程中发生异常，则通知</span></span><br><span class="line"><span class="comment">     * 5. 最终通知：在方法调用之后执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切面表达式：</span></span><br><span class="line"><span class="comment">     * execution 代表所要执行的表达式主体</span></span><br><span class="line"><span class="comment">     * 第一处 * 代表方法返回类型 *代表所有类型</span></span><br><span class="line"><span class="comment">     * 第二处 包名代表aop监控的类所在的包</span></span><br><span class="line"><span class="comment">     * 第三处 .. 代表该包以及其子包下的所有类方法</span></span><br><span class="line"><span class="comment">     * 第四处 * 代表类名，*代表所有类</span></span><br><span class="line"><span class="comment">     * 第五处 *(..) *代表类中的方法名，(..)表示方法中的任何参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.imooc.service.impl..*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">recordTimeLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"====== 开始执行 &#123;&#125;.&#123;&#125; ======"</span>,</span><br><span class="line">                        joinPoint.getTarget().getClass(),</span><br><span class="line">                        joinPoint.getSignature().getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行目标 service</span></span><br><span class="line">        Object result = joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> takeTime = end - begin;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (takeTime &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">            log.error(<span class="string">"====== 执行结束，耗时：&#123;&#125; 毫秒 ======"</span>, takeTime);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (takeTime &gt; <span class="number">2000</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">"====== 执行结束，耗时：&#123;&#125; 毫秒 ======"</span>, takeTime);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">"====== 执行结束，耗时：&#123;&#125; 毫秒 ======"</span>, takeTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>在service的实现类中添加<code>Thread.sleep(3500);</code>来控制不同执行时间。</p><h1 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h1><p>（1）<strong>@Aspect</strong> 注解：表明这是一个切面类。<br>（2）<strong>@Pointcut</strong> 注解：表明这是一个切入点。</p><ul><li><strong>execution</strong> 中的第一个 ***** 表示方法返回任意值</li><li>第二个 <strong>*** 表示 **service</strong> 包下的任意类</li><li>第三个 <strong>*** 表示类中的任意方法，括号中的两个点表示方法参数任意，即这里描述的切入点为 **service</strong> 包下所有类中的所有方法。</li></ul><p>（3）<strong>@Before</strong> 注解：表示这是一个前置通知，该方法在目标方法之前执行。</p><ul><li>通过 <strong>JoinPoint</strong> 参数可以获取目标方法的方法名、修饰符等信息。</li></ul><p>（4）<strong>@After</strong> 注解：表示这是一个后置通知，该方法在目标执行之后执行。<br>（5）<strong>@AfterReturning</strong> 注解：表示这是一个返回通知，在该方法中可以获取目标方法的返回值。</p><ul><li><strong>returning</strong> 参数是指返回值的变量名，对应方法的参数。</li><li><strong>注意</strong>：本样例在方法参数中定义 <strong>result</strong> 的类型为 <strong>Object</strong>，表示目标方法的返回值可以是任意类型。若 <strong>result</strong> 参数的类型为 <strong>Long</strong>，则该方法只能处理目标方法返回值为 <strong>Long</strong> 的情况。</li></ul><p>（6）<strong>@AfterThrowing</strong> 注解：表示这是一个异常通知，即当目标方法发生异常，该方法会被调用。</p><ul><li>样例中设置的异常类型为 <strong>Exception</strong> 表示所有的异常都会进入该方法中执行。</li><li>若异常类型为 <strong>ArithmeticException</strong> 则表示只有目标方法抛出的 <strong>ArithmeticException</strong> 异常才会进入该方法的处理。</li></ul><p>（7） <strong>@Around</strong> 注解：表示这是一个环绕通知。环绕通知是所有通知里功能最为强大的通知，可以实现前置通知、后置通知、异常通知以及返回通知的功能。</p><ul><li>目标方法进入环绕通知后，通过调用 <strong>ProceedingJointPoint</strong> 对象的 <strong>proceed</strong> 方法使目标方法继续执行，开发者可以在次修改目标方法的执行参数、返回值值，并且可以在此目标方法的异常。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合log4j打印日志</title>
      <link href="p/1f01.html"/>
      <url>p/1f01.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>springboot自带了logging，但是其中实现众多，而我们只需要用到log4j。如果直接引入的话则会与自带的log4j冲突，因此需要排除自带的日志，使用自定义的框架。</p><blockquote><p>Log4j是Apache的一个开放源代码项目，通过使用Log4j，控制日志信息输送的目的地可以为控制台、文件、数据库、GUI组件、甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；可以控制每一条日志的信息内容和信息输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程；甚至还可以在不需要修改业务逻辑代码、重启web服务，只需要通过一个修改配置文件就可以实现控制项目的日志动作。</p></blockquote><a id="more"></a><h1 id="移除默认日志"><a href="#移除默认日志" class="headerlink" title="移除默认日志"></a>移除默认日志</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="添加日志框架依赖"><a href="#添加日志框架依赖" class="headerlink" title="添加日志框架依赖"></a>添加日志框架依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入日志依赖 抽象层 与 实现层--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>创建 log4j.properties 并且放到资源文件目录 src/main/resources</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,stdout,file</span></span><br><span class="line"><span class="meta">log4j.additivity.org.apache</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.threshold</span>=<span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%-5p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.file</span>=<span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.DatePattern</span>=<span class="string">'.'yyyy-MM-dd-HH-mm</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.appender.file.append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">/workspaces/logs/foodie-api/imooc.log</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="https://blog.csdn.net/chendaoqiu/article/details/50389184" target="_blank" rel="noopener">参考</a></h1><p>首先，日志的级别有：OFF 、FATAL 、ERROR、WARN、INFO、DEBUG、TRACE 、ALL 等等。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">OFF：关闭了日志信息</span>  <span class="string"></span></span><br><span class="line"><span class="meta">FATAL：可能导致应用中止的严重事件错误</span>  <span class="string"></span></span><br><span class="line"><span class="meta">ERROR：严重错误</span> <span class="string">主要是程序的错误  </span></span><br><span class="line"><span class="meta">WARN：一般警告，比如session丢失</span>  <span class="string"></span></span><br><span class="line"><span class="meta">INFO：一般要显示的信息，比如登录登出</span>  <span class="string"></span></span><br><span class="line"><span class="meta">DEBUG：程序的调试信息</span>  <span class="string"></span></span><br><span class="line"><span class="meta">TRACE：比DEBUG更细粒度的事件信息</span>  <span class="string"></span></span><br><span class="line"><span class="attr">ALL：打开所有级别的日志12345678</span></span><br></pre></td></tr></table></figure><p>log4j提供了一系列的Appender，允许将日志输送到不同的地方，如控制台、文件、数据库等：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.org.apache.log4j.ConsoleAppender（控制台）</span><br><span class="line">2.org.apache.log4j.FileAppender（文件）</span><br><span class="line">3.org.apache.log4j.jdbc.JDBCAppender（数据库）</span><br><span class="line">4.org.apache.log4j.net.SMTPAppender（邮件）</span><br><span class="line">5.org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</span><br><span class="line">6.org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</span><br><span class="line">7.org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><p>结合日志的级别，可以将不同级别的日志信息输送到不同的位置作为记录或者事后查找问题作为依据。一般的信息可以通过文件或者数据库的形式存储，错误信息可以发送邮件给相关的负责人或者发短信报警给相关的负责人，这些在log4j看来轻松搞定。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>用来替代喜闻乐见的<code>System.out.println()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(HelloController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        logger.debug(<span class="string">"debug: hello~"</span>);</span><br><span class="line">        logger.info(<span class="string">"info: hello~"</span>);</span><br><span class="line">        logger.warn(<span class="string">"warn: hello~"</span>);</span><br><span class="line">        logger.error(<span class="string">"error: hello~"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World~"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登录注册实现与常用工具类</title>
      <link href="p/8bae.html"/>
      <url>p/8bae.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>登录注册过程中，适用于传递给前端的返回值，如对真实姓名、密码等字段，对关键信息进行保护。</p><p>主要思路有两种：</p><ol><li>给实体类字段添加注解@JsonIgnore（对实体影响较大）</li><li>按照普通实体，对返回值相应字段设置为空</li></ol><a id="more"></a><p>这里按照第二种方法来实现。</p><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"用户登录"</span>, notes = <span class="string">"用户登录"</span>, httpMethod = <span class="string">"POST"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> IMOOCJSONResult <span class="title">login</span><span class="params">(@RequestBody UserBO userBO,</span></span></span><br><span class="line"><span class="function"><span class="params">                             HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                             HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    String username = userBO.getUsername();</span><br><span class="line">    String password = userBO.getPassword();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 0. 判断用户名和密码必须不为空</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(username) ||</span><br><span class="line">            StringUtils.isBlank(password)) &#123;</span><br><span class="line">        <span class="keyword">return</span> IMOOCJSONResult.errorMsg(<span class="string">"用户名或密码不能为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 实现登录</span></span><br><span class="line">    Users userResult = userService.queryUserForLogin(username,</span><br><span class="line">                MD5Utils.getMD5Str(password));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> IMOOCJSONResult.errorMsg(<span class="string">"用户名或密码不正确"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    userResult = setNullProperty(userResult);</span><br><span class="line"></span><br><span class="line">    CookieUtils.setCookie(request, response, <span class="string">"user"</span>,</span><br><span class="line">            JsonUtils.objectToJson(userResult), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 生成用户token，存入redis会话</span></span><br><span class="line">    <span class="comment">// TODO 同步购物车数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> IMOOCJSONResult.ok(userResult);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Users <span class="title">setNullProperty</span><span class="params">(Users userResult)</span> </span>&#123;</span><br><span class="line">    userResult.setPassword(<span class="keyword">null</span>);</span><br><span class="line">    userResult.setMobile(<span class="keyword">null</span>);</span><br><span class="line">    userResult.setEmail(<span class="keyword">null</span>);</span><br><span class="line">    userResult.setCreatedTime(<span class="keyword">null</span>);</span><br><span class="line">    userResult.setUpdatedTime(<span class="keyword">null</span>);</span><br><span class="line">    userResult.setBirthday(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> userResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"用户名是否存在"</span>, notes = <span class="string">"用户名是否存在"</span>, httpMethod = <span class="string">"GET"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/usernameIsExist"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IMOOCJSONResult <span class="title">usernameIsExist</span><span class="params">(@RequestParam String username)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 判断用户名不能为空</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(username)) &#123;</span><br><span class="line">            <span class="keyword">return</span> IMOOCJSONResult.errorMsg(<span class="string">"用户名不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 查找注册的用户名是否存在</span></span><br><span class="line">        <span class="keyword">boolean</span> isExist = userService.queryUsernameIsExist(username);</span><br><span class="line">        <span class="keyword">if</span> (isExist) &#123;</span><br><span class="line">            <span class="keyword">return</span> IMOOCJSONResult.errorMsg(<span class="string">"用户名已经存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 请求成功，用户名没有重复</span></span><br><span class="line">        <span class="keyword">return</span> IMOOCJSONResult.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"用户注册"</span>, notes = <span class="string">"用户注册"</span>, httpMethod = <span class="string">"POST"</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/regist"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IMOOCJSONResult <span class="title">regist</span><span class="params">(@RequestBody UserBO userBO,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String username = userBO.getUsername();</span><br><span class="line">        String password = userBO.getPassword();</span><br><span class="line">        String confirmPwd = userBO.getConfirmPassword();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 0. 判断用户名和密码必须不为空</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(username) ||</span><br><span class="line">                StringUtils.isBlank(password) ||</span><br><span class="line">                StringUtils.isBlank(confirmPwd)) &#123;</span><br><span class="line">            <span class="keyword">return</span> IMOOCJSONResult.errorMsg(<span class="string">"用户名或密码不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 查询用户名是否存在</span></span><br><span class="line">        <span class="keyword">boolean</span> isExist = userService.queryUsernameIsExist(username);</span><br><span class="line">        <span class="keyword">if</span> (isExist) &#123;</span><br><span class="line">            <span class="keyword">return</span> IMOOCJSONResult.errorMsg(<span class="string">"用户名已经存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 密码长度不能少于6位</span></span><br><span class="line">        <span class="keyword">if</span> (password.length() &lt; <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> IMOOCJSONResult.errorMsg(<span class="string">"密码长度不能少于6"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 判断两次密码是否一致</span></span><br><span class="line">        <span class="keyword">if</span> (!password.equals(confirmPwd)) &#123;</span><br><span class="line">            <span class="keyword">return</span> IMOOCJSONResult.errorMsg(<span class="string">"两次密码输入不一致"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 实现注册</span></span><br><span class="line">        Users userResult = userService.createUser(userBO);</span><br><span class="line"></span><br><span class="line">        userResult = setNullProperty(userResult);</span><br><span class="line"></span><br><span class="line">        CookieUtils.setCookie(request, response, <span class="string">"user"</span>,</span><br><span class="line">                JsonUtils.objectToJson(userResult), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 生成用户token，存入redis会话</span></span><br><span class="line">        <span class="comment">// TODO 同步购物车数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> IMOOCJSONResult.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ApiOperation</span>(value = <span class="string">"用户退出登录"</span>, notes = <span class="string">"用户退出登录"</span>, httpMethod = <span class="string">"POST"</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/logout"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IMOOCJSONResult <span class="title">logout</span><span class="params">(@RequestParam String userId,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清除用户的相关信息的cookie</span></span><br><span class="line">        CookieUtils.deleteCookie(request, response, <span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 用户退出登录，需要清空购物车</span></span><br><span class="line">        <span class="comment">// TODO 分布式会话中需要清除用户数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> IMOOCJSONResult.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="添加cookie"><a href="#添加cookie" class="headerlink" title="添加cookie"></a>添加cookie</h1><p>JsonUtils将对象转化成字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CookieUtils.setCookie(request, response, <span class="string">"user"</span>,</span><br><span class="line">        JsonUtils.objectToJson(userResult), <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="cookie工具类"><a href="#cookie工具类" class="headerlink" title="cookie工具类"></a>cookie工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: CookieUtils.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.imooc.utils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Cookie 工具类</span></span><br><span class="line"><span class="comment"> * Copyright: Copyright (c)</span></span><br><span class="line"><span class="comment"> * Company: www.imooc.com</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> imooc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CookieUtils<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 得到Cookie的值, 不编码</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cookieName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCookieValue</span><span class="params">(HttpServletRequest request, String cookieName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getCookieValue(request, cookieName, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 得到Cookie的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isDecoder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCookieValue</span><span class="params">(HttpServletRequest request, String cookieName, <span class="keyword">boolean</span> isDecoder)</span> </span>&#123;</span><br><span class="line">        Cookie[] cookieList = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookieList == <span class="keyword">null</span> || cookieName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String retValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookieList.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cookieList[i].getName().equals(cookieName)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isDecoder) &#123;</span><br><span class="line">                        retValue = URLDecoder.decode(cookieList[i].getValue(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        retValue = cookieList[i].getValue();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 得到Cookie的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encodeString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCookieValue</span><span class="params">(HttpServletRequest request, String cookieName, String encodeString)</span> </span>&#123;</span><br><span class="line">        Cookie[] cookieList = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookieList == <span class="keyword">null</span> || cookieName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String retValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookieList.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cookieList[i].getName().equals(cookieName)) &#123;</span><br><span class="line">                    retValue = URLDecoder.decode(cookieList[i].getValue(), encodeString);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 设置Cookie的值 不设置生效时间默认浏览器关闭即失效,也不编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieValue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String cookieName,</span></span></span><br><span class="line"><span class="function"><span class="params">            String cookieValue)</span> </span>&#123;</span><br><span class="line">        setCookie(request, response, cookieName, cookieValue, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 设置Cookie的值 在指定时间内生效,但不编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieMaxage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String cookieName,</span></span></span><br><span class="line"><span class="function"><span class="params">            String cookieValue, <span class="keyword">int</span> cookieMaxage)</span> </span>&#123;</span><br><span class="line">        setCookie(request, response, cookieName, cookieValue, cookieMaxage, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 设置Cookie的值 不设置生效时间,但编码</span></span><br><span class="line"><span class="comment">     * 在服务器被创建，返回给客户端，并且保存客户端</span></span><br><span class="line"><span class="comment">     * 如果设置了SETMAXAGE(int seconds)，会把cookie保存在客户端的硬盘中</span></span><br><span class="line"><span class="comment">     * 如果没有设置，会默认把cookie保存在浏览器的内存中</span></span><br><span class="line"><span class="comment">     * 一旦设置setPath()：只能通过设置的路径才能获取到当前的cookie信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isEncode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String cookieName,</span></span></span><br><span class="line"><span class="function"><span class="params">            String cookieValue, <span class="keyword">boolean</span> isEncode)</span> </span>&#123;</span><br><span class="line">        setCookie(request, response, cookieName, cookieValue, -<span class="number">1</span>, isEncode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 设置Cookie的值 在指定时间内生效, 编码参数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cookieName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cookieValue</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cookieMaxage</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> isEncode</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String cookieName,</span></span></span><br><span class="line"><span class="function"><span class="params">            String cookieValue, <span class="keyword">int</span> cookieMaxage, <span class="keyword">boolean</span> isEncode)</span> </span>&#123;</span><br><span class="line">        doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, isEncode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 设置Cookie的值 在指定时间内生效, 编码参数(指定编码)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieMaxage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encodeString</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String cookieName,</span></span></span><br><span class="line"><span class="function"><span class="params">            String cookieValue, <span class="keyword">int</span> cookieMaxage, String encodeString)</span> </span>&#123;</span><br><span class="line">        doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, encodeString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 删除Cookie带cookie域名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            String cookieName)</span> </span>&#123;</span><br><span class="line">        doSetCookie(request, response, cookieName, <span class="keyword">null</span>, -<span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//        doSetCookie(request, response, cookieName, "", -1, false);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 设置Cookie的值，并使其在指定时间内生效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieMaxage cookie生效的最大秒数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isEncode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doSetCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            String cookieName, String cookieValue, <span class="keyword">int</span> cookieMaxage, <span class="keyword">boolean</span> isEncode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cookieValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cookieValue = <span class="string">""</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isEncode) &#123;</span><br><span class="line">                cookieValue = URLEncoder.encode(cookieValue, <span class="string">"utf-8"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(cookieName, cookieValue);</span><br><span class="line">            <span class="keyword">if</span> (cookieMaxage &gt; <span class="number">0</span>)</span><br><span class="line">                cookie.setMaxAge(cookieMaxage);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != request) &#123;<span class="comment">// 设置域名的cookie</span></span><br><span class="line">               String domainName = getDomainName(request);</span><br><span class="line">                logger.info(<span class="string">"========== domainName: &#123;&#125; =========="</span>, domainName);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">"localhost"</span>.equals(domainName)) &#123;</span><br><span class="line">                   cookie.setDomain(domainName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 设置Cookie的值，并使其在指定时间内生效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieMaxage cookie生效的最大秒数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encodeString</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doSetCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            String cookieName, String cookieValue, <span class="keyword">int</span> cookieMaxage, String encodeString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cookieValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cookieValue = <span class="string">""</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cookieValue = URLEncoder.encode(cookieValue, encodeString);</span><br><span class="line">            &#125;</span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(cookieName, cookieValue);</span><br><span class="line">            <span class="keyword">if</span> (cookieMaxage &gt; <span class="number">0</span>)</span><br><span class="line">                cookie.setMaxAge(cookieMaxage);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != request) &#123;<span class="comment">// 设置域名的cookie</span></span><br><span class="line">               String domainName = getDomainName(request);</span><br><span class="line">                logger.info(<span class="string">"========== domainName: &#123;&#125; =========="</span>, domainName);</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">"localhost"</span>.equals(domainName)) &#123;</span><br><span class="line">                   cookie.setDomain(domainName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 得到cookie的域名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">getDomainName</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String domainName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        String serverName = request.getRequestURL().toString();</span><br><span class="line">        <span class="keyword">if</span> (serverName == <span class="keyword">null</span> || serverName.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            domainName = <span class="string">""</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            serverName = serverName.toLowerCase();</span><br><span class="line">            serverName = serverName.substring(<span class="number">7</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> end = serverName.indexOf(<span class="string">"/"</span>);</span><br><span class="line">            serverName = serverName.substring(<span class="number">0</span>, end);</span><br><span class="line">            <span class="keyword">if</span> (serverName.indexOf(<span class="string">":"</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               String[] ary = serverName.split(<span class="string">"\\:"</span>);</span><br><span class="line">               serverName = ary[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> String[] domains = serverName.split(<span class="string">"\\."</span>);</span><br><span class="line">            <span class="keyword">int</span> len = domains.length;</span><br><span class="line">            <span class="keyword">if</span> (len &gt; <span class="number">3</span> &amp;&amp; !isIp(serverName)) &#123;</span><br><span class="line">               <span class="comment">// www.xxx.com.cn</span></span><br><span class="line">                domainName = <span class="string">"."</span> + domains[len - <span class="number">3</span>] + <span class="string">"."</span> + domains[len - <span class="number">2</span>] + <span class="string">"."</span> + domains[len - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len &lt;= <span class="number">3</span> &amp;&amp; len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// xxx.com or xxx.cn</span></span><br><span class="line">                domainName = <span class="string">"."</span> + domains[len - <span class="number">2</span>] + <span class="string">"."</span> + domains[len - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                domainName = serverName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> domainName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">trimSpaces</span><span class="params">(String IP)</span></span>&#123;<span class="comment">//去掉IP字符串前后所有的空格  </span></span><br><span class="line">        <span class="keyword">while</span>(IP.startsWith(<span class="string">" "</span>))&#123;  </span><br><span class="line">               IP= IP.substring(<span class="number">1</span>,IP.length()).trim();  </span><br><span class="line">            &#125;  </span><br><span class="line">        <span class="keyword">while</span>(IP.endsWith(<span class="string">" "</span>))&#123;  </span><br><span class="line">               IP= IP.substring(<span class="number">0</span>,IP.length()-<span class="number">1</span>).trim();  </span><br><span class="line">            &#125;  </span><br><span class="line">        <span class="keyword">return</span> IP;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isIp</span><span class="params">(String IP)</span></span>&#123;<span class="comment">//判断是否是一个IP  </span></span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">false</span>;  </span><br><span class="line">        IP = trimSpaces(IP);  </span><br><span class="line">        <span class="keyword">if</span>(IP.matches(<span class="string">"\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;"</span>))&#123;  </span><br><span class="line">            String s[] = IP.split(<span class="string">"\\."</span>);  </span><br><span class="line">            <span class="keyword">if</span>(Integer.parseInt(s[<span class="number">0</span>])&lt;<span class="number">255</span>)  </span><br><span class="line">                <span class="keyword">if</span>(Integer.parseInt(s[<span class="number">1</span>])&lt;<span class="number">255</span>)  </span><br><span class="line">                    <span class="keyword">if</span>(Integer.parseInt(s[<span class="number">2</span>])&lt;<span class="number">255</span>)  </span><br><span class="line">                        <span class="keyword">if</span>(Integer.parseInt(s[<span class="number">3</span>])&lt;<span class="number">255</span>)  </span><br><span class="line">                            b = <span class="keyword">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> b;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="json工具类"><a href="#json工具类" class="headerlink" title="json工具类"></a>json工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: JsonUtils.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.imooc.utils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: json转换类</span></span><br><span class="line"><span class="comment"> * Copyright: Copyright (c)</span></span><br><span class="line"><span class="comment"> * Company: www.imooc.com</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> imooc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义jackson对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象转换成json字符串。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">objectToJson</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         String string = MAPPER.writeValueAsString(data);</span><br><span class="line">         <span class="keyword">return</span> string;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将json结果集转化为对象</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonData json数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanType 对象中的object类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">jsonToPojo</span><span class="params">(String jsonData, Class&lt;T&gt; beanType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            T t = MAPPER.readValue(jsonData, beanType);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将json数据转换成pojo对象list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;<span class="function">List&lt;T&gt; <span class="title">jsonToList</span><span class="params">(String jsonData, Class&lt;T&gt; beanType)</span> </span>&#123;</span><br><span class="line">       JavaType javaType = MAPPER.getTypeFactory().constructParametricType(List<span class="class">.<span class="keyword">class</span>, <span class="title">beanType</span>)</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">          List&lt;T&gt; list = MAPPER.readValue(jsonData, javaType);</span><br><span class="line">          <span class="keyword">return</span> list;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结果封装类"><a href="#结果封装类" class="headerlink" title="结果封装类"></a>结果封装类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: IMOOCJSONResult.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.imooc.utils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义响应数据结构</span></span><br><span class="line"><span class="comment"> *              本类可提供给 H5/ios/安卓/公众号/小程序 使用</span></span><br><span class="line"><span class="comment"> *              前端接受此类数据（json object)后，可自行根据业务去实现相关功能</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *              200：表示成功</span></span><br><span class="line"><span class="comment"> *              500：表示错误，错误信息在msg字段中</span></span><br><span class="line"><span class="comment"> *              501：bean验证错误，不管多少个错误都以map形式返回</span></span><br><span class="line"><span class="comment"> *              502：拦截器拦截到用户token出错</span></span><br><span class="line"><span class="comment"> *              555：异常抛出信息</span></span><br><span class="line"><span class="comment"> *              556: 用户qq校验异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Copyright</span>: Copyright (c) 2020</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Company</span>: www.imooc.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 慕课网 - 风间影月</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMOOCJSONResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义jackson对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应业务状态</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应消息</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应中的数据</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String ok; <span class="comment">// 不使用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMOOCJSONResult <span class="title">build</span><span class="params">(Integer status, String msg, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IMOOCJSONResult(status, msg, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMOOCJSONResult <span class="title">build</span><span class="params">(Integer status, String msg, Object data, String ok)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IMOOCJSONResult(status, msg, data, ok);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMOOCJSONResult <span class="title">ok</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IMOOCJSONResult(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMOOCJSONResult <span class="title">ok</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IMOOCJSONResult(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMOOCJSONResult <span class="title">errorMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IMOOCJSONResult(<span class="number">500</span>, msg, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMOOCJSONResult <span class="title">errorMap</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IMOOCJSONResult(<span class="number">501</span>, <span class="string">"error"</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMOOCJSONResult <span class="title">errorTokenMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IMOOCJSONResult(<span class="number">502</span>, msg, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMOOCJSONResult <span class="title">errorException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IMOOCJSONResult(<span class="number">555</span>, msg, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IMOOCJSONResult <span class="title">errorUserQQ</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IMOOCJSONResult(<span class="number">556</span>, msg, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IMOOCJSONResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IMOOCJSONResult</span><span class="params">(Integer status, String msg, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IMOOCJSONResult</span><span class="params">(Integer status, String msg, Object data, String ok)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.ok = ok;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IMOOCJSONResult</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">this</span>.msg = <span class="string">"OK"</span>;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isOK</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.status == <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(Integer status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getOk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> ok;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOk</span><span class="params">(String ok)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.ok = ok;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="md5工具类"><a href="#md5工具类" class="headerlink" title="md5工具类"></a>md5工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Title</span>: MD5Utils.java</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Package</span> com.imooc.utils</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 对字符串进行md5加密</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMD5Str</span><span class="params">(String strValue)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      MessageDigest md5 = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">      String newstr = Base64.encodeBase64String(md5.digest(strValue.getBytes()));</span><br><span class="line">      <span class="keyword">return</span> newstr;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         String md5 = getMD5Str(<span class="string">"imooc"</span>);</span><br><span class="line">         System.out.println(md5);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="脱敏工具类"><a href="#脱敏工具类" class="headerlink" title="脱敏工具类"></a>脱敏工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.applet.Main;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用脱敏工具类</span></span><br><span class="line"><span class="comment"> * 可用于：</span></span><br><span class="line"><span class="comment"> *      用户名</span></span><br><span class="line"><span class="comment"> *      手机号</span></span><br><span class="line"><span class="comment"> *      邮箱</span></span><br><span class="line"><span class="comment"> *      地址等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DesensitizationUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYMBOL = <span class="string">"*"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = commonDisplay(<span class="string">"慕课网"</span>);</span><br><span class="line">        String mobile = commonDisplay(<span class="string">"13900000000"</span>);</span><br><span class="line">        String mail = commonDisplay(<span class="string">"admin@imooc.com"</span>);</span><br><span class="line">        String address = commonDisplay(<span class="string">"北京大运河东路888号"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(mobile);</span><br><span class="line">        System.out.println(mail);</span><br><span class="line">        System.out.println(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用脱敏方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">commonDisplay</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == value || <span class="string">""</span>.equals(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = value.length();</span><br><span class="line">        <span class="keyword">int</span> pamaone = len / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> pamatwo = pamaone - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> pamathree = len % <span class="number">2</span>;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pamathree == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> SYMBOL;</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.append(SYMBOL);</span><br><span class="line">            stringBuilder.append(value.charAt(len - <span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (pamatwo &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                stringBuilder.append(value.substring(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">                stringBuilder.append(SYMBOL);</span><br><span class="line">                stringBuilder.append(value.substring(len - <span class="number">1</span>, len));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pamatwo &gt;= SIZE / <span class="number">2</span> &amp;&amp; SIZE + <span class="number">1</span> != len) &#123;</span><br><span class="line">                <span class="keyword">int</span> pamafive = (len - SIZE) / <span class="number">2</span>;</span><br><span class="line">                stringBuilder.append(value.substring(<span class="number">0</span>, pamafive));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">                    stringBuilder.append(SYMBOL);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((pamathree == <span class="number">0</span> &amp;&amp; SIZE / <span class="number">2</span> == <span class="number">0</span>) || (pamathree != <span class="number">0</span> &amp;&amp; SIZE % <span class="number">2</span> != <span class="number">0</span>)) &#123;</span><br><span class="line">                    stringBuilder.append(value.substring(len - pamafive, len));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    stringBuilder.append(value.substring(len - (pamafive + <span class="number">1</span>), len));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> pamafour = len - <span class="number">2</span>;</span><br><span class="line">                stringBuilder.append(value.substring(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pamafour; i++) &#123;</span><br><span class="line">                    stringBuilder.append(SYMBOL);</span><br><span class="line">                &#125;</span><br><span class="line">                stringBuilder.append(value.substring(len - <span class="number">1</span>, len));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="apache依赖"><a href="#apache依赖" class="headerlink" title="apache依赖"></a>apache依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- apache 工具类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置跨域配置实现前后端联调</title>
      <link href="p/8ea5.html"/>
      <url>p/8ea5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>CORS全称Cross-Origin Resource Sharing，意为跨域资源共享。当一个资源去访问另一个不同域名或者同域名不同端口的资源时，就会发出跨域请求。如果此时另一个资源不允许其进行跨域资源访问，那么访问的那个资源就会遇到跨域问题。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CorsConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 添加cors配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        config.addAllowedOrigin(<span class="string">"http://localhost:8080"</span>);</span><br><span class="line">        <span class="comment">//其他</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">"http://shop.z.mukewang.com:8080"</span>);</span><br><span class="line">        config.addAllowedOrigin(<span class="string">"http://center.z.mukewang.com:8080"</span>);</span><br><span class="line">        config.addAllowedOrigin(<span class="string">"http://shop.z.mukewang.com"</span>);</span><br><span class="line">        config.addAllowedOrigin(<span class="string">"http://center.z.mukewang.com"</span>);</span><br><span class="line">        config.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置是否发送cookie信息</span></span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置允许请求的方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置允许的header</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 为url添加映射路径</span></span><br><span class="line">        UrlBasedCorsConfigurationSource corsSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        corsSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 返回重新定义好的corsSource</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(corsSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat加载静态资源</title>
      <link href="p/c028.html"/>
      <url>p/c028.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>将静态资源放在Tomcat目录下的webapps包下</li><li>进入bin目录下cmd，输入<code>startup.bat</code>启动</li><li>访问<code>localhost:8080/｛项目名｝</code>即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven工程整合Swagger2文档API</title>
      <link href="p/f52a.html"/>
      <url>p/f52a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>为了减少程序员撰写文档时间，提高生产力， Swagger2 应运而生，使用 Swagger2 可以减少编写过多的文档，只需要通过代码就能生成文档API,提供给前端人员，非常方便。</p><a id="more"></a><h1 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger2 配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置swagger2"><a href="#配置swagger2" class="headerlink" title="配置swagger2"></a>配置swagger2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    http://localhost:8088/swagger-ui.html     原路径</span></span><br><span class="line"><span class="comment">//    http://localhost:8088/doc.html     原路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置swagger2核心配置 docket</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)  <span class="comment">// 指定api类型为swagger2</span></span><br><span class="line">                    .apiInfo(apiInfo())                 <span class="comment">// 用于定义api文档汇总信息</span></span><br><span class="line">                    .select()</span><br><span class="line">                    .apis(RequestHandlerSelectors</span><br><span class="line">                            .basePackage(<span class="string">"com.imooc.controller"</span>))   <span class="comment">// 指定controller包</span></span><br><span class="line">                    .paths(PathSelectors.any())         <span class="comment">// 所有controller</span></span><br><span class="line">                    .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"天天吃货 电商平台接口api"</span>)        <span class="comment">// 文档页标题</span></span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"imooc"</span>,</span><br><span class="line">                        <span class="string">"https://www.imooc.com"</span>,</span><br><span class="line">                        <span class="string">"abc@imooc.com"</span>))        <span class="comment">// 联系人信息</span></span><br><span class="line">                .description(<span class="string">"专为天天吃货提供的api文档"</span>)  <span class="comment">// 详细信息</span></span><br><span class="line">                .version(<span class="string">"1.0.1"</span>)   <span class="comment">// 文档版本号</span></span><br><span class="line">                .termsOfServiceUrl(<span class="string">"https://www.imooc.com"</span>) <span class="comment">// 网站地址</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>访问<code>localhost:8080/swagger-ui.html</code></p><p><img src="https://img.senup.cn/blog/20200806/tUJlpSxU6s4Q.png?imageslim" alt="mark"></p><h1 id="UI美化"><a href="#UI美化" class="headerlink" title="UI美化"></a>UI美化</h1><p>由于载入第三个bootstrap的依赖，因此可以实现换肤功能！</p><p>无需其他配置，只需要将访问地址改为<code>http://localhost:8088/doc.html</code>。</p><p><img src="https://img.senup.cn/blog/20200806/w6RXqqWe27uB.png?imageslim" alt="mark"></p><h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><p>- <strong>@Api()</strong>用于类；<br>表示标识这个类是swagger的资源</p><p>- <strong>@ApiOperation()</strong>用于方法；<br>表示一个http请求的操作</p><p>- <strong>@ApiParam()</strong>用于方法，参数，字段说明；<br>表示对参数的添加元数据（说明或是否必填等）</p><p>- <strong>@ApiModel()</strong>用于类<br>表示对类进行说明，用于参数用实体类接收</p><p>- <strong>@ApiModelProperty()</strong>用于方法，字段<br>表示对model属性的说明或者数据操作更改</p><p>- <strong>@ApiIgnore()</strong>用于类，方法，方法参数<br>表示这个方法或者类被忽略</p><p>- <strong>@ApiImplicitParam()</strong> 用于方法<br>表示单独的请求参数</p><p>- <strong>@ApiImplicitParams()</strong> 用于方法，包含多个 @ApiImplicitParam</p><h2 id="具体用法"><a href="#具体用法" class="headerlink" title="具体用法"></a>具体用法</h2><p><a href="https://blog.csdn.net/u014231523/article/details/76522486" target="_blank" rel="noopener">swagger2常用注解说明</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA构建Maven聚合工程</title>
      <link href="p/71b1.html"/>
      <url>p/71b1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>聚合工程里可以分为顶级项目（顶级工程、父工程）与子工程，这两者的关系其实就是父子继承的关系<br> 子工程在maven里称之为模块（module），模块之间是平级，是可以相互依赖的。</p></li><li><p>子模块可以使用顶级工程里所有的资源（依赖），子模块之间如果要使用资源，必须构建依赖（构建关系）</p></li><li><p>一个顶级工程是可以由多个不同的子工程共同组合而成。</p></li></ol>  <a id="more"></a><h1 id="创建Maven父工程"><a href="#创建Maven父工程" class="headerlink" title="创建Maven父工程"></a>创建Maven父工程</h1><p><img src="https://img.senup.cn/blog/20200806/vLYfOnKjf6B0.png?imageslim" alt="mark"></p><p>由于项目是在最外层的，因此打包方式选择 pom (此外还有默认的jar和war等方式)</p><p>在pom文件中添加如下标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="创建common子模块"><a href="#创建common子模块" class="headerlink" title="创建common子模块"></a>创建common子模块</h1><p><img src="https://img.senup.cn/blog/20200806/ACgENnkUFgbd.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200806/YkEp86y4U2Vu.png?imageslim" alt="mark"></p><h1 id="创建pojo模块"><a href="#创建pojo模块" class="headerlink" title="创建pojo模块"></a>创建pojo模块</h1><p>让pojo子模块去依赖于上一步的common子模块，在pojo的pom文件内添加依赖即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.imooc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>foodie-dev-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="创建mapper模块"><a href="#创建mapper模块" class="headerlink" title="创建mapper模块"></a>创建mapper模块</h1><p>让其依赖pojo</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      mapper -&gt; pojo -&gt; common</span></span><br><span class="line"><span class="comment">      mapper通过pojo是可以使用common中相应的方法的</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.imooc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>foodie-dev-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="创建service模块"><a href="#创建service模块" class="headerlink" title="创建service模块"></a>创建service模块</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      service -&gt; mapper -&gt; pojo -&gt; common</span></span><br><span class="line"><span class="comment">      service可以使用pojo与common中相应的方法的</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.imooc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>foodie-dev-mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="创建api模块"><a href="#创建api模块" class="headerlink" title="创建api模块"></a>创建api模块</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      common-mail</span></span><br><span class="line"><span class="comment">      api -&gt; service -&gt; mapper -&gt; pojo -&gt; common</span></span><br><span class="line"><span class="comment">      api -&gt; common-mail</span></span><br><span class="line"><span class="comment">      api可以使用service、pojo与common中相应的方法的</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.imooc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>foodie-dev-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h1><p>双击install即可。</p><p><img src="https://img.senup.cn/blog/20200806/o1LXQEFppDkm.png?imageslim" alt="mark"></p><h1 id="配置springboot依赖"><a href="#配置springboot依赖" class="headerlink" title="配置springboot依赖"></a>配置springboot依赖</h1><p>父工程pom文件引入依赖parent</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置资源属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="启动配置"><a href="#启动配置" class="headerlink" title="启动配置"></a>启动配置</h1><p>在api子模块下的resource目录创建配置文件application.yml</p><p>在java包下创建子包，子包下创建启动类Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 扫描 mybatis 通用 mapper 所在的包</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.imooc.mapper"</span>)</span><br><span class="line"><span class="comment">// 扫描所有包以及相关组件包</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"com.imooc"</span>, <span class="string">"org.n3r.idworker"</span>&#125;)</span><br><span class="line"><span class="comment">//@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h1><p>api包下创建controller包，创建HelloController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动Application.java</p><p>浏览器访问<code>localhost:8080/hello</code>，测试是否成功。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米平板4安装谷歌三件套</title>
      <link href="p/241c.html"/>
      <url>p/241c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>某天闲得慌，于是打算给吃灰的小米平板4刷个新系统。看到论坛上bliss的ROM一致好评，于是在<a href="https://forum.xda-developers.com/" target="_blank" rel="noopener">xda论坛</a>上相应版块找到下载地址，成功刷好了，很流畅，功能也很强大，美中不足的是缺少了谷歌套件，一番折腾各种谷歌安装器无果，均显示“谷歌服务框架屡次停止运行”。没办法，懒人的方法实现不了，只好找传统的方法了，于是作此记录。</p><p><img src="https://img.senup.cn/blog/20200719/3i4cSwpONelX.png?imageslim" alt="mark"></p><a id="more"></a><h3 id="下载GApps"><a href="#下载GApps" class="headerlink" title="下载GApps"></a>下载GApps</h3><p>下载一个GApps卡刷包放入手机内存，通过第三方Recovery刷完机后再刷一下这个GApps卡刷包，非常方便。一般不可使用手机默认的Recovery，常见的第三方 Recovery 有 CWM 和 TWRP，都不错。这里就不讲第三方Recovery的刷入方法了，可根据机型在论坛搜索。</p><p>那么去哪下载GApps呢？目前最好用的是<a href="http://opengapps.org/" target="_blank" rel="noopener">Open GApps</a>，基本上所有的平台和所有的Android版本都支持，而且经常更新。<a href="http://opengapps.org/" target="_blank" rel="noopener">Open GApps</a>还人性化的提供了很多GApps包版本，分别如下：</p><ol><li>a<a href="https://www.iapps.me/archives/tag/rom" target="_blank" rel="noopener">rom</a>a： a<a href="https://www.iapps.me/archives/tag/rom" target="_blank" rel="noopener">rom</a>a是一个比较特殊的版本，是用图形化的前端，让你选择需要安装的特定应用程序。</li><li>stock ：最为贴近 Nexus 机型体验的 GApps 版本，包含了 Nexus 机型所预装的所有 Google 服务和 Google 应用。需要注意的是，这个版本会用 Chrome 、 Google Now Launcher 、 Google Keybord 等 Google 应用替换掉 CM 系 ROM 中那些基于 AOSP 代码的相关应用。</li><li>full ：与 stock 版所包含的内容相同，但不会替换 AOSP 应用。</li><li>mini ：包含了完整的 Google 服务框架和主流 Google 应用，去掉了 Google Docs 等文档处理应用</li><li>micro ：包含了完整的 Google 服务框架和少数 Google 应用，如 Gmail 、 Google Calender 、 Google Now Launcher 。</li><li>nano ：包含完整的 Google 服务框架但不包含多余的 Google 应用。</li><li>pico：包含了最基础的 Google 服务框架，体积最小，一些依赖完整 Google 框架的应用（如 Google Camera ）将无法运行。</li></ol><p><strong>一般选pico就行了。</strong></p><p><img src="https://img.senup.cn/blog/20200719/bcKPWNwPuGe4.png?imageslim" alt="mark"></p><h3 id="Recovery模式刷入GApps"><a href="#Recovery模式刷入GApps" class="headerlink" title="Recovery模式刷入GApps"></a>Recovery模式刷入GApps</h3><p>下载好 GApps 之后的安装步骤与刷写 ROM 的步骤有些相似：</p><ol><li>将 GApps 压缩包放在手机内置储存或是 SD 卡的根目录，无需解压。</li><li>关机，进入第三方 Recovery （进入 Recovery 的方式因机型而异）。</li><li>进入第三方 Recovery 后，选择「 install zip 」安装 zip 压缩包，然后选择「 choose zip from /sdcard 」找到刚才放入根目录的 GApps 压缩包选择安装即可。</li><li>需要注意的是，安装 GApps 的过程全程不需要清除数据或是恢复出厂的步骤，因而刷入 GApps 之后系统中原有数据也不会受到影响。</li></ol><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p><img src="https://img.senup.cn/blog/20200719/o2sLIJlXNfye.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-晴天by杨楚骁</title>
      <link href="p/958e.html"/>
      <url>p/958e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="2afc690f361e0c0bdd6a3b3ed08721938a22366484e96ff5a97dd2ac5d88bf13">86f547b50e5d2cfeb25b7ff2ae30d604172462e447ffc36ad57473b79d64983f7e219dfdcc76c609ad3fbfdd4c516577226b8335cc27c030378b4fe45600d3e80a1b12168528ac1cdd9f1e582002a1d0f7172aff66abe73ffe3d1ab94fb78386b07345ec9a17145aad082e30796b479d9f7a3039f8098b27ad0e8fe268e4b9cfa33ee44f331c459d7dbad132aa4bdf7636456d145c5005bf7c91f78cd83942182bb407082f6be2090a9929dbb54c622ade12b856f1c6378217b391c365de558926924ae0ab23381741e477a45c8fb60c31987e00d694d974d6fbbe134a23acf141eedf6fb9f663c9b64b22cd2831cd2518b99a17f9f9088ff135a35e08c3ae186c1d9d6c148611e6031074d34f5779079cb5c1b30af393e7fbd30559c025cc99dd6286b9b578043157ab870c521b9e3a9d525f3663c0ffdd2f22b9397e7d3126e4df5b14fc20fcfeeda031cf5dcb8dc964058d0ca3a75e8114a84df82db37162bf583dac7e5e4c30e5fd9e4c753125595e02865174f7fb2c78296cc4bdddda3d1375a01177a7bc0cedd3d9c5fc017da6517d0144f6ae0dc2b495bd7d52426668f1ec8858f489a20c48e66b0e8f30f413f5c47ce2078f283c9542b94611704c6115e23151305380a310c9e56437bc7db4739a59489491c69442d43444f2886b4b54496233038a9663bca60d946820e0937bb9a766ca86de238f88cff615d1c85f5d9f23730dca158cdad6e4708e8bebdf86ff04c6373d39f05e373b99dffcb2dee07e6b09ece25f7f03b82e7c99a1d35b98ba83b26574009a04bec0d12baab57d0df79bd45f46bd0f8c21e81ab2f0d76c9f3a68a8500ac2ac82856d8410373c51fb57431fe6692c198efa61c309988831fc7a44cbcf86c1c2acf1f91797462c2d0a3c454235a6250398e9015ebee8744ecc3c8ee3117430eb326265c1c09f6146f0de8267f02490fc60164fa24e67875e9f2be9b3956657f4194853f970ce42c306af7b9d39f83876d35cb37ab11ae7aacdfa83ddbbffcf64f91866154db9834813a1f3851e51e26d460fba9f1f0b782f8dbfcdd12e387fbaf5c989c91ef368917e3b5f30e0cdbd95e95c74a82cbb845db96744d28d2b65f29c42c7adb3d3289423ceaffcb82644b38a8864ee7ec3d4798f612e652fdb07ebd68bec7634866773ad5c79f861bbc4f881ebe82e61f4b6f14c60f4b2520f3c5a44d0d53d69e9624913c0631e97fe852e05f647f779b265fc4763ad572f0ea1fe791d97759f81e7e1</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二十二岁的生日</title>
      <link href="p/40e8.html"/>
      <url>p/40e8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1298781643&auto=0&height=66"></iframe><p>其实算虚岁的话应该是二十三岁了，但是我对周岁虚岁的概念比较模糊，不是很想去纠结这个问题，那么就写的年轻点吧——祝二十二岁的自己，生日快乐。</p><p>这算是我第一次自己有生日的概念。因为老家这边过的生日是农历的，同时这个日子经常在暑假。小时候小伙伴们想帮我过，时期比较特殊连我自己都忘了，加上父母不在身旁而且不注重仪式感，所以啊，岁岁年年，我就这么大（老）了。</p><p>中午自己去吃完一顿麦当劳回来躺在床上，很舒服的睡着了。昆明的天气很好，窗外斑驳的阳光轻轻打在我的脸上。睡梦中梦到我大学毕业了，班群已经解散了，吓得我醒过来。那种状态很舒服，不算是做噩梦，就是清醒后发现自己还有时间而感到很侥幸，不然我真的错过很多事情了。要知道，以前我只会梦到高考，毕竟复读生的日子深刻的埋在我在记忆里。没想到现在的我已经进入下一个阶段，开始会怀念起大学的日子了，真奇妙呢。</p><p>打开微信，给阿琦说了这件事，她说我纯粹是闲的，原话是以后工作那么累你就没空做梦了。哈哈哈哈哈，真好。以前可能不知道要分享给谁，现在有了很好的朋友，能够给我原本孤单的大学生活多了一点暖暖的陪伴，说起来，我还挺幸运的吧。</p><p>前几年的时候，我是一个邋遢，没有目标的人。</p><p>畏畏缩缩，碰到喜欢的东西不敢去争取；</p><p>生活迷茫，说不出自己喜欢和擅长的东西；</p><p>随波逐流，有很多不好的地方而缺少动力去改变。</p><p>后来一束光照进我的生活里。她让我知道了什么叫做美好。</p><p>在追逐美好的过程中，我开始跑步开始减肥，开始和别人交流，开始学习吉他，开始注重外表，开始喜欢上这个世界……虽然后来这一束光暗淡了，但是我很感谢她。在某种程度上，她告诉了我什么叫做真正的“爱自己”：把追逐骏马的时间放在浇灌草原上。</p><p>我有了自己喜欢做的事情——吉他和编程，这两个爱好让我有了成就感，成就感给我带来了自信，自信给我带来了快乐，我也愿意花更多时间投入进去，逐渐形成正向反馈。因此，生活总是会越来越好的。</p><p>二十二岁后的目标呢，除了找份好工作，我也期待去找到一个余生的伴侣——她不需要我费尽心思去聊天，我们就像认识很久那样的老朋友那样，很惬意的享受着小确幸。</p><p>这样的她，会在哪里呢？</p><div class="note primary">            <p>那一天我二十二岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。</p>          </div><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当你</title>
      <link href="p/7566.html"/>
      <url>p/7566.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>当你的眼睛眯着笑</p><p>当你喝可乐当你吵</p><p>我想对你好</p><p>你从来不知道</p>            <i class="fa fa-quote-right"></i>          </blockquote><iframe src="//player.bilibili.com/player.html?aid=201274362&bvid=BV1bz411v7o3&cid=210468007&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试复习笔记</title>
      <link href="p/eeef.html"/>
      <url>p/eeef.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="软件测试基础"><a href="#软件测试基础" class="headerlink" title="软件测试基础"></a>软件测试基础</h1><p><img src="https://img.senup.cn/blog/20200707/RhYCYmDFA6pb.jpg?imageslim" alt="mark"></p><a id="more"></a><h1 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h1><p><img src="https://img.senup.cn/blog/20200707/cKlNwPX6xJAI.jpg?imageslim" alt="mark"></p><h1 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h1><p><img src="https://img.senup.cn/blog/20200707/3700W1jCfAEi.jpg?imageslim" alt="mark"></p><p>六种覆盖方法中，覆盖准则由弱到强依次是语句覆盖、判定覆盖（分支覆盖）、条件覆盖、判定/条件覆盖、条件组合覆盖、路径覆盖。</p><p>其中，</p><p>语句覆盖是使得程序中每个语句至少被执行一次；</p><p>判定覆盖是使得程序中的每个分支至少都通过一次；</p><p>条件覆盖是使得判定中的每个条件获得各种可能的结果；</p><p>判定/条件覆盖是使得判定中的每个条件取到各种可能的值，并使每个判定取到各种可能的结果；</p><p>条件组合覆盖是使得每个判定中条件的各种可能组合都至少出现一次；</p><h1 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h1><p><img src="https://img.senup.cn/blog/20200707/CSb94NSOBhnu.jpg?imageslim" alt="mark"></p><h1 id="安全测试"><a href="#安全测试" class="headerlink" title="安全测试"></a>安全测试</h1><p><img src="https://img.senup.cn/blog/20200707/FhoWh9ONdOnF.jpg?imageslim" alt="mark"></p><h1 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h1><p><img src="https://img.senup.cn/blog/20200707/BvnQfaeH4nB7.jpg?imageslim" alt="mark"></p><h1 id="移动APP测试"><a href="#移动APP测试" class="headerlink" title="移动APP测试"></a>移动APP测试</h1><p><img src="https://img.senup.cn/blog/20200707/hgC6KjnIIYab.jpg?imageslim" alt="mark"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>if(A &amp;&amp; B)<br>判定逻辑覆盖：需要覆盖 A&amp;&amp;B 取true和取false两种情况(A=TRUE B=TRUE  +  A=FALSE)就够了<br>条件逻辑覆盖：需要覆盖 A 取true和取false  B取true和取false   -&gt;  (A=TRUE B=FALSE  +  A=FALSE B=TRUE)两个就够了<br>条件组合覆盖：A=TRUE B=TRUE    A=TRUE B=FALSE    A=FALSE B=TRUE    A=FALSE B=FALSE      四个全取到才行<br>所以  条件组合覆盖&gt;条件逻辑覆盖&gt;判定逻辑覆盖</p><p>疲劳强度是指材料在无限多次交变载荷作用而不会产生破坏的最大应力，称为疲劳强度或疲劳极限。就像是寻找项目的极值，当到达极值后，会首先出现内存泄漏。</p><p>注意审题, 是使用语句覆盖.</p><p>语句覆盖:选择足够的测试用例，使程序中的每条语句至少执行一次。<strong><em>所谓足够的指的是越少越好</em></strong></p><p><img src="https://img.senup.cn/blog/20200707/nhFCxntscMrT.png?imageslim" alt="mark"></p><p>静态测试包括代码检查、静态结构分析、代码质量度量等。它可以由人工进行，充分发挥人的逻辑思维优势，也可以借助软件工具自动进行。</p><p>人工测试技术主要包含三种静态测试技术，分别是走查、审查和正式评审。</p><p>软件的静态测试不要求在计算机上实际执行所测程序，主要以一些人工的模拟技术对软件进行分析和测试；而软件的动态测试是通过输入一组预先按照一定的测试准则构造的实例数据来动态运行程序，而达到发现程序错误的过程。</p><p>具体的黑盒测试用例设计方法包括等价类划分法、边界值分析法、错误推测法、因果图法、判定表驱动法、正交试验设计法、功能图法、场景法等。白盒测试的测试方法有代码检查法、静态结构分析法、静态质量度量法、逻辑覆盖法、基本路径测试法、域测试、符号测试、路径覆盖和程序变异。 。</p><p>黑盒测试方法有：等价类划分法、边界值分析法、因果图法、错误推测法、综合策略、正交分析法，用于软件的确认测试</p><p>白盒测试方法有：逻辑覆盖发法，主要包括语句覆盖、判断覆盖、条件覆盖、判断条件覆盖、条件组合覆盖、路径覆盖</p><p>名字里带unit的准没错。</p><p><img src="https://img.senup.cn/blog/20200707/sDGt2fj1T236.png?imageslim" alt="mark"></p><p><strong>自顶向下测试</strong>：是从程序的初始模块开始测试。</p><p>（1）该方***在早期发现顶层的错误。</p><p>（2）早期的程序框架可以进行演示</p><p>（3）需要开发桩模块辅助测试。有些甚至需要多个桩模块辅助，加大了桩模块本来的错误影响。</p><p>（4）测试完一个上层模块后，挑选哪个模块作为下一个测试模块，以及测试的顺序没有唯一的界定标准。</p><p><strong>优点</strong>：较早地验证了主要控制和判断点；按深度优先可以首先实现和验证一个完整的软件功能；功能较早证实，带来信心；只需一个驱动，减少驱动器开发的费用；支持故障隔离。</p><p><strong>缺点</strong>：柱的开发量大；底层验证被推迟；底层组件测试不充分。</p><p><strong>自底向上测试</strong>：是从程序的底层模块开始测试。</p><p>（1）I/O操作可以提前测试，更好提交测试用例。</p><p>（2）测试后比较容易观察输出。</p><p>（3）需要开发驱动模块。</p><p>（4）直到最后一个模块提交，程序才能完整的系统测试。</p><p><strong>优点</strong>：对底层组件行为较早验证；工作最初可以并行集成，比自顶向下效率高；减少了桩的工作量；支持故障隔离。</p><p><strong>缺点</strong>：驱动的开发工作量大；对高层的验证被推迟，设计上的错误不能被及时发现。</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707121352141.png" alt="image-20200707121352141"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707135924979.png" alt="image-20200707135924979"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707135842267.png" alt="image-20200707135842267"></p><p><img src="https://img.senup.cn/blog/20200707/Fe7GHG39d5R6.png?imageslim" alt="mark"></p><p>单元测试-详细设计 集成测试-概要设计 确认测试，系统测试-需求文档 验收测试-用户需求</p><blockquote><p>（1）单元测试：</p><p> 单元测试又称为模块测试，是针对软件设计的最小单位程序模块进行正确性检查的测试工作，单元测试需要从程序内部结构出发设计测试用例，多个模块可以平行地独立进行单元测试。<br>（2）集成测试<br>又称为组装测试或联合测试，在单元测试的基础上，需要将所有模块按照概要设计说明书和详细设计说明书的要求进行组装。</p><p>（3）确认测试<br>确认测试的目标是验证软件的功能和性能以及其他特性是否与用户的要求一致。确认测试一般包括有效性测试和软件配置复查。一般有第三方测试机构进行。<br>（4）系统测试<br> 软件作为计算机系统的一部分，与硬件、网络、外设、支撑软件、数据以及人员结合在一起，在实际或模拟环境下，对计算机系统进行测试，<br>目的在于与系统需求比较，发现问题<br>（5）验收测试<br>以用户为主的测试，软件开发人员和质量保证人员参加，由用户设计测试用例。<br>不是对系统进行全覆盖测试，而是对核心业务流程进行测试。</p><p>所以软件测试类型按开发阶段分为单元测试，集成测试，确认测试，系统测试，验收测试。</p></blockquote><p>单元测试 最小单位测试<br>集成测试 按说明书组装测试<br>确认测试 确认性能，功能<br>系统测试 计算机，网络，硬件组合测试<br> 验收测试 按验收流程测试</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707122457907.png" alt="image-20200707122457907"></p><p>软件测试一般分α、β、λ三个阶段，α是第一阶段，一般只供内部测试使用；β是第二个阶段，已经消除了软件中大部分的不完善之处，但仍有可能还存在缺陷和漏洞，一般只提供给特定的用户群来测试使用；λ是第三个阶段，此时产品已经相当成熟，只需在个别地方再做进一步的优化处理即可上市发行。</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707122624069.png" alt="image-20200707122624069"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707141207284.png" alt="image-20200707141207284"></p><p>主要考察的是白盒测试的几种方法概念：语句覆盖主要特点：语句覆盖是最起码的结构覆盖要求，语句覆盖要求设计足够多的测试用例，使得程序中每条语句至少被执行一次。</p><p>判定覆盖</p><p>主要特点：判定覆盖又称为分支覆盖，它要求设计足够多的测试用例，使得程序中每个判定至少有一次为真值，有一次为假值，即：程序中的每个分支至少执行一次。每个判断的取真、取假至少执行一次。</p><p>条件覆盖</p><p>主要特点：条件覆盖要求设计足够多的测试用例，使得判定中的每个条件获得各种可能的结果，即每个条件至少有一次为真值，有一次为假值。</p><p>判定/条件覆盖</p><p>主要特点：设计足够多的测试用例，使得判定中每个条件的所有可能结果至少出现一次，每个判定本身所有可能结果也至少出现一次。</p><p>组合覆盖</p><p>主要特点：要求设计足够多的测试用例，使得每个判定中条件结果的所有可能组合至少出现一次。</p><p>路径覆盖</p><p>主要特点：设计足够的测试用例，覆盖程序中所有可能的路径。</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707123743435.png" alt="image-20200707123743435"></p><p>两个数的排列组合真假，真真，假真，假假</p><ul><li><p>条件组合覆盖：可能的组合都至少出现一次：<strong>每个条件的所有可能</strong>都至少出现一次，并且判定结果至少出现一次 ；</p></li><li><ul><li>与条件覆盖的区别：他不是简单要求每个条件出现“真”和“假”两种结果，而是要求这些结果所有可能至少出现一次</li></ul></li></ul><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707140248863.png" alt="image-20200707140248863"></p><p>if语句中的a&gt;5有两种结果， b&lt;0也有两种结果，所有总的组合有2*2=4种，即真假，假真，真真，假假</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707123852325.png" alt="image-20200707123852325"></p><p>负载测试：在一定的工作负荷下，系统的负荷及响应时间。<br>强度测试：在一定的负荷条件下，在较长时间跨度内的系统连续运行给系统性能所造成的影响。<br>容量测试：容量测试目的是通过测试预先分析出反映软件系统应用特征的某项指标的极限值（如最大并发用户数、数据库记录数等），系统在其极限值状态下没有出现任何软件故障或还能保持主要功能正常运行。容量测试还将确定测试对象在给定时间内能够持续处理的最大负载或工作量。容量测试的目的是使系统承受超额的数据容量来发现它是否能够正确处理。容量测试是面向数据的，并且它的目的是显示系统可以处理目标内确定的数据容量。</p><p><img src="https://img.senup.cn/blog/20200707/2syGsJRl20pp.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200707/278Q2nUIakGR.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200707/PMI1vIFEwyke.png?imageslim" alt="mark"></p><p>ssert提供了多个断言方法. 主用于比较测试传递进去的两个参数.</p><p>Assert.assertEquals();及其重载方法: 1. 如果两者一致, 程序继续往下运行. 2. 如果两者不一致, 中断测试方法</p><ul><li>@before<br>在每个测试方法之前都会运行一次，只需声明成public</li><li>@beforeclass<br>在类中只运行一次，必须声明成public static</li></ul><p>每运行一个@Test方法，就会为该测试类新建一个新的实例。<br>所以@BeforeClass和@AfterClass必须是static的，因为运行他们的时候，测试类还没有实例化呢。</p><p>AssertEquals、AssertNotEquals：判断两个对象是否相等</p><p><img src="https://img.senup.cn/blog/20200707/FJ3rcIISAi9V.png?imageslim" alt="mark"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707124949286.png" alt="image-20200707124949286"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707125034231.png" alt="image-20200707125034231"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707125532490.png" alt="image-20200707125532490"></p><p>单元测试的策略：</p><ol><li>逻辑覆盖、</li><li>循环覆盖、</li><li>同行评审、</li><li>桌前检查、</li><li>代码走查、</li><li>代码评审、</li><li>景泰数据流分析</li></ol><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707125627546.png" alt="image-20200707125627546"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707125741749.png" alt="image-20200707125741749"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707125830674.png" alt="image-20200707125830674"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707130033650.png" alt="image-20200707130033650"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707130513340.png" alt="image-20200707130513340"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707130628525.png" alt="image-20200707130628525"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707130731956.png" alt="image-20200707130731956"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707131213538.png" alt="image-20200707131213538"></p><p>α测试（由用户、测试人员、开发人员共同参与的内部测试）。和β测试（内测后的公测，即完全交给最终用户测试。）)</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707135537997.png" alt="image-20200707135537997"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707131406704.png" alt="image-20200707131406704"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707131503919.png" alt="image-20200707131503919"></p><p><strong>测试技术的角度应该偏重的是测试过程</strong>，对软件运行结果（动态）和运行原理（静态）都应了如指掌。而黑盒、白盒偏重的是结果多一点，黑盒是整个系统的功能结果，白盒诸如单元测试分布式结构的功能结果。</p><p><strong>静态测试</strong>：静态测试是指不运行被测程序本身，通过分析或检查源程序的语法、结构、过程、接口等来检查程序的正确性。静态测试主要包括各阶段的评审、代码检查、程序分析、软件质量度量等，用于对被测程序进行特性分析。</p><p><strong>动态测试</strong>：通过运行被测程序来检查运行结果与预期结果的差异，并分析运行效率和健壮性等指标；这种方法包括三部分：构造测试用例、执行程序、分析程序的输出结果。</p><p><strong>黑盒测试</strong>：（也称功能测试）是基于规格说明（需求文档）的测试。测试人员不考虑/不关心软件内部结构，只关心程序的功能是否符合他的功能说明。</p><p><strong>白盒测试</strong>：（也称结构测试或逻辑驱动测试）基于设计文档（结构）的测试。关注软件内部结构和程序的设计实现。</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707132045827.png" alt="image-20200707132045827"></p><p><img src="https://img.senup.cn/blog/20200707/WXnv7nzeE5nc.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200707/ORCG1PQLQjSk.png?imageslim" alt="mark"></p><p>跟着我记：鱼盼条鹿 鱼（1）盼（2）条（3）鹿（n） 1＜2＜3＜2+3＜3+3＜n 语句覆盖＜判定覆盖＜条件覆盖＜语句/判定覆盖＜条件组合覆盖＜路径覆盖</p><p>接口测试是集成测试的内容。 系统测试：安全，性能，压力，功能，回归。</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707133515161.png" alt="image-20200707133515161"></p><p><img src="https://img.senup.cn/blog/20200707/15ixw34NwwUY.png?imageslim" alt="mark"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707133727981.png" alt="image-20200707133727981"></p><p><img src="https://img.senup.cn/blog/20200707/UYUMmD8SbMc7.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200707/2LCEOdia89iT.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200707/5aGTXvrrp9eb.png?imageslim" alt="mark"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707135130722.png" alt="image-20200707135130722"></p><p><img src="https://img.senup.cn/blog/20200707/lDkrtyOIotvN.png?imageslim" alt="mark"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707141500219.png" alt="image-20200707141500219"></p><p><img src="https://img.senup.cn/blog/20200707/klDBflgXI3xU.png?imageslim" alt="mark"></p><p>（1）单元测试（也称模块测试）：针对软件设计的基本单元——程序模块，进行正确性检验的测试工作。目的在于发现各个模块内部可能存在的各种差错。单元测试需要从程序内部结构出发设计测试用例，多个模块可以平行、独立地进行测试；</p><p>（2）集成测试（也称组装测试，联合测试）：在单元测试的基础上，将所有模块按设计要求集成在一起进行测试，以检验总体设计中各模块间的接口设计问题、模块之间的相互影响、上层模块存在的各种差错及全局数据结构对系统的影响等方面。</p><p>（3）确认测试（也称验收测试，有效性测试）：主要检验软件的功能和性能是否与需求说明书中的规定一致。</p><p>（4）系统测试：将软件系统作为一个元素，放入整个实际的计算机系统中，与计算机硬件、其他软件、使用人员等系统元素结合在一起，在实际使用环境下进行综合全面的测试。</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707141919941.png" alt="image-20200707141919941"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707142012234.png" alt="image-20200707142012234"></p><p>软件验收测试分为三类：</p><p>正式验收测试；</p><p>非正式验收测试其中包括α测试（由用户、测试人员、开发人员共同参与的内部测试。）</p><p>​                 和β测试（内测后的公测，即完全交给最终用户测试。）</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707142540491.png" alt="image-20200707142540491"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707142813925.png" alt="image-20200707142813925"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707142942019.png" alt="image-20200707142942019"></p><p>自底向上测试是从“原子”模块（即软件结构最低层的模块）开始组装测试，因测试到较高层模块时，所需的下层模块功能均已具备，所以不再需要桩模块。<br>自底向上集成方法不用桩模块，测试用例的设计亦相对简单，但缺点是程序最后一个模块加入时才具有整体形象，<strong>需要开发驱动模块</strong>。</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707143047799.png" alt="image-20200707143047799"></p><p><img src="https://img.senup.cn/blog/20200707/1kfeRiFOkigW.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200707/2AJS3c3SWcHV.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200707/zqIuj9mAW6TR.png?imageslim" alt="mark"></p><p>软件测试计划评审会需要有 项目经理、客户(可选)、配置管理员、测试经理、开发组长等人的参加。</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707143739616.png" alt="image-20200707143739616"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707153756921.png" alt="image-20200707153756921"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707153826703.png" alt="image-20200707153826703"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707153848155.png" alt="image-20200707153848155"></p><p><img src="https://img.senup.cn/blog/20200707/kOkuKzkAbuCR.png?imageslim" alt="mark"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707155335837.png" alt="image-20200707155335837"></p><p><img src="https://img.senup.cn/blog/20200707/iwPBAyS2rpnX.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200707/ITSPAq9judGX.png?imageslim" alt="mark"></p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200707180642621.png" alt="image-20200707180642621"></p><p>mock：对代码中某些不容易获取的对象创建虚拟对象来测试</p><p>stub：桩函数是代替某些被调用了但是没有编写代码，一般再增量迭代自底向上的过程中不用编写。再自顶向下的过程中需要编写</p><p>驱动函数：调用被测函数，给被测函数传参</p><p><img src="https://img.senup.cn/blog/20200707/AFTp21UK7WkC.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200707/scpB4TXzAuqU.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-一直很安静</title>
      <link href="p/dd3.html"/>
      <url>p/dd3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>空荡的街景 想找个人放感情</p><p>做这种决定 是寂寞与我为邻</p><p>我们的爱情 像你路过的风景</p><p>一直在进行 脚步却从来不会为我而停</p>            <i class="fa fa-quote-right"></i>          </blockquote><a id="more"></a><p><img src="https://img.senup.cn/blog/20200628/6rtPbjGvqTgY.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200628/UXpSnxICw9vs.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200628/tEM6hT56KYlQ.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200628/6Yx6YYC9LrQE.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200628/fUvCHRYrRwxH.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建网盘小记</title>
      <link href="p/ae4c.html"/>
      <url>p/ae4c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>大概是这个样子的，可以实现Aria2离线下载到onedrive，然后在oneIndex上对文件进行管理、播放、预览、下载、搭建图床等等操作：）</p><p>其实上一年我有尝试过搭建这种网盘，当时由于自动上传脚本屡次失败，让我放弃了搭建。这一次能够搭建完成，很大程度要感谢马云爸爸送的一年的云服务器，让我有机会成功嘻嘻。</p><p><img src="https://img.senup.cn/blog/20200624/pTFPVHH9jNyF.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200624/VbtLfGDJni7V.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200624/hzYs6wYjfhnG.png?imageslim" alt="mark"></p><a id="more"></a><p>主要是参考某个老哥的教程，写的很细，真的对新手很友好了。</p><blockquote><p><a href="https://euukey.com/2020/02/16/20200216-aria2-ariang-olaindex-da-jian-ke-chi-xian-xia-zai-de-wang-pan/" target="_blank" rel="noopener">aria2+ariaNG+OLAINDEX搭建可离线下载的网盘</a></p><p><a href="https://euukey.com/2020/03/16/20200316-chuan-xin-ban-ben-de-aria2-chi-xian-xia-zai/" target="_blank" rel="noopener">OLAINDEX船新版本的aria2离线下载</a></p></blockquote><p>我再补充点可能会碰到的问题。</p><h2 id="碰到的问题一：https导致ariaNg连接失败"><a href="#碰到的问题一：https导致ariaNg连接失败" class="headerlink" title="碰到的问题一：https导致ariaNg连接失败"></a>碰到的问题一：https导致ariaNg连接失败</h2><p>这一步的做法是修改配置文件，指定证书以及私钥。</p><p>难点是通过letsencrypt生成的证书不知道路径以及格式如何。</p><p>下面是我的解决方法：</p><p><img src="https://img.senup.cn/blog/20200624/wnpcqxyXsgaC.png?imageslim" alt="mark"></p><h2 id="碰到的问题二：无法自动上传到oneDrive"><a href="#碰到的问题二：无法自动上传到oneDrive" class="headerlink" title="碰到的问题二：无法自动上传到oneDrive"></a>碰到的问题二：无法自动上传到oneDrive</h2><p>这一步只需要指定好文件存放的路径即可。</p><p>一开始走了许多弯路，后来去github上onedriveUploader看了作者写的使用文档，知道原理后发现路径没有改。</p><p><img src="https://img.senup.cn/blog/20200624/q9b5LMoHuDwx.png?imageslim" alt="mark"></p><h2 id="碰到的问题三：为网站添加站点图标"><a href="#碰到的问题三：为网站添加站点图标" class="headerlink" title="碰到的问题三：为网站添加站点图标"></a>碰到的问题三：为网站添加站点图标</h2><p>其实很简单，就是在宝塔面板上public目录下添加favicon.ico。</p><p>然后，oneindex换主题的时候就会刷新出新的图标了，亏我还去提了issue…</p><p><img src="https://img.senup.cn/blog/20200624/LFwcqaPVCm3J.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-好好</title>
      <link href="p/8bca.html"/>
      <url>p/8bca.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>我们都要把自己照顾好<br>好到遗憾无法打扰<br>好好的生活  好好的变老<br>好好假装我已经把你忘掉</p>            <i class="fa fa-quote-right"></i>          </blockquote><a id="more"></a><p><img src="https://img.senup.cn/blog/20200622/OftWXP2ILSxv.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200622/1oDkMTKvMy5g.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200622/yXjjEkUz3FRC.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java错题0621</title>
      <link href="p/92a2.html"/>
      <url>p/92a2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img.senup.cn/blog/20200621/wkrCXxBk5LN3.png?imageslim" alt="mark"></p><a id="more"></a><p><img src="https://img.senup.cn/blog/20200621/xQhhLoVNde0m.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200621/iulHD8FsCyaL.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200621/B9rxs9XY7K4E.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-我也曾想过一了百了</title>
      <link href="p/fc1b.html"/>
      <url>p/fc1b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>一味想着死的事，一定是因为太过认真的活。 </p><p>（死ぬことばかり考えてしまうのは， きっきる事に真面目すぎるから。）</p><p>我曾想死是因为，还未和你相遇。 </p><p>(仆が死のうと思ったのは ,まだあなたに出会ってなかったから。）</p><p>因为像你这样的人生于这世上，我稍稍喜欢这个世界了。</p><p> (なたのような人が生まれた 世界を少し好きになったよ 。）</p><p>因为像你这样的人生于这世上，我稍稍期待这个世界了。</p><p> (なたのような人が生きてる 世界に少し期待するよ 。</p>            <i class="fa fa-quote-right"></i>          </blockquote><a id="more"></a><h1 id="我也曾想过一了百了"><a href="#我也曾想过一了百了" class="headerlink" title="我也曾想过一了百了"></a><a href="https://pdf.senup.cn/sometimesSad.pdf" target="_blank" rel="noopener">我也曾想过一了百了</a></h1><object data="https://pdf.senup.cn/sometimesSad.pdf" type="application/pdf" width="100%" height="877px"></object>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java错题笔记0620</title>
      <link href="p/fba7.html"/>
      <url>p/fba7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img.senup.cn/blog/20200620/ICdKJXOz7y2u.png?imageslim" alt="mark"></p><a id="more"></a><blockquote><p>\1. java数据类型分为:</p><p>​    <strong>*** **基本数据类型</strong></p><p>​    <strong>*** **引用数据类型</strong></p><p>2.对于”==”</p><p>​    *用于基本数据类型相互比较. 比较二者的值是否相等.</p><p>​    *用于引用数据类型相互比较. 比较二者地址是否相等.</p><p>​    *不能用于基本数据类型与引用型比较.</p><p>3.对于”equals”:</p><p>​    * 不能用于基本数据类型比较(因为这是一个方法, 继承自object).</p><p>​    *用于进行对象的比较, 比较二者的引用地址是否相同.</p><p> 4.特殊情况:</p><p>​    1)数值型基本类型和数值型类会存在<strong>自动装箱</strong>和<strong>自动拆箱</strong>.</p><p>​    2)字符串会以常量形式存在, 如果多个字符串变量值相同, 则他们指向同一个地址.</p><p>​    3)数值类型会存在<strong>类型自动转换</strong>.</p></blockquote><p><img src="https://img.senup.cn/blog/20200620/dtuLqIgtdGFn.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200620/ApHSBHB2aPwU.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200620/QKPklbO0Aema.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200620/U38uoiutCboB.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200620/C5cjaraUeJQD.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200620/gGYkj6xWawMw.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200620/vFv3aeVtFTXF.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200620/h4ubqRlH0dYK.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200620/I5depgokDBVz.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200620/TrFmUYCGbf2s.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200620/RwYcG7PLWDE5.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200620/2maxS9V9jaBX.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200620/Q66laaIYLbqg.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200620/xX5hvWDigS1h.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java错题笔记0619</title>
      <link href="p/d67.html"/>
      <url>p/d67.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img.senup.cn/blog/20200619/XeVGMCnCULFc.png?imageslim" alt="mark"></p><h2 id="深入理解Java中的String"><a href="#深入理解Java中的String" class="headerlink" title="深入理解Java中的String"></a><a href="https://www.cnblogs.com/xiaoxi/p/6036701.html" target="_blank" rel="noopener">深入理解Java中的String</a></h2><a id="more"></a><p><img src="https://img.senup.cn/blog/20200619/6iEyM3wwnxe5.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200619/nq0w8kkD5cbB.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200619/0NiqwEUHtsQE.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200619/hd9ALWjRMQGt.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200619/XQPwWIIlY7Fx.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200619/98NkmOq25qEW.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200619/9D2NAQkpj8rs.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200619/iGvnLxKqeNXO.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200619/C1rw9eFJJvGf.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200619/3htHmcTMTEg6.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200619/ThNaHbU9Ku9W.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200619/KL9sXdMBS212.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200619/T3b57W618flO.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200619/IYohnDc7r6f2.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unity3D学习笔记</title>
      <link href="p/2de.html"/>
      <url>p/2de.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在unity3D的学习中，我得到的一点启发是：英语真的非常重要。无论是第一次打开编辑器的界面，或者是查询某些资源素材，或者在stackoverflow提问，单纯使用中文稍显寸步难行。同时国内的教程大多不成体系。在谷歌的搜索中，我发觉台湾unity的教材意外的多，讲授unity的老师不仅专业也幽默，很能让你学下去。所以，有时候用繁体字搜索不失为一个不错的建议。总之呢，对于开发者来说，英语的熟练程度和解决问题的速度呈正相关。</p><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="移动自己的方法"><a href="#移动自己的方法" class="headerlink" title="移动自己的方法"></a>移动自己的方法</h2><p>位移：鼠标中键</p><p>旋转：鼠标右键</p><p>缩放：鼠标滚轮</p><p>Fly Mode：鼠标右键+WASDQE</p><p>Lock rotate(focus)：f=&gt;alt+鼠标左键</p><p>复制Object=&gt;ctrl+d</p><a id="more"></a><h2 id="移动别人的方法"><a href="#移动别人的方法" class="headerlink" title="移动别人的方法"></a>移动别人的方法</h2><p>检视：Q</p><p>位移：W</p><p>旋转：E</p><p>缩放：R</p><h1 id="材质球"><a href="#材质球" class="headerlink" title="材质球"></a>材质球</h1><ol><li>Albedo Texture反光色</li><li>Tiling 重复次数</li><li>Offset 偏移量</li><li>Metalic 金属度</li><li>Smootness 平滑度</li><li>Normal 法向量贴图</li></ol><p><strong>关键字：pbr material</strong></p><p><a href="https://freepbr.com" target="_blank" rel="noopener">推荐网站</a></p><h1 id="天空"><a href="#天空" class="headerlink" title="天空"></a>天空</h1><p>关键字： skybox/hdri</p><ol><li>把贴图转成cube apply 然后拖进sence view</li><li>使用hdri:创建material-shader改成skybox下的panoramic -把贴图拖进texture-完成创建-拖动使用</li></ol><p>window-lighting-setting</p><p>Metalic 介于环境光和环境反射中间</p><h1 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h1><p><a href="http://www.textures.com" target="_blank" rel="noopener">www.textures.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大四的抉择</title>
      <link href="p/966a.html"/>
      <url>p/966a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>指导老师找了发哥，意外发现我是第一个预约他当指导老师的学生。虽然技术水平上发哥确实不太行，但我的师兄们流传出他指导方面很认真，口碑不错。在发哥答应之后，我突然对这个老师有点改观，他可能没有我想象得那么差劲。当然，另一面是我必须得去好好学学文档的排版了，这个东西发哥可以讲好几节课（笑</li><li>学校方面提供了三家企业的实训选择，我最后决定去广州实训。在权衡利弊方面，我一向比较功利，腾科的培训理论上没有厦门中软的培训要好，同时厦门的生活环境也相当不错。然而现实是：自己对美好的事物容易感到感伤，因此大海星空这些东西并不适合此刻的我。在广州的话，有机会以后直接在本地找工作，贱哥也在那儿，挺好的。腾科培训水平也不高，看了一下会学习的技术栈，springboot+mybatis plus+layui什么的，这都是我早就学会的东西了，除了spring cloud+socket编程没接触过，其他都是老生常谈了。自认为休闲的可以在那儿养老。还是多花时间修炼计算机内功好了，自学才是王道。</li><li>我的朋友们有了不同的选择。阿亮想去粤嵌，飚哥想去腾科，丹哥想去厦门，林哥想考研考公……转眼间，大学也来到最终章了，离别还是让人有点不舍。</li><li>雄大从中兴跳槽到华为了。这个故事带给我蛮大震撼的。大佬还是大佬啊~家族群里面大家都很佩服他，我也很崇拜他，同时为自己的能力菜也感到焦虑。华为的面试很难吧？</li><li>最近有点牙疼，限制了我盲目进食的欲望。</li><li>有一个发现：当我心态平和的时候，学习效率相当高。会不会有时候我其实也蛮认真的？</li><li>学习了一点多线程与并发的知识，深刻体会到计算机原理的重要性，当然这里是抽象成jvm来理解。学习了一点数据结构，发现数据结构大量应用在各种方面，比如GC，比如栈的多种应用等等。所有的所有，突然打醒了我：基础学科相当重要。</li><li>在自我挣扎的苦闷中，我想到一句话送给自己：热爱可抵岁月漫长。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程学习笔记</title>
      <link href="p/fbb6.html"/>
      <url>p/fbb6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>判断是否线程安全这块儿，为 ThreadSafe 类添加子类，子类覆盖 method2 或 method3 方法，会产生线程安全问题，原因是子类覆盖的方法中新创建的线程与主线程同时访问共享变量list。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadSafe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> loopNumber)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            method2(list);</span><br><span class="line">            method3(list);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        list.add(<span class="string">"1"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">    list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeSubClass</span> <span class="keyword">extends</span> <span class="title">ThreadSafe</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>synchronized关键字遇到多个共享变量的时候，采取的思路应该是挖掘公有的部分，比如类。</p></li><li><p>“线程八锁”考察的是synchronized锁住的是哪个对象，这里又分为类对象和实例对象。</p></li><li><p>常见线程安全类</p><blockquote><p>String<br>Integer<br>StringBuffer<br>Random<br>Vector<br>Hashtable<br>java.util.concurrent 包下的类</p></blockquote><p>这里说它们是线程安全的是指，多个线程调用它们同一个实例的某个方法时，是线程安全的。</p></li></ol><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a><a href="https://pdf.senup.cn/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B_%E5%8E%9F%E7%90%86.pdf" target="_blank" rel="noopener">原理</a></h2><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a><a href="https://pdf.senup.cn/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B_%E5%BA%94%E7%94%A8.pdf" target="_blank" rel="noopener">应用</a></h2><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a><a href="https://pdf.senup.cn/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B_%E6%A8%A1%E5%BC%8F.pdf" target="_blank" rel="noopener">模式</a></h2><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a><a href="https://pdf.senup.cn/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.pdf" target="_blank" rel="noopener">并发编程</a></h2><div class="pdfobject-container" data-target="https://pdf.senup.cn/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.pdf" data-height="500px"></div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-设计一个有getMin功能的栈</title>
      <link href="p/552e.html"/>
      <url>p/552e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>【题目】</p><p>实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返回栈中最小元素的操作。</p><p>【要求】</p><p>1.pop、push、getMin操作的时间复杂度都是O（1）。</p><p>2.设计的栈类型可以使用现成的栈结构。</p><a id="more"></a><h2 id="第一种解法"><a href="#第一种解法" class="headerlink" title="第一种解法"></a>第一种解法</h2><p><img src="https://img.senup.cn/blog/20200601/TkE58WU67xkO.png?imageslim" alt="mark"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stack_queue_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 涛哥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 2020/6/1  9:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackWithGetMin</span> </span>&#123;</span><br><span class="line">    <span class="comment">//首先要有两个栈 分别存放stackData stackMin</span></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stackData;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stackMin;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StackWithGetMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stackData = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.stackMin = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//压入 先压入stackData 判断元素是否小于等于stackMin栈顶的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> newNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stackMin.isEmpty()) &#123;</span><br><span class="line">            stackMin.push(newNum);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newNum &lt;= stackMin.peek()) &#123;</span><br><span class="line">            stackMin.push(newNum);</span><br><span class="line">        &#125;</span><br><span class="line">        stackData.push(newNum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//弹出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stackData.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"your stack is empty!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = stackData.pop();</span><br><span class="line">        <span class="keyword">if</span> (result == stackMin.peek()) &#123;</span><br><span class="line">            stackMin.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stackMin.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"your stack is empty!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stackMin.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StackWithGetMin stack = <span class="keyword">new</span> StackWithGetMin();</span><br><span class="line">        stack.push(<span class="number">3</span>);</span><br><span class="line">        stack.push(<span class="number">4</span>);</span><br><span class="line">        stack.push(<span class="number">5</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        System.out.println(stack.getMin());</span><br><span class="line">        stack.pop();</span><br><span class="line">        stack.pop();</span><br><span class="line">        System.out.println(stack.getMin());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二种解法"><a href="#第二种解法" class="headerlink" title="第二种解法"></a>第二种解法</h2><p>压入：压入stackData的同时同步压入stackMin，后者只需要压入空值占个位置就行。</p><p>好处：弹出的时候同步弹出，无需判断。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构学习笔记-Trie</title>
      <link href="p/d126.html"/>
      <url>p/d126.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在<a href="https://zh.wikipedia.org/wiki/计算机科学" target="_blank" rel="noopener">计算机科学</a>中，<strong>trie</strong>，又称<strong>前缀树</strong>或<strong>字典树</strong>，是一种有序<a href="https://zh.wikipedia.org/wiki/树_(数据结构)" target="_blank" rel="noopener">树</a>，用于保存<a href="https://zh.wikipedia.org/wiki/关联数组" target="_blank" rel="noopener">关联数组</a>，其中的键通常是<a href="https://zh.wikipedia.org/wiki/字符串" target="_blank" rel="noopener">字符串</a>。与<a href="https://zh.wikipedia.org/wiki/二叉查找树" target="_blank" rel="noopener">二叉查找树</a>不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的<a href="https://zh.wikipedia.org/wiki/前缀" target="_blank" rel="noopener">前缀</a>，也就是这个节点对应的字符串，而根节点对应<a href="https://zh.wikipedia.org/wiki/空字符串" target="_blank" rel="noopener">空字符串</a>。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p><p>Trie这个术语来自于re<strong>trie</strong>val。根据<a href="https://zh.wikipedia.org/wiki/词源学" target="_blank" rel="noopener">词源学</a>，trie的发明者Edward Fredkin把它读作<a href="https://zh.wikipedia.org/wiki/Help:英語國際音標" target="_blank" rel="noopener">/ˈtriː/</a> “tree”。<a href="https://zh.wikipedia.org/zh-hans/Trie#cite_note-DADS-1" target="_blank" rel="noopener">[1]</a><a href="https://zh.wikipedia.org/zh-hans/Trie#cite_note-Liang1983-2" target="_blank" rel="noopener">[2]</a>但是，其他作者把它读作<a href="https://zh.wikipedia.org/wiki/Help:英語國際音標" target="_blank" rel="noopener">/ˈtraɪ/</a> “try”。<a href="https://zh.wikipedia.org/zh-hans/Trie#cite_note-DADS-1" target="_blank" rel="noopener">[1]</a><a href="https://zh.wikipedia.org/zh-hans/Trie#cite_note-Liang1983-2" target="_blank" rel="noopener">[2]</a><a href="https://zh.wikipedia.org/zh-hans/Trie#cite_note-KnuthVol3-3" target="_blank" rel="noopener">[3]</a></p><p>在图示中，键标注在节点中，值标注在节点之下。每一个完整的英文单词对应一个特定的整数。Trie可以看作是一个<a href="https://zh.wikipedia.org/wiki/确定有限状态自动机" target="_blank" rel="noopener">确定有限状态自动机</a>，尽管边上的符号一般是隐含在分支的顺序中的。</p><p>键不需要被显式地保存在节点中。图示中标注出完整的单词，只是为了演示trie的原理。</p><p>trie中的键通常是字符串，但也可以是其它的结构。trie的算法可以很容易地修改为处理其它结构的有序序列，比如一串数字或者形状的排列。比如，<strong>bitwise trie</strong>中的键是一串位元，可以用于表示整数或者内存地址。</p><a id="more"></a><h2 id="什么是Trie"><a href="#什么是Trie" class="headerlink" title="什么是Trie"></a>什么是Trie</h2><p><img src="https://img.senup.cn/blog/20200531/dA9i68FTKAd8.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200531/rMlN6VqG7X9L.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200531/v8JBRikMULNW.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200531/qhFkUvzw7fMl.png?imageslim" alt="mark"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day11_Trie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: 涛哥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 2020/5/31  13:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@auther</span>: 涛哥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 自定义类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2020/5/31 13:46</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> isWord;</span><br><span class="line">        <span class="keyword">public</span> TreeMap&lt;Character, Node&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">boolean</span> isWord)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.isWord = isWord;</span><br><span class="line">            next = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> Node();</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得Trie中存储的单词数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//非递归的写法 相较于树(后期尝试递归写法)</span></span><br><span class="line">    <span class="comment">//向trie中添加一个新的单词word</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        Node cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (cur.next.get(c) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cur.next.put(c, <span class="keyword">new</span> Node());</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!cur.isWord) &#123;</span><br><span class="line">            cur.isWord=<span class="keyword">true</span>;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询单词是否在trie中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        Node cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (cur.next.get(c) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.isWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字典树：前缀搜索</span></span><br><span class="line">    <span class="comment">//查询是否在trie中有单词以prefix为前缀</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        Node cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prefix.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = prefix.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (cur.next.get(c) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot2.x解决emoji表情插入问题</title>
      <link href="p/bc3a.html"/>
      <url>p/bc3a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>飚哥最近做了个APP，让我来做测试。结果发现消息通信那块儿不能插入emoji表情，因为之前遇到过这个问题以为很简单于是懒得改。所以我就自告奋勇地让他把数据库字符集从utf-8改成utfmb4，结果似乎没有解决问题，做实了纸上谈兵的寄几~囧</p><p><img src="https://img.senup.cn/blog/20200529/TSCKCiEB2BSq.png?imageslim" alt></p><a id="more"></a><p>后来找到了解决办法，不愧是我！</p><p>原理大概是这样：</p><blockquote><p>在mysql 5.5 之前，UTF-8编码只支持1-3个字节；从MySQL 5.5开始，可以支持4个字节UTF编码 utf8mb4 ，一个字符能够支持更多的字符集，也能够支持更多表情符号。</p><p>utf8mb4兼容utf8，且比utf8能表示更多的字符，是utf8字符集的超集。所以现在一些新的业务，比如IOS中的emoji表情，会将MySQL数据库的字符集设置为utf8mb4。</p></blockquote><p>步骤如下：</p><h3 id="更改MySQL配置"><a href="#更改MySQL配置" class="headerlink" title="更改MySQL配置"></a>更改MySQL配置</h3><p>MySQL中使用查询语句<code>SHOW VARIABLES LIKE &#39;%character%&#39;;</code>查看字符集状态</p><p><img src="https://img.senup.cn/blog/20200530/JkUWFl3lt28t.png?imageslim" alt="mark"></p><p>如果不是的话，那就需要编辑mysql的配置文件，比如my.ini，加入以下配置把相关编码改成utf8mb4，保存配置文件并重启mysql服务[注意]：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">client</span>]</span><br><span class="line"><span class="keyword">default</span>-character-<span class="keyword">set</span> = utf8mb4</span><br><span class="line">[<span class="meta">mysql</span>]</span><br><span class="line"><span class="keyword">default</span>-character-<span class="keyword">set</span> = utf8mb4</span><br><span class="line">[<span class="meta">mysqld</span>]</span><br><span class="line">character-<span class="keyword">set</span>-server = utf8mb4</span><br></pre></td></tr></table></figure><p><img src="https://img.senup.cn/blog/20200530/bHMEPGfE7JkE.png?imageslim" alt="mark"></p><h3 id="更改字段、表和数据库字符集"><a href="#更改字段、表和数据库字符集" class="headerlink" title="更改字段、表和数据库字符集"></a>更改字段、表和数据库字符集</h3><p><img src="https://img.senup.cn/blog/20200530/t73cszsix2yk.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200530/t411Ic96BaMN.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200530/Ek9tJu1Ba0aW.png?imageslim" alt="mark"></p><h3 id="springboot配置"><a href="#springboot配置" class="headerlink" title="springboot配置"></a>springboot配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.properties文件中添加如下配置：</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/miniprogram?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p><img src="https://img.senup.cn/blog/20200530/6Hh5La9zK6qr.png?imageslim" alt="mark"></p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://img.senup.cn/blog/20200530/hsB1laWwjhuc.png?imageslim" alt="mark"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/9c405ec34cd2" target="_blank" rel="noopener">MYSQL插入Emoji表情问题</a></p><p><a href="https://blog.csdn.net/kingmax54212008/article/details/82941332" target="_blank" rel="noopener">10分钟完成MySQL对emoji的支持</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对springboot事务传播的理解</title>
      <link href="p/a28e.html"/>
      <url>p/a28e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>事务</strong>是逻辑上的一组操作，要么都执行，要么都不执行。</p><p>(外围事务回滚，内嵌事务一定回滚，而内嵌事务可以单独回滚而不影响外围主事务和其他子事务。)</p><h3 id="事务传播-Propagation"><a href="#事务传播-Propagation" class="headerlink" title="事务传播 - Propagation"></a>事务传播 - <em>Propagation</em></h3><ul><li><strong>REQUIRED</strong>: 使用当前的事务，如果当前没有事务，则自己新建一个事务，子方法是必须运行在一个事务中的；如果当前存在事务，则子方法加入这个事务，成为一个整体。<strong>举例</strong>：领导没饭吃，我有钱，我会自己买了自己吃；领导有的吃，会分给你一起吃。</li><li><strong>SUPPORTS</strong>: 如果当前有事务，则使用事务；如果当前没有事务，则不使用事务。<strong>举例</strong>：领导没饭吃，我也没饭吃；领导有饭吃，我也有饭吃。</li><li><strong>MANDATORY</strong>: 该传播属性强制<strong>调用方</strong>必须存在一个事务，如果不存在，则抛出异常。<strong>举例</strong>：领导必须管饭，不管饭没饭吃，我就不乐意了，就不干了（抛出异常）</li><li><strong>REQUIRES_NEW</strong>: 如果当前有事务，则挂起该事务，并且自己创建一个新的事务给自己使用；即子方法和父方法是区分开的，父级不影响子方法的事务。如果当前没有事务，则同 REQUIRED。<strong>举例</strong>：领导有饭吃，我偏不要，我自己买了自己吃</li><li><strong>NOT_SUPPORTED</strong>: 如果当前有事务，则把事务挂起，自己不适用事务去运行数据库操作。同时，子方法没有事务，也和父级相互独立。<strong>举例</strong>：领导有饭吃，分一点给你，我太忙了，放一边，我不吃</li><li><strong>NEVER</strong>: 如果当前有事务存在，则抛出异常；其余时间没有事务。<strong>举例</strong>：领导有饭给你吃，我不想吃，我热爱工作，我抛出异常</li><li><strong>NESTED</strong>: 如果当前有事务，则开启子事务（嵌套事务），嵌套事务是独立提交或者回滚；如果当前没有事务，则同 REQUIRED。但是如果主事务提交，则会携带子事务一起提交。如果主事务回滚，则子事务会一起回滚。相反，子事务异常，则父事务可以回滚或不回滚（父事务使用try/catch不回滚）。<strong>举例</strong>：领导决策不对，老板怪罪，领导带着小弟一同受罪。小弟出了差错，领导可以推卸责任。</li></ul><a id="more"></a><p>实战中，REQUIRED用于增删改，SUPPORTS用于查询。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Q : 为什么启动类Application不需要开启事务管理注解，而可以直接在方法中使用事务注解？</p><p>A : springboot自动装配。即在源码层面上spring.factories自动加入了事务管理，基于Aop（面向切面）。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer06-重建二叉树</title>
      <link href="p/31c3.html"/>
      <url>p/31c3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><a id="more"></a><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们知道，前序遍历的第一个节点就是树的根节点，所以我们先根据前序遍历序列的第一个数字创建根结点，接下来在中序遍历序列中找到根结点的位置，根节点的左边就是左子树，右边就是右子树，这样就能确定左、右子树结点的数量。在前序遍历和中序遍历的序列中划分了左、右子树结点的值之后，就可以递归地去分别构建它的左右子树。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer05-从尾到头打印链表</title>
      <link href="p/2a08.html"/>
      <url>p/2a08.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>题目：输入一个链表的头结点，从尾到头反过来打印出每个结点的值。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>递归的思路，只要链表不为空，一直往后进行遍历，然后直到到达链表的末尾，就开始用数组保存下来结果。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> question05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next=<span class="keyword">null</span>;</span><br><span class="line">        ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (listNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        add(listNode,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ListNode listNode, ArrayList&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        if (listNode.next != null) &#123;</span></span><br><span class="line"><span class="comment">//            add(listNode.next,list);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        list.add(listNode.val);</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (listNode.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            list.add(listNode.val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(listNode.val);</span><br><span class="line">        add(listNode.next,list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution s = <span class="keyword">new</span> Solution();</span><br><span class="line">        ListNode root = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        root.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        ArrayList&lt;Integer&gt; result = s.printListFromTailToHead(root);</span><br><span class="line">        <span class="keyword">for</span> (Integer r:result</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.println(r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer04-替换空格</title>
      <link href="p/7957.html"/>
      <url>p/7957.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><a id="more"></a><h1 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h1><p><img src="https://img.senup.cn/blog/20200528/OoLNYBRmLFg6.png?imageslim" alt="mark"></p><h1 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h1><ul><li>剑指offer的思路.就是一个空格变成了%20，也就是说每有一个空格，长度要增加2，所以首先先计算有多少个空格，这样长度就能增加多少，得到增加后的长度Length。</li><li>然后new一个Length长度的字符数组，从尾到头开始复制原来的数组，如果复制过程中，如果字符不是空格，直接复制，如果字符是空格，那么需要把这个空格变成%20（这个复制过程就是把新建的数组比如现在到了 K这个位置，然后就是K，K-1，K-2这三个位置依次变成0,2，%这三个字符，因为是从后往前复制的所以是倒序）</li><li>重复这个过程就行。</li><li>如果相等，返回true;</li></ul><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算出空格的数目</span></span><br><span class="line">        <span class="keyword">int</span> spaceCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i) == <span class="string">' '</span>) &#123;</span><br><span class="line">                spaceCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算出变化后的数组长度的最后下标</span></span><br><span class="line">        <span class="keyword">int</span> newIndex = spaceCount * <span class="number">2</span> + str.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> oldIndex = str.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//设置新的空间长度 这一句放到上面出现异常？因为上面两句需要str的原始长度 更改后越界</span></span><br><span class="line">        str.setLength(spaceCount * <span class="number">2</span> + str.length());</span><br><span class="line">        <span class="comment">//替换</span></span><br><span class="line">        <span class="comment">//边界条件 从后到最前</span></span><br><span class="line">        <span class="keyword">while</span> (oldIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(oldIndex) == <span class="string">' '</span>) &#123;</span><br><span class="line">                str.setCharAt(newIndex--, <span class="string">'0'</span>);</span><br><span class="line">                str.setCharAt(newIndex--, <span class="string">'2'</span>);</span><br><span class="line">                str.setCharAt(newIndex--, <span class="string">'%'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str.setCharAt(newIndex--, str.charAt(oldIndex));</span><br><span class="line">            &#125;</span><br><span class="line">            oldIndex--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution s = <span class="keyword">new</span> Solution();</span><br><span class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="string">"hello world"</span>);</span><br><span class="line">        String res = s.replaceSpace(buffer);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从后往前遍历,然后再反转输出</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> index = str.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i) == <span class="string">' '</span>) &#123;</span><br><span class="line">                res.append(<span class="string">"02%"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.append(str.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer03-二维数组中的查找</title>
      <link href="p/fd7e.html"/>
      <url>p/fd7e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><a id="more"></a><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>二维数组是有序的，从右上角来看，向左数字递减，向下数字递增。</p><p>因此从右上角开始查找，</p><ul><li>当要查找数字比右上角数字大时，下移；</li><li>当要查找数字比右上角数字小时，左移；</li><li>如果出了边界，则说明二维数组中不存在该整数。</li></ul><p><img src="https://img.senup.cn/blog/20200528/zNNvLHFCbTRJ.png?imageslim" alt="mark"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span>[][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array.length == <span class="number">0</span> || array[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.计算出二维数组的行和列,由于下标从0开始故-1</span></span><br><span class="line">        <span class="keyword">int</span> rows = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> columns = array[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//2.设置动态的行、列索引,初始值为右上角第一行最后一列的数</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = array[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//3.设置初识对比数为右上角的数，左边的值比它小，右边的值比它大</span></span><br><span class="line">        <span class="comment">//4.循环条件为 超出边界</span></span><br><span class="line">        <span class="keyword">while</span> (i&lt;=rows &amp;&amp; j&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i][j] &gt; target) &#123;</span><br><span class="line">                <span class="comment">//target比右上角小 故在右上角的左边 删除一列</span></span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i][j] &lt; target) &#123;</span><br><span class="line">                <span class="comment">//target比右上角大 故在右上角的下边 删除一行</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//target和对比数相等了 即找到了</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode387-First Unique Character in a String</title>
      <link href="p/7bb8.html"/>
      <url>p/7bb8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Given</span> <span class="string">a string, find the first non-repeating character in it and return it's index. </span></span><br><span class="line"><span class="attr">If</span> <span class="string">it doesn't exist, return -1.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Examples</span>:<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="attr">s</span> = <span class="string">"leetcode"</span></span><br><span class="line"><span class="attr">return</span> <span class="string">0.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">s</span> = <span class="string">"loveleetcode",</span></span><br><span class="line"><span class="attr">return</span> <span class="string">2.</span></span><br><span class="line"><span class="attr">Note</span>: <span class="string">You may assume the string contain only lowercase letters.</span></span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstUniqChar</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建空间长度26的数组frequency（频率）</span></span><br><span class="line">        <span class="keyword">int</span>[] freq = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="comment">//2.遍历每个字符，存放在相应的位置上 重复即加一</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            freq[s.charAt(i)-<span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.遍历新数组 若查到频率为1的字符 返回该字符索引/下标 否则查询不到返回-1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;<span class="comment">//次数</span></span><br><span class="line">            <span class="keyword">if</span> (freq[s.charAt(i) - <span class="string">'a'</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution s = <span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">int</span> leetcode = s.firstUniqChar(<span class="string">"leetcode"</span>);</span><br><span class="line">        System.out.println(leetcode);</span><br><span class="line">        <span class="keyword">int</span> loveleetcode = s.firstUniqChar(<span class="string">"loveleetcode"</span>);</span><br><span class="line">        System.out.println(loveleetcode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用时间弥补智商差距</title>
      <link href="p/c3c4.html"/>
      <url>p/c3c4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>说句心里话，其实个人自我感觉大厂是相当遥远的，凭我这种学历根本不可能吧，所以我的期望并不高，动力也不高。但是，我却非常向往外企的工作氛围，不需要996的工作制，有充足的时间来休憩，想想都觉得特别棒。因此，还是要努力争取啊，在学习的过程中不得不把算法拉上日程，很苦，但是也要坚持。</p><a id="more"></a><blockquote><p>作者：岚岚岚岚岚岚2019<br>链接：<a href="https://www.zhihu.com/question/26406260/answer/1203990956" target="_blank" rel="noopener">https://www.zhihu.com/question/26406260/answer/1203990956</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><p>我来出一个攻略吧。</p><p>只要你的学历不是差到离谱。</p><p>保证你百分之90可以拿到大厂offer。</p><p>有一个大前提，你可以拿到大公司的面试。</p><p>不管你是靠学历，靠内推还是靠其他办法。如果面试都进不了，这些就不用看了。</p><p>我的方法的核心就是，用时间去弥补智商差距。</p><p>大一的时候： 转到计算机相关专业（985,211无视），如果做不到，下面的不用看了。</p><p>大一和大二的时候，选择一个方向并且熟练掌握。这里推荐黑马的网课，某宝和某鱼几块钱就能买到，每天6小时，一年内肯定没问题（这里做不到，下面不用看了）。</p><p>大二下半学期开始刷牛客网面试宝典，通刷。同时开始刷剑指offer，一共67道题，保证所有题都会最优解。还有时间建议重点研究下http。</p><p>大三上半学期，你需要写一个自己的项目（技术点一定要够多），开始刷leetcode（这里已经不需要挨个刷了，看题目有思路就可以看答案了），建议刷三百来道（这里做不到，下面不用看了）。</p><p>同时期想办法随便找个实习，随便什么公司都行，只要让你写代码，不管是找关系，还是自己找，哪怕倒贴钱也无所谓。</p><p>实习期间，开始复习网课的知识点，算法，开始在牛客网刷面经。对自己的项目进行准备。</p><p>三个月实习结束后，先随便投几家实习找找感觉，然后开始面大厂实习。</p><p>如果你不是985,211，一定要有一个大厂实习经历，这个可以弥补学历上的差距。</p><p>如果你是认真准备，面五六家大厂，肯定有一个要你（所以大前提很重要，现在确实存在学历歧视，准备的再好没有面试机会也难玩）。</p><p>然后实习期间继续刷leetcode。这个时候需要在某一方向有一定深度，这里推荐问下正式员工，请他们帮忙指明方向。</p><p>实习期结束，参加秋招。</p><p>结束。。</p><p>大概需要的时间是。</p><p>大一转专业。</p><p>大二每天5-10小时，坚持一年。</p><p>大三每天10-14小时，坚持半年。</p><p>你要明白，绝大部分人学历低智商肯定不怎么高。包括你在内。一定要付出更多的时间和精力</p><p>他们面试从题库抽题，那我就把题库背会。他们爱刷算法，那我就通刷。他们喜欢问源码，那我就看源码解析教程视频。</p><p>我就不信，他们再聪明，能有多少人可以用几个月时间抵你几年的系统学习。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序完工</title>
      <link href="p/f926.html"/>
      <url>p/f926.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>现在是2020-05-24 00:24:18，终于把小程序客户端，网页端全都写完了哈哈哈。本来计划不会写很多功能的，因为本人实在是太懒了。然而，越写越深入……于是，今天我又鼓捣出来几个功能：网页端加个swagger2接口文档，增加小程序轮播图网页端控制，给做做样子的页面跳转增加了拦截器（为此改了好多静态资源路径）等等。多写一点业务，以后工作的时候应该会更轻松吧，毕竟熟练度在那里，我这么想的。先睡觉，从明天开始，好好学习算法与数据结构  ：）</p><p><img src="https://img.senup.cn/blog/20200524/jmnd53ujE3TS.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-知足</title>
      <link href="p/fb08.html"/>
      <url>p/fb08.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天给他们演示了我这个月来写的小程序。微信有很多人私聊夸我很厉害，听了很开心，很感谢别人的认可。</p><p>虽然生活总是充满了遗憾，但是可以知足常乐。</p><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>如果我爱上你的笑容</p><p>要怎么收藏 要怎么拥有</p><p>如果你快乐再不是为我</p><p>会不会放手其实才是拥有</p><p>知足的快乐 叫我忍受心痛</p><p>知足的快乐 叫我忍受心痛</p>            <i class="fa fa-quote-right"></i>          </blockquote><a id="more"></a><p><img src="https://img.senup.cn/blog/20200520/N2elXWXe9AyE.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200520/JacbkAORzgwS.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200520/Gxf2KDvKqo95.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近期的事情</title>
      <link href="p/58ed.html"/>
      <url>p/58ed.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>好几天没有写日志，完全是因为真的忙起来了，所以大部分时间都是学习，感觉笔记都没空做，但是小小的总结还是可以的。</p><ol><li>这一周花了很多时间来了解redis，看了书，也看了视频教程，对于redis的各种小而精美的功能很感兴趣，比如发布订阅之类的；在视频教程里面学了redisTemplate，对这个新技术也感到很好奇，特别期待后面能有时间找个实战项目练练手。</li><li>小程序项目一直是我一个人写，所以遇到不懂的问题也只能自己苦恼。因为评论回复功能前台渲染需要一定的前端基础，而我又是个菜狗，只能拖着放着慢慢来，实在不会的问题也就是论坛发帖以及找找飚哥（大佬）。对于评论回复的后端设计有了新的见解，以前我只知道用树状递归下去，然而这样会出现太多层级关系以及递归可能导致系统内存溢出，现在发现二级评论回复的设计思路了，也很简单，只是以前没机会没压力也想不出。</li><li>除此之外，就是某个瞬间突然明白了微信小程序自定义组件怎么用。这一点让我非常高兴，因为我希望自己的工作是富有创造性的，不是同普通的堆砌页面一样。学会了自定义组件，看懂大佬的前端代码，于是可以更加肆无忌惮的进行魔改，怎么说呢，进一寸有一寸的欢喜。这大概也是技术本身的魅力所在吧。</li><li>林哥自从面试完美团的校招笔试后，突然就转变态度不走程序员的路子。他表示想考公进事业单位，我则表示有点小难过。毕竟这家伙虽然有时感觉小坑，但是还是很感谢他的。想想也是他一直督促我学习，进实验室，有机会和师兄们吹吹水……如今突然开始走不同的路，感觉十分惋惜，但是也没什么办法。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决mybatis plus一对多分页记录条数变少</title>
      <link href="p/edab.html"/>
      <url>p/edab.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在业务里面有个场景：需要查询出所有帖子的详细信息——查出帖子的同时关联用户表（一对一）、图片表（一对多），三张表关联起来分页查询，比如要查出分页的记录数为10条，最后结果只显示出两三条。</p><p>（其中用户发布帖子的时候添加图片功能可选。）</p><a id="more"></a><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>先通过表连接把表记录关联进来了，如果有3个帖子，关联图片表之后每个帖子有4条图片记录，那么其实这时候虽然只有三个帖子，但是这个内存中的临时表已经有12条记录了，在语句的最后加上 limit 0,10，其实分页的时候分的是这12条记录。最终就会导致最终的映射结果只出现了3个帖子，而非我们期望的10个帖子。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>首先不要用left join联合多张表，而是用使用嵌套查询，虽然性能上比原来查询多了一次，但是暂时能够解决问题。</p><p>主要是修改一对多的部分，比如下面的collection标签修改成嵌套查询。</p><figure class="highlight xml"><figcaption><span>帖子.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"ArticleDetailMap2"</span> <span class="attr">type</span>=<span class="string">"com.senup.wxapp.vo.ArticleVo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"content"</span> <span class="attr">property</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"create_time"</span> <span class="attr">property</span>=<span class="string">"createTime"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"like_count"</span> <span class="attr">property</span>=<span class="string">"likeCount"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"status"</span> <span class="attr">property</span>=<span class="string">"status"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"comment_count"</span> <span class="attr">property</span>=<span class="string">"commentCount"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"type"</span> <span class="attr">property</span>=<span class="string">"type"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"price"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"com.senup.wxapp.entity.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"nick_name"</span> <span class="attr">property</span>=<span class="string">"nickName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"avatar_url"</span> <span class="attr">property</span>=<span class="string">"avatarUrl"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"follow_counts"</span> <span class="attr">property</span>=<span class="string">"followCounts"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"fans_counts"</span> <span class="attr">property</span>=<span class="string">"fansCounts"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"receive_like_counts"</span> <span class="attr">property</span>=<span class="string">"receiveLikeCounts"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"create_time"</span> <span class="attr">property</span>=<span class="string">"createTime"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"grade"</span> <span class="attr">property</span>=<span class="string">"grade"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"intro"</span> <span class="attr">property</span>=<span class="string">"intro"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"college"</span> <span class="attr">property</span>=<span class="string">"college"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"images"</span> <span class="attr">ofType</span>=<span class="string">"com.senup.wxapp.entity.Image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">"&#123;artId=id&#125;"</span> <span class="attr">select</span>=<span class="string">"com.senup.wxapp.mapper.ImageMapper.selectByArticleId"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAllArticles2"</span> <span class="attr">resultMap</span>=<span class="string">"ArticleDetailMap2"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">  article.*,</span><br><span class="line">  user.id ,</span><br><span class="line">  user.nick_name,</span><br><span class="line">  user.avatar_url,</span><br><span class="line">  user.gender,</span><br><span class="line">  user.follow_counts,</span><br><span class="line">  user.fans_counts,</span><br><span class="line">  user.receive_like_counts,</span><br><span class="line">  user.grade,</span><br><span class="line">  user.intro,</span><br><span class="line">  user.college</span><br><span class="line">  from article</span><br><span class="line">    left join user on article.user_id = user.id</span><br><span class="line">  where article.status=0</span><br><span class="line">  order by article.create_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><figcaption><span>图片.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByArticleId"</span>  <span class="attr">resultType</span>=<span class="string">"com.senup.wxapp.entity.Image"</span> &gt;</span></span><br><span class="line">    SELECT image.*</span><br><span class="line">    from image</span><br><span class="line">    where art_id = #&#123;artId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>帖子mapper文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleMapperCustom</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">ArticleVo</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Page&lt;ArticleVo&gt; <span class="title">queryAllArticles2</span><span class="params">(IPage&lt;ArticleVo&gt; pagination)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>图片mapper文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImageMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Image</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Image <span class="title">selectByArticleId</span><span class="params">(<span class="keyword">int</span> artId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>简单测试5条数据，小程序前台都没问题了。</p><figure class="highlight java"><figcaption><span>controller</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/articles"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> XTJSONResult <span class="title">getArticles</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IPage&lt;ArticleVo&gt; page=<span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">    Page&lt;ArticleVo&gt; articles = articleMapperCustom.queryAllArticles2(page);</span><br><span class="line">    <span class="keyword">return</span> XTJSONResult.ok(articles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.senup.cn/blog/20200508/kwFo99wSEwB2.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200508/lCr1TqL0jooc.png?imageslim" alt="mark"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://crocutax.com/blog/mybatis-one-to-many-nestes-query-and-page-query" target="_blank" rel="noopener">Mybatis一对多嵌套查询和分页</a></p><p>感谢这位兄弟！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-夏天的风</title>
      <link href="p/eacb.html"/>
      <url>p/eacb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>夏天的风 我永远记得</p><p>清清楚楚的说你爱我</p><p>我看见你酷酷的笑容</p><p>也有腼腆的时候</p><p>夏天的风 正暖暖吹过</p><p>穿过头发穿过耳朵</p><p>你和我的夏天</p><p>风轻轻说着</p>            <i class="fa fa-quote-right"></i>          </blockquote><a id="more"></a><p><img src="https://img.senup.cn/blog/20200507/uwvjENpB5SO2.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200507/HMK0YjYSmygm.png?imageslim" alt="mark"><br><img src="https://img.senup.cn/blog/20200507/xzi9o7oK6iRL.png?imageslim" alt="mark"><br><img src="https://img.senup.cn/blog/20200507/FA83bzr9TDcH.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库优化</title>
      <link href="p/356e.html"/>
      <url>p/356e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>施工中…</p><a id="more"></a><h1 id="优化的目的"><a href="#优化的目的" class="headerlink" title="优化的目的"></a>优化的目的</h1><h2 id="避免出现页面访问错误"><a href="#避免出现页面访问错误" class="headerlink" title="避免出现页面访问错误"></a>避免出现页面访问错误</h2><ol><li>由于数据库连接timeout产生页面5XX错误</li><li>由于慢查询造成页面无法加载</li><li>由于阻塞造成数据无法提交</li></ol><h2 id="增加数据库的稳定性"><a href="#增加数据库的稳定性" class="headerlink" title="增加数据库的稳定性"></a>增加数据库的稳定性</h2><ul><li>很多数据库问题都是由于低效的查询引起的</li></ul><h2 id="优化用户体验"><a href="#优化用户体验" class="headerlink" title="优化用户体验"></a>优化用户体验</h2><ol><li>流畅页面的访问速度</li><li>良好的网站功能体验</li></ol><h1 id="优化入手"><a href="#优化入手" class="headerlink" title="优化入手"></a>优化入手</h1><p><img src="https://img.senup.cn/blog/20200507/XatKFAMIQuej.png?imageslim" alt="mark"></p><h1 id="SQL及索引优化"><a href="#SQL及索引优化" class="headerlink" title="SQL及索引优化"></a>SQL及索引优化</h1><p><img src="https://img.senup.cn/blog/20200507/Y0nJYjwX7Xto.png?imageslim" alt="mark"></p><p>慢查询存储的文件位置在哪</p><p>是否把没有使用索引的日志记录在慢查询日志中</p><p>超过多少秒查询时间的日志记录下来</p><p><img src="https://img.senup.cn/blog/20200507/4BFlqvhr7Oa3.png?imageslim" alt="mark"></p><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p><img src="https://img.senup.cn/blog/20200507/T1I11yf7OsI7.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200507/QFOHVw8Cxyrg.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五一小结</title>
      <link href="p/ccc.html"/>
      <url>p/ccc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前是和铭涛合伙搭建梯子，后来遇到各种不可抗力因素，导致浏览使用体验很差。再加上最近他最近脾气不太好，可能是做毕设和找工作的压力太大的缘故，我也怕打扰到他，于是决定还是散伙。自己找了别的机场，访问速度比之前用过的都要快，遂续费了一年，找阿琦合租，她高兴速度快，我也乐于有人一起分摊费用。</p><p>所以，现在油管最高画质毫无压力。除了早期关注的一些频道，后来也就是关注一些兴趣相关的，比如coding，guitar领域等等，一些旅游的vlog也蛮开眼界的，让人产生一种【一定要带上喜欢的人一起去看看】的念头。不知道还有没有更好看点的频道可以订阅？油管的推荐算法一直很迷，也不知道搜索啥，只能照着大佬的帖子先点波关注，希望自己能够早点适应这种外语环境吧，毕竟我也不反感英文。B站出了个视频，叫《后浪》，没点开看，但是处处刷得到，虽说平常喜欢逛知乎，但你一直给我推荐这种没啥讨论价值的问题，难道不是自降身份么？然后就又回到YouTube、Quora了。</p><p><img src="https://img.senup.cn/blog/20200506/fJIJi5JK3NtX.png?imageslim" alt="mark"></p><p>不知道为什么，对推特的印象变的很差。推上的汉语使用者极力给我一种反社会的印象，挂着二次元的头像说着三观不正的东西。虽然自诩对世界的包容度要高，但是看到这么多畸形的观点还是不敢苟同，不喜欢就是不喜欢，强求不来。只能说，推特不太适合我吧。</p><p>烦心事情有一件——驾校。原本我以为疫情对我没什么影响，现在看来我还是太年轻了。因为学校这学期不准备开学，那么等我九月份回校的时候就是大四实习了，然而报了驾校还没学完，回去租房学车对我来说并不现实，但是什么都不做也不行，或者就是换驾校，好像又要办手续？总之好麻烦，慢慢打听消息再说吧。唉~感觉最近自己发牢骚的频率变高了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode347-前K个高频元素</title>
      <link href="p/c204.html"/>
      <url>p/c204.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img.senup.cn/blog/20200506/0MIog4S5WGfO.png?imageslim" alt="前K个高频元素"></p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] topKFrequent(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>频率是可比较的，那么需要排排序。</p><p>类似优先队列的实现方式，不同之处在于确定优先级。</p><p>也就是需要先计算出元素的频次，然后利用优先队列直接拿出前k个元素。</p><p>这题有点抽风~</p><p>改天再写。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode350-两个数组的交集2</title>
      <link href="p/b3da.html"/>
      <url>p/b3da.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img.senup.cn/blog/20200505/ueqD9wNOQG5a.png?imageslim" alt="两个数组的交集2"></p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>题意一开始没看懂，后来再看看就明白了：输出的结果是两个数组都存在的部分。</p><p>这里使用map映射这种数据结构来实现。</p><ol><li>创建一个map，记录key value(出现的次数)</li><li>对数组1进行遍历，如果map包含元素，则元素出现次数value+1; 类似set=&gt;put；如果不包含，则添加该元素进map，次数为1;类似add=&gt;put</li><li>对数组2遍历，如果发现元素存在于map，那么记录该元素，同时map中该元素次数-1；如果发现该元素的次数为0，则删除该元素</li><li>将记录的元素转化为数组返回</li></ol><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p>就拿示例1来说，num1数组整理成映射为｛1，2｝｛2,2｝</p><p>num2数组中,第一次发现存在2这个key，那么就会记录key，同时对num1次数减一为{2,1};</p><p>第二次发现2这个key,那么就会记录key，同时对num1次数减一为{2,0}，当次数为0时删除该键值对。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode350;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersect(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        TreeMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums1) &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(num))&#123;</span><br><span class="line">                map.put(num,map.get(num)+<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(num,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n:nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(n))&#123;</span><br><span class="line">                list.add(n);</span><br><span class="line">                map.put(n,map.get(n)-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(map.get(n)==<span class="number">0</span>) &#123;</span><br><span class="line">                    map.remove(n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://img.senup.cn/blog/20200505/WTYfJcDpdgKg.png?imageslim" alt="略慢。。。。"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode349-两个数组的交集</title>
      <link href="p/f47f.html"/>
      <url>p/f47f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img.senup.cn/blog/20200505/yRf2HAeU7x58.png?imageslim" alt="两个数组的交集"></p><a id="more"></a><p>解题说明要保证元素结果唯一，那么很容易想到集合的去重功能。</p><p>第一种方法：</p><ol><li>将第一、二个数组扔到集合中去重</li><li>遍历第二个数组，看到第二个数组中有多少元素可以在集合中找到</li><li>将找到的元素记录下来</li></ol><p>这里对第二个数组的处理不去重，而是用新的方法：</p><ol><li>将第一个数组扔到集合中去重，得到集合</li><li>遍历第二个数组，查看集合中是否包含交集元素</li><li>记录交集元素，同时从集合中删除记录的元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode349;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        TreeSet&lt;Integer&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//将第一个数组扔进去，去重</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums1.length;i++)&#123;</span><br><span class="line">            set.add(nums1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录交集元素</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums2.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(nums2[i])) &#123;</span><br><span class="line">                list.add(nums2[i]);</span><br><span class="line">                set.remove(nums2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回新数组</span></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.senup.cn/blog/20200505/SspMXEWYV29m.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-安河桥</title>
      <link href="p/7a5c.html"/>
      <url>p/7a5c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>我知道<br>那些夏天就像你一样回不来<br>我已不会再对谁<br>满怀期待<br>我知道<br>这个世界每天都有太多遗憾<br>所以 你好 再见</p>            <i class="fa fa-quote-right"></i>          </blockquote><a id="more"></a><p><img src="https://img.senup.cn/blog/20200503/UsexRuTbaM9z.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200503/qnBHJ1sBc04t.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200503/9xmlhUDl1M4Y.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一点感悟</title>
      <link href="p/ce4f.html"/>
      <url>p/ce4f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>写博客并不是一件浪费时间的事情。功利时代下大家都渴望花时间做最有用的事情，“我要是把时间都花在XX上那我早就很强了”。然而很多看似没有的东西其实不一定没用。就拿写博客来说，本质上无聊且枯燥还花时间，但是其实是在回顾自己学过的知识点，依据费曼学习法来说，输出有时候比输入更重要。写作是和自己的一次交谈。</li><li>JAVA的三个特性：多态继承封装，对应是产品里面的美学，程序猿崇尚的优雅。以前不明白为什么简简单单可以实现的功能，要分好几个文件来写？现在幡然醒悟。除去灵活拓展，将粒度合适划分，代码是可以写的很优雅的，自己的程序要花心思写好。</li><li>遇到不懂的地方不能急着求成而将代码简化。很多时候人是具有惰性的，碰到困难就想回头。这个时候换个思路想想，这又何尝不是一个进步的机会呢？最近反编译了一个项目，为了追求表面的功能实现而把封装好的代码组装在一起，极大地增加了耦合度，反而是弄懂为什么之后又改回去了。</li><li>谦虚向学。直到今天，才发现育毅师兄曾经说过API加上版本号的意义，直到大三的我碰到之后才明白师兄们懂得多得多，自己不过是个菜狗。回想起来，周敏师兄手撸教材一周就能用socket帮他人写好项目，学习能力超强了。不止，这些天碰到优秀的教程和开源项目，感慨后悔自己浪费的日子，如果早点这样会怎么样？</li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次失败的爬虫记录</title>
      <link href="p/32fa.html"/>
      <url>p/32fa.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>晚上在博客汇总页浏览，发觉【<a href="https://www.foreverblog.cn/blogs.html" target="_blank" rel="noopener">十年之约</a>】成员页设计的很不合理。成员页浏览博客需要进入二级页面才能到达博客地址，多次跳转用户体验很不好。于是我想到能不能把这些链接拿下来，或者自己甚至能够仿一个页面，实现点击头像直接到博客真实页面？</p><p>于是就有了以下通过scrapy来实现爬虫的经历。</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>爬取的内容有</p><ul><li>头像链接</li><li>博主名称</li><li>博主寄语</li><li>网站链接</li></ul><p>然后爬取组装成json文件，再用python对该文件进行处理，拼接成html页面。</p><p>实现每个人显示头像，点击头像跳转博客，悬浮显示博主寄语的功能。</p><h1 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h1><p>一开始分析汇总页，如下</p><p><img src="https://img.senup.cn/blog/20200430/C7RR7zHLnSPs.png?imageslim" alt="汇总页"></p><p>然而这里有个最重要的缺点就是：并没有博客的真实地址。</p><p>那么也就是说：不得不进入二级页面爬取。</p><p><img src="https://img.senup.cn/blog/20200430/BrSYQx3eW7Vz.png?imageslim" alt="mark"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>由于之前看过scrapy的爬虫工具书，就动手写写自己比较熟悉的crawlSpider。</p><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p><code>scrapy startproject tenPrj</code></p><h2 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h2><p><code>cd tenPrj</code></p><p><code>scrapy genspider -t crawl tenSpider  www.foreverblog.cn</code></p><h2 id="导入pycharm后"><a href="#导入pycharm后" class="headerlink" title="导入pycharm后"></a>导入pycharm后</h2><p><img src="https://img.senup.cn/blog/20200430/CULqJzcC3TC9.png?imageslim" alt="mark"></p><p>习惯性先开启设置三大项</p><figure class="highlight"><figcaption><span>配置文件setting.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Obey robots.txt rules</span></span><br><span class="line"><span class="attr">ROBOTSTXT_OBEY</span> = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Override the default request headers:</span></span><br><span class="line"><span class="attr">DEFAULT_REQUEST_HEADERS</span> = &#123;</span><br><span class="line">  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',</span><br><span class="line">  'Accept-Language': 'en',</span><br><span class="line">    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36'</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">ITEM_PIPELINES</span> = &#123;</span><br><span class="line">   'tenPrj.pipelines.TenprjPipeline': 300,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写爬虫文件</p><figure class="highlight python"><figcaption><span>编写爬虫文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tenPrj.items <span class="keyword">import</span> TenprjItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TenspiderSpider</span><span class="params">(CrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'tenSpider'</span></span><br><span class="line">    allowed_domains = [<span class="string">'www.foreverblog.cn'</span>]</span><br><span class="line">    start_urls = [<span class="string">'https://www.foreverblog.cn/blogs.html'</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">            Rule(LinkExtractor(allow=<span class="string">r'.+blog.+\.html'</span>), callback=<span class="string">"parse_item"</span>, follow=<span class="literal">False</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        title = response.xpath(<span class="string">"//div[@class='cleft']/h2/text()"</span>).get()</span><br><span class="line">        words = response.xpath(<span class="string">"//div[@class='cleft']/p/text()"</span>).get()</span><br><span class="line">        img = response.xpath(<span class="string">"//div[@class='cleft']/img/@src"</span>).get()</span><br><span class="line">        url = response.xpath(<span class="string">"//div[@class='cleft']//a/@href"</span>).get()</span><br><span class="line"></span><br><span class="line">        words = words.split(<span class="string">": "</span>)[<span class="number">1</span>]</span><br><span class="line">        item = TenprjItem(title=title, words=words, img=img,url=url)</span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><p>管道文件</p><figure class="highlight python"><figcaption><span>pipelines.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.exporters <span class="keyword">import</span> JsonLinesItemExporter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TenprjPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>  <span class="comment"># 初始化方法</span></span><br><span class="line">        <span class="comment"># 使用二进制来写入，因此“w”--&gt;"wb"</span></span><br><span class="line">        self.fp = open(<span class="string">"bolg.json"</span>, <span class="string">"wb"</span>)</span><br><span class="line">        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=<span class="literal">False</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="comment"># self.exporter.start_exporting()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.exporter.export_item(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        print(<span class="string">"爬虫开始了！"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="comment"># self.exporter.finish_exporting()</span></span><br><span class="line">        self.fp.close()</span><br><span class="line">        print(<span class="string">"爬虫结束了！"</span>)</span><br></pre></td></tr></table></figure><p>为了不每次都在cmd控制台输入命令，写一个可以在pycharm多次运行的脚本。</p><figure class="highlight python"><figcaption><span>start.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line">cmdline.execute(<span class="string">"scrapy crawl tenSpider"</span>.split())</span><br></pre></td></tr></table></figure><p>那么现在运行上面的start.py，</p><p>侧栏就会生成一个json文件</p><figure class="highlight"><figcaption><span>blog.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"title"</span>: <span class="string">"胡家小子"</span>, <span class="attr">"words"</span>: <span class="string">"博观而约取，厚积而薄发，十年后遇见一个不一样的自己，回首时间，回首记忆，一切或许也就值得。"</span>, <span class="attr">"img"</span>: <span class="string">"http://cn.gravatar.com/avatar/cbe0cd5bb4c502fdf5a18180a2e2fb35?s=96&amp;d=mp&amp;r=g"</span>, <span class="attr">"url"</span>: <span class="string">"https://boyhu.cn/"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>: <span class="string">"西枫里博客"</span>, <span class="attr">"words"</span>: <span class="string">"坚持所不能坚持的，做个半路的和尚，直到远去。"</span>, <span class="attr">"img"</span>: <span class="string">"http://cn.gravatar.com/avatar/9b0184896389054a6fe867e11cb7ebfb?s=96&amp;d=mp&amp;r=g"</span>, <span class="attr">"url"</span>: <span class="string">"https://www.anji66.net"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>: <span class="string">"比格易尔"</span>, <span class="attr">"words"</span>: <span class="string">"和自己约定个十年，加油！"</span>, <span class="attr">"img"</span>: <span class="string">"https://q2.qlogo.cn/headimg_dl?dst_uin=349778537&amp;spec=100"</span>, <span class="attr">"url"</span>: <span class="string">"https://www.bigeyier.cn"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>: <span class="string">"冰峰博客"</span>, <span class="attr">"words"</span>: <span class="string">"哈哈，静候建国100周年，从头再来"</span>, <span class="attr">"img"</span>: <span class="string">"http://cn.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e?s=96&amp;d=mp&amp;r=g"</span>, <span class="attr">"url"</span>: <span class="string">"https://www.ad-s.cn"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>: <span class="string">"Yuuki的小窝"</span>, <span class="attr">"words"</span>: <span class="string">"不知十年后会怎样。"</span>, <span class="attr">"img"</span>: <span class="string">"https://q2.qlogo.cn/headimg_dl?dst_uin=321124376&amp;spec=100"</span>, <span class="attr">"url"</span>: <span class="string">"http://www.yuukis.cn"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>: <span class="string">"汀彵の汐"</span>, <span class="attr">"words"</span>: <span class="string">"十年之后，我也很想知道，不见不散。"</span>, <span class="attr">"img"</span>: <span class="string">"https://q2.qlogo.cn/headimg_dl?dst_uin=2461306899&amp;spec=100"</span>, <span class="attr">"url"</span>: <span class="string">"https://www.izznan.cn/"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>: <span class="string">"启福"</span>, <span class="attr">"words"</span>: <span class="string">"寥寥数语，皆我心之所慨……\nn年后，我还会在这个遥远而又咫尺的网络世界里~"</span>, <span class="attr">"img"</span>: <span class="string">"http://cn.gravatar.com/avatar/b62a214453c2836a7365803b19eef8c2?s=96&amp;d=mp&amp;r=g"</span>, <span class="attr">"url"</span>: <span class="string">"https://qifu.me/"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>: <span class="string">"喃懂妳"</span>, <span class="attr">"words"</span>: <span class="string">"只希望自己能坚持"</span>, <span class="attr">"img"</span>: <span class="string">"https://q2.qlogo.cn/headimg_dl?dst_uin=249345157&amp;spec=100"</span>, <span class="attr">"url"</span>: <span class="string">"https://www.nandongni.com/"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>: <span class="string">"Waxxh's Blog"</span>, <span class="attr">"words"</span>: <span class="string">"御宅之力，终破次壁"</span>, <span class="attr">"img"</span>: <span class="string">"http://cn.gravatar.com/avatar/54d63390cc597800c3ea2e26a3911e17?s=96&amp;d=mp&amp;r=g"</span>, <span class="attr">"url"</span>: <span class="string">"https://waxxh.me/"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>: <span class="string">"时光博客"</span>, <span class="attr">"words"</span>: <span class="string">"专注于技术热爱与分享"</span>, <span class="attr">"img"</span>: <span class="string">"http://cn.gravatar.com/avatar/8efe463e7dd797fb85b28186008c924a?s=96&amp;d=mp&amp;r=g"</span>, <span class="attr">"url"</span>: <span class="string">"http://sgblog.top"</span>&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>查看了一下，只爬取到一百多条json数据，真实的情况下肯定不止这些了。</p><p>后来发现因为成员汇总页博客过多，所以网站是采用懒加载的，而我并不会懒加载。</p><p>那么就找教程呗，毕竟面向搜索引擎编程。</p><h2 id="应对懒加载网站的爬取策略"><a href="#应对懒加载网站的爬取策略" class="headerlink" title="应对懒加载网站的爬取策略"></a>应对懒加载网站的爬取策略</h2><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>若想让页面显示完整须用代码模拟鼠标向下滚动的动作，Selenium就完全可以胜任这个任务。</p>            <i class="fa fa-quote-right"></i>          </blockquote><p><a href="https://zhuanlan.zhihu.com/p/72887277" target="_blank" rel="noopener">大神</a>给出的方案如下：</p><blockquote><p>首先在Scrapy的爬虫主文件中导入Selenium包，具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">TestSpider</span><span class="params">(Spider)</span>:</span></span><br><span class="line">&gt;     name = <span class="string">'test'</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         self.browser = webdriver.Chrome(<span class="string">"chromedriver驱动存放路径"</span>)</span><br><span class="line">&gt;         self.browser.set_page_load_timeout(<span class="number">30</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这仅仅是让Selenium导入到Scarpy中，大多数情况下我们所要抓取的网页都是多页的，而且我们也需要在Selenium执行完向下滚动页面的操作后我们再执行爬取整个页面的代码才能达到预期效果，所以我们需要将Selenium操作页面的代码放入到Scrapy的middlewares.py（中间件）文件中。</p><p>将Selenium滚动页面的代码放入Scrapy的middlewares.py文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">SeleniumMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">&gt;         <span class="keyword">try</span>:</span><br><span class="line">&gt;             spider.browser.get(request.url)</span><br><span class="line">&gt;             time.sleep(<span class="number">3</span>)</span><br><span class="line">&gt;             spider.browser.execute_script(<span class="string">"window.scrollTo(0,document.body.scrollHeight)"</span>)</span><br><span class="line">&gt;             <span class="comment">#执行页面下拉操作的代码</span></span><br><span class="line">&gt;         <span class="keyword">except</span> TimeoutException <span class="keyword">as</span> e:</span><br><span class="line">&gt;             print(<span class="string">'超时'</span>)</span><br><span class="line">&gt;             spider.browser.execute_script(<span class="string">'window.stop()'</span>)</span><br><span class="line">&gt;         time.sleep(<span class="number">2</span>)</span><br><span class="line">&gt;         <span class="keyword">return</span> HtmlResponse(url=spider.browser.current_url, body=spider.browser.page_source,</span><br><span class="line">&gt;                                 encoding=<span class="string">"utf-8"</span>, request=request)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>这样Scarpy就可以能够抓取到加载完以后的完整数据了。</p></blockquote><p>开始尝试~结果失败了！提示<code>webdriver</code>这个包缺失。</p><h2 id="安装selenium"><a href="#安装selenium" class="headerlink" title="安装selenium"></a>安装selenium</h2><p>selenium是一个web自动化测试工具，它可以模拟浏览器中的一些操作，对于一些懒加载的页面，一般是用户滑动到某个位置时才会加载相应的数据，所以可以使用selenium来模拟用户的滑动，从而实现将完整的网页内容加载出来，可以使用下面的命令安装python的selenium库：<br><code>pip install selenium</code></p><h2 id="下载chromedriver驱动"><a href="#下载chromedriver驱动" class="headerlink" title="下载chromedriver驱动"></a>下载chromedriver驱动</h2><p>需要和你的chrome浏览器版本保持一致。<br><a href="https://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">下载地址</a></p><p>可以通过<code>chrome://version/</code>查看版本，比如这里我可以使用的版本对应为为81.0.4044.xx版本的win版</p><p><img src="https://img.senup.cn/blog/20200430/aLj01kHKPsO1.png?imageslim" alt="mark"></p><p>顺便将浏览器chrome.exe加入环境变量Path中。</p><p>再把代码添加到pycharm来，开启中间件。</p><p>然而报错了。</p><p><img src="https://img.senup.cn/blog/20200430/fdlgXNJ09kfX.png?imageslim" alt="mark"></p><p>猜测错误的原因是：大佬给的代码应该只适用普通scrapy爬虫，而加了模板的爬虫还要自定义rules爬取规则因此这个初识化有问题。但是谷歌了一会儿没找到crawlSpider+selenium的帖子，完全没结果！</p><p>“ 好恨！ 我怎么这么菜！”</p><p>怪自己学爬虫没学精吧，算了算了，这个<a href="https://github.com/senup/tenPrj" target="_blank" rel="noopener">问题</a>后面有空再解决好了……</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode804-唯一摩尔斯密码词</title>
      <link href="p/5aac.html"/>
      <url>p/5aac.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，”cab” 可以写成 “-.-..–…”，(即 “-.-.” + “-…” + “.-“字符串的结合)。我们将这样一个连接过程称作单词翻译。</p><p>返回我们可以获得所有词不同单词翻译的数量。</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如: <code>&quot;a&quot;</code> 对应 <code>&quot;.-&quot;</code>, <code>&quot;b&quot;</code> 对应 <code>&quot;-...&quot;</code>, <code>&quot;c&quot;</code> 对应 <code>&quot;-.-.&quot;</code>, 等等。</p><p>为了方便，所有26个英文字母对应摩尔斯密码表如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例如:</span><br><span class="line">输入: words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]</span><br><span class="line">输出: 2</span><br><span class="line">解释: </span><br><span class="line">各单词翻译如下:</span><br><span class="line">&quot;gin&quot; -&gt; &quot;--...-.&quot;</span><br><span class="line">&quot;zen&quot; -&gt; &quot;--...-.&quot;</span><br><span class="line">&quot;gig&quot; -&gt; &quot;--...--.&quot;</span><br><span class="line">&quot;msg&quot; -&gt; &quot;--...--.&quot;</span><br><span class="line"></span><br><span class="line">共有 2 种不同翻译, &quot;--...-.&quot; 和 &quot;--...--.&quot;.</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>单词列表<code>words</code> 的长度不会超过 <code>100</code>。</li><li>每个单词 <code>words[i]</code>的长度范围为 <code>[1, 12]</code>。</li><li>每个单词 <code>words[i]</code>只包含小写字母。</li></ul><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>上面的例子中gin zen这两个不同的单词的摩斯密码是一样的，而gig msg这两个的摩斯密码一样，因此，这个字符串数组里面就有两种不同的翻译。</p><p>那么，现在就是将字符串转化成摩斯密码的字符串，然后借助集合，将字符串数组放到集合中，计算出集合的元素个数，over。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniqueMorseRepresentations</span><span class="params">(String[] words)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String[] codes=&#123;<span class="string">".-"</span>,<span class="string">"-..."</span>,<span class="string">"-.-."</span>,<span class="string">"-.."</span>,<span class="string">"."</span>,<span class="string">"..-."</span>,<span class="string">"--."</span>,<span class="string">"...."</span>,<span class="string">".."</span>,<span class="string">".---"</span>,<span class="string">"-.-"</span>,<span class="string">".-.."</span>,<span class="string">"--"</span>,<span class="string">"-."</span>,<span class="string">"---"</span>,<span class="string">".--"</span> +</span><br><span class="line">                <span class="string">"."</span>,<span class="string">"--.-"</span>,<span class="string">".-."</span>,<span class="string">"..."</span>,<span class="string">"-"</span>,<span class="string">"..-"</span>,<span class="string">"...-"</span>,<span class="string">".--"</span>,<span class="string">"-..-"</span>,<span class="string">"-.--"</span>,<span class="string">"--.."</span>&#125;;</span><br><span class="line">        TreeSet&lt;String&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String word:words)&#123;</span><br><span class="line">            StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;word.length();i++)</span><br><span class="line">                res.append(codes[word.charAt(i)-<span class="string">'a'</span>]);</span><br><span class="line">            treeSet.add(res.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> treeSet.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.senup.cn/blog/20200429/gjV4FVuAA1mV.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序——自定义组件component</title>
      <link href="p/e6f1.html"/>
      <url>p/e6f1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>施工中…</p><a id="more"></a><h1 id="页面引用"><a href="#页面引用" class="headerlink" title="页面引用"></a>页面引用</h1><figure class="highlight html"><figcaption><span>index.wxml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">card-list</span> <span class="attr">arrow</span>=<span class="string">"&#123;&#123;cardList&#125;&#125;"</span> &gt;</span><span class="tag">&lt;/<span class="name">card-list</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"usingComponents"</span>: &#123;</span><br><span class="line">        <span class="attr">"tab-bar"</span>: <span class="string">"/components/tabBar/tabBar"</span>,</span><br><span class="line">        <span class="attr">"card-list"</span>: <span class="string">"/components/cardList/cardList"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"enablePullDownRefresh"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="组件模板"><a href="#组件模板" class="headerlink" title="组件模板"></a>组件模板</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    properties: &#123;</span><br><span class="line">        arrow: <span class="built_in">Array</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    options: &#123;</span><br><span class="line">        addGlobalClass: !<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        onClickGood: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="keyword">this</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"onClickGood"</span>, t);</span><br><span class="line">            <span class="keyword">var</span> o = t.target.dataset.like, n = t.target.dataset.id, r = t.target.dataset.index;</span><br><span class="line">            <span class="keyword">if</span> (o) &#123;</span><br><span class="line">                <span class="keyword">var</span> i = <span class="string">"?id="</span> + n + <span class="string">"&amp;type=feed"</span>;</span><br><span class="line">                e.DELETE(<span class="string">"feed/like"</span> + i).then(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> t = a.data.arrow;</span><br><span class="line">                    t[r].like = !<span class="number">1</span>, t[r].likeCount = t[r].likeCount - <span class="number">1</span>, a.setData(&#123;</span><br><span class="line">                        arrow: t</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> d = &#123;</span><br><span class="line">                    type: <span class="string">"feed"</span>,</span><br><span class="line">                    contentId: n</span><br><span class="line">                &#125;;</span><br><span class="line">                e.POST(<span class="string">"feed/like"</span>, d).then(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> t = a.data.arrow;</span><br><span class="line">                    t[r].like = e.data.like, t[r].likeCount = e.data.likeCount, a.setData(&#123;</span><br><span class="line">                        arrow: t</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        goDetail: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = e.currentTarget.dataset.id, a = e.currentTarget.dataset.comment;</span><br><span class="line">            <span class="built_in">console</span>.log(t, a), a ? wx.navigateTo(&#123;</span><br><span class="line">                url: <span class="string">"/pages/details/index?content_id="</span> + t + <span class="string">"&amp;comment=1"</span></span><br><span class="line">            &#125;) : wx.navigateTo(&#123;</span><br><span class="line">                url: <span class="string">"/pages/details/index?content_id="</span> + t</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        goPersonalCenter: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> t = e.currentTarget.dataset.uid;</span><br><span class="line">            t &amp;&amp; wx.navigateTo(&#123;</span><br><span class="line">                url: <span class="string">"/pages/personal-center/index?uid="</span> + t</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"../../templates/card/card.wxss"</span>;</span><br><span class="line">//卡片列表容器 宽度适应 上下0像素 左右40像素 </span><br><span class="line"><span class="selector-class">.card-list-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">40</span>rpx;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line">//距底部 字体大小 颜色 居中</span><br><span class="line"><span class="selector-class">.no-more</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">40</span>rpx;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24</span>rpx;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"/templates/card/card.wxml"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"/templates/public/public.wxml"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"card-list-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;arrow&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"cardExpressageTask"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...item,index:index&#125;&#125;"</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;item.type==0&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"cardOtherTask"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...item,index:index&#125;&#125;"</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;item.type==1&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"cardDynamic"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...item,index:index&#125;&#125;"</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;item.type==10||item.type==11&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"loading"</span> <span class="attr">data</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;isLoading&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"no-more"</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;!isNoMore||arrow.length==0&#125;&#125;"</span>&gt;</span>人家也是有底线的~<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"component"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"usingComponents"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h1><h2 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"userInfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info-box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info-avatar"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">catchtap</span>=<span class="string">"goPersonalCenter"</span> <span class="attr">class</span>=<span class="string">"info-avatar-image"</span> <span class="attr">data-uid</span>=<span class="string">"&#123;&#123;userId&#125;&#125;"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;avatarUrl&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"image-renzhen"</span> <span class="attr">src</span>=<span class="string">"/images/public/yirenzhen.png"</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;idauth&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info-detail"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info-detail-nickname"</span>&gt;</span></span><br><span class="line">        &#123;&#123;nickname&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info-detail-official"</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;official==true&#125;&#125;"</span>&gt;</span>官方<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:else</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"image-gender"</span> <span class="attr">src</span>=<span class="string">"/images/public/boy.png"</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;sex==0&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"image-gender"</span> <span class="attr">src</span>=<span class="string">"/images/public/girl.png"</span> <span class="attr">wx:else</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info-detail-time"</span>&gt;</span>&#123;&#123;datetime&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"info-detail-school"</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;!official&#125;&#125;"</span>&gt;</span>&#123;&#123;college&#125;&#125;&#123;&#123;grade&#125;&#125;级<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">//flex布局</span><br><span class="line"><span class="selector-class">.info-box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line">//头像 相对 宽高 右外边距 上外边距</span><br><span class="line"><span class="selector-class">.info-avatar</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">68</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">68</span>rpx;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">6</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">//头像 宽高 圆角</span><br><span class="line"><span class="selector-class">.info-avatar-image</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">68</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">68</span>rpx;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image-renzhen</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">//昵称 字体大小粗细 颜色 行高 溢出则裁剪</span><br><span class="line"><span class="selector-class">.info-detail-nickname</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">28</span>rpx;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40</span>rpx;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line">//性别图标 相对 触底 宽高 左外边距</span><br><span class="line"><span class="selector-class">.image-gender</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">6</span>rpx;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30</span>rpx;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">//时间 学校 行内元素 上外边距 字体大小 颜色 溢出裁剪 </span><br><span class="line">//显示省略符号来代表被修剪的文本。white-space属性指定元素内的空白怎样处理。</span><br><span class="line">//文本不会换行，文本会在在同一行上继续，直到遇到 &lt;br&gt; 标签为止。</span><br><span class="line"><span class="selector-class">.info-detail-time</span>,<span class="selector-class">.info-detail-school</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">6</span>rpx;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24</span>rpx;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line">//官方 </span><br><span class="line"><span class="selector-class">.info-detail-official</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5</span>rpx <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32</span>rpx;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24</span>rpx;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fed033</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">32</span>rpx;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">//时间</span><br><span class="line"><span class="selector-class">.info-detail-time</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">160</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">//学校 宽度 溢出 字体溢出省略号 空白</span><br><span class="line"><span class="selector-class">.info-detail-school</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">340</span>rpx;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="卡片"><a href="#卡片" class="headerlink" title="卡片"></a>卡片</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"cardDynamic"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">"goDetail"</span> <span class="attr">class</span>=<span class="string">"card"</span> <span class="attr">data-id</span>=<span class="string">"&#123;&#123;id&#125;&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"userInfo"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...userInfo&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"card-image-grid"</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;images&#125;&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">mode</span>=<span class="string">"aspectFill"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;item&#125;&#125;"</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;images&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"card-dynamic-text"</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;content&#125;&#125;"</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"card-btn-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">catchtap</span>=<span class="string">"onClickGood"</span> <span class="attr">class</span>=<span class="string">"btn-icon"</span> <span class="attr">data-id</span>=<span class="string">"&#123;&#123;id&#125;&#125;"</span> <span class="attr">data-index</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span> <span class="attr">data-like</span>=<span class="string">"&#123;&#123;like&#125;&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"iconfont icon-good &#123;&#123;like?'active':''&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span>&#123;&#123;likeCount&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">catchtap</span>=<span class="string">"goDetail"</span> <span class="attr">class</span>=<span class="string">"btn-icon"</span> <span class="attr">data-comment</span>=<span class="string">"true"</span> <span class="attr">data-id</span>=<span class="string">"&#123;&#123;id&#125;&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"iconfont icon-reply"</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span>&#123;&#123;commentCount&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">catchtap</span>=<span class="string">"false"</span> <span class="attr">class</span>=<span class="string">"btn-icon"</span> <span class="attr">data-id</span>=<span class="string">"&#123;&#123;id&#125;&#125;"</span> <span class="attr">data-index</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span> <span class="attr">data-type</span>=<span class="string">"&#123;&#123;type&#125;&#125;"</span> <span class="attr">openType</span>=<span class="string">"share"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"iconfont icon-share"</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"/templates/public/public.wxml"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"../public/public.wxss"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"../public/public.wxss"</span>;</span><br><span class="line">//卡片 相对布局 内边距 外边距 背景 圆角  </span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40</span>rpx <span class="number">40</span>rpx <span class="number">30</span>rpx <span class="number">40</span>rpx;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">30</span>rpx;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">//网格图片 上下边距</span><br><span class="line"><span class="selector-class">.card-image-grid</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: -<span class="number">14</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">//图片 宽高 右下外边距 圆角</span><br><span class="line"><span class="selector-class">.card-image-grid</span> <span class="selector-tag">image</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">180</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">180</span>rpx;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">25</span>rpx;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">14</span>rpx;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line">//规定属于其父元素的第3个 img 元素的每个 image：</span><br><span class="line"><span class="selector-class">.card-image-grid</span> <span class="selector-tag">image</span><span class="selector-pseudo">:nth-of-type(3n)</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">//动态的文字 上内边距 字体 粗细 颜色</span><br><span class="line"><span class="selector-class">.card-dynamic-text</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">28</span>rpx;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="触底样式"><a href="#触底样式" class="headerlink" title="触底样式"></a>触底样式</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"no-more"</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;!isNoMore||arrow.length==0&#125;&#125;"</span>&gt;</span>人家也是有底线的~<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.no-more</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">40</span>rpx;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24</span>rpx;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序自用操作</title>
      <link href="p/e83.html"/>
      <url>p/e83.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">            <p>时隔半月,复拾所中废书小次。然全不识余所在,弇则先整笔记而捋之。</p>          </div><a id="more"></a><h1 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">    url: serverUrl+<span class="string">"/wxLogin"</span>,</span><br><span class="line">    method:<span class="string">"POST"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        code:code,</span><br><span class="line">        nickName:userInfo.nickName,</span><br><span class="line">        avatarUrl:userInfo.avatarUrl,</span><br><span class="line">        gender:userInfo.gender</span><br><span class="line">    &#125;,</span><br><span class="line">    header: &#123;</span><br><span class="line">        <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span> <span class="comment">// 默认值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用后端</span></span><br><span class="line">wx.request(&#123;</span><br><span class="line">    url: serverUrl + <span class="string">'/user/queryUserInfo?userId='</span> + user.id,</span><br><span class="line">    method: <span class="string">"GET"</span>,</span><br><span class="line">    header: &#123;</span><br><span class="line">        <span class="string">'content-type'</span>: <span class="string">'application/json'</span>, <span class="comment">// 默认值</span></span><br><span class="line">        <span class="string">'userId'</span>: user.id,</span><br><span class="line">        <span class="string">'userToken'</span>: user.userToken</span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = res.data.data;</span><br><span class="line">        <span class="keyword">if</span> (res.data.status == <span class="number">200</span>) &#123;</span><br><span class="line">            me.setData(&#123;</span><br><span class="line">                isLogin: <span class="literal">true</span>,</span><br><span class="line">                avatarUrl: result.avatarUrl,</span><br><span class="line">                nickname: result.nickName,</span><br><span class="line">                sex: result.gender,</span><br><span class="line">                grade: result.grade + <span class="string">"级"</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="保存用户信息到本地缓存"><a href="#保存用户信息到本地缓存" class="headerlink" title="保存用户信息到本地缓存"></a>保存用户信息到本地缓存</h1><p>由于用户信息使用频率较高，因此使用全局方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> setGlobalUserInfo: <span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">wx.setStorageSync(<span class="string">"userInfo"</span>, user);</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> getGlobalUserInfo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> wx.getStorageSync(<span class="string">"userInfo"</span>);</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>页面调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.setGlobalUserInfo(result.data.data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = app.getGlobalUserInfo();</span><br></pre></td></tr></table></figure><p>清空缓存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注销以后，清空缓存</span></span><br><span class="line">wx.removeStorageSync(<span class="string">"userInfo"</span>)</span><br></pre></td></tr></table></figure><h1 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.redirectTo(&#123;</span><br><span class="line">    url:<span class="string">"/pages/my/index"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wx.navigateTo(&#123;</span><br><span class="line">    url: <span class="string">"/pages/edit-partial-info/index?type=intro&amp;intro="</span>+intro</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="加载提醒"><a href="#加载提醒" class="headerlink" title="加载提醒"></a>加载提醒</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wx.showLoading(&#123;</span><br><span class="line">    title: <span class="string">'请等待...'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 费时的操作，在数据返回成功的时候调用下面语句</span></span><br><span class="line"></span><br><span class="line">wx.hideLoading();</span><br></pre></td></tr></table></figure><h1 id="延迟的消息提醒"><a href="#延迟的消息提醒" class="headerlink" title="延迟的消息提醒"></a>延迟的消息提醒</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">'用户未登录~即将进行登录~'</span>,</span><br><span class="line">        icon:<span class="string">"none"</span></span><br><span class="line">    &#125;),<span class="number">1500</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goTop: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.pageScrollTo(&#123;</span><br><span class="line">        scrollTop: <span class="number">0</span></span><br><span class="line">    &#125;) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取文本区内容"><a href="#获取文本区内容" class="headerlink" title="获取文本区内容"></a>获取文本区内容</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    &lt;textarea bindinput=<span class="string">"inputIntro"</span> maxlength=<span class="string">"80"</span> placeholder=<span class="string">"这个人很懒，什么都没说"</span> value=<span class="string">"&#123;&#123;intro&#125;&#125;"</span>&gt;&lt;<span class="regexp">/textarea&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">inputIntro: function(e) &#123;</span></span><br><span class="line"><span class="regexp">    this.setData(&#123;</span></span><br><span class="line"><span class="regexp">        intro: e.detail.value</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="页面传递参数"><a href="#页面传递参数" class="headerlink" title="页面传递参数"></a>页面传递参数</h1><figure class="highlight js"><figcaption><span>A页面</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">    url: <span class="string">"/pages/edit-partial-info/index?type=nickname&amp;nickname="</span>+name</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>B页面</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span>(options.nickname==<span class="literal">null</span> || options.nickname==<span class="string">''</span>||options.nickname==<span class="literal">undefined</span>)&#123;</span><br><span class="line">        me.setData(&#123;</span><br><span class="line">            intro: options.intro,</span><br><span class="line">            type: options.type</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        me.setData(&#123;</span><br><span class="line">            nickname: options.nickname,</span><br><span class="line">            type: options.type</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图像预览"><a href="#图像预览" class="headerlink" title="图像预览"></a>图像预览</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">previewAvatar: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = e.currentTarget.dataset.url;</span><br><span class="line">    wx.previewImage(&#123;</span><br><span class="line">        urls: [ a ]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;image catchtap=<span class="string">"previewAvatar"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"avatar"</span> data-url=<span class="string">"&#123;&#123;avatarUrl&#125;&#125;"</span> src=<span class="string">"&#123;&#123;avatarUrl&#125;&#125;"</span>&gt;&lt;<span class="regexp">/image&gt;</span></span><br></pre></td></tr></table></figure><h1 id="右上角分享"><a href="#右上角分享" class="headerlink" title="右上角分享"></a>右上角分享</h1><figure class="highlight js"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shareAppMessage: &#123;</span><br><span class="line">  title: <span class="string">"小韩帮帮忙"</span>,</span><br><span class="line">  path: <span class="string">"/pages/index/index"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>页面</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户点击右上角分享</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> app.shareAppMessage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="帖子展示页"><a href="#帖子展示页" class="headerlink" title="帖子展示页"></a>帖子展示页</h1><ol><li>写页面</li><li>填充数据</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序——轮播图swiper</title>
      <link href="p/48c1.html"/>
      <url>p/48c1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>效果预览：</p><p><img src="https://img.senup.cn/blog/20200426/wvSnOvXPTBOY.png?imageslim" alt="导航栏"></p><a id="more"></a><h1 id="swiper实现自动切换的导航栏"><a href="#swiper实现自动切换的导航栏" class="headerlink" title="swiper实现自动切换的导航栏"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html" target="_blank" rel="noopener">swiper</a>实现自动切换的导航栏</h1><ol><li><p>显示面板指示点</p></li><li><p>是否自动切换</p></li><li><p>自动切换时间间隔</p></li><li><p>滑动动画时长</p></li></ol><blockquote><p>3e3=3*(10^3）<br>3e3=3000</p></blockquote><figure class="highlight js"><figcaption><span>js文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">swiper: &#123;</span><br><span class="line">  indicatorDots: <span class="literal">true</span>,</span><br><span class="line">  autoplay: <span class="literal">true</span>,</span><br><span class="line">  interval: <span class="number">3e3</span>,</span><br><span class="line">  duration: <span class="number">1e3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swiperCurrent: <span class="number">0</span>,</span><br><span class="line">loading: <span class="literal">false</span>,</span><br><span class="line">registerShow: <span class="literal">false</span>,</span><br><span class="line">couponShow: <span class="literal">false</span>,</span><br><span class="line">tabBarMore: <span class="literal">false</span>,</span><br><span class="line">floorstatus: <span class="literal">false</span>,</span><br><span class="line">defaultBanners: [&#123;</span><br><span class="line">  imgUrl: <span class="string">"/images/index/banner2.jpg"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  imgUrl: <span class="string">"/images/index/banner4.jpg"</span></span><br><span class="line">&#125;],</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">onClickBanner: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = e.currentTarget.dataset.type, a = e.currentTarget.dataset.url;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">console</span>.log(a), <span class="string">"4"</span> == t) </span><br><span class="line">        wx.navigateTo(&#123;</span><br><span class="line">        url: a&#125;); </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"3"</span> == t) <span class="keyword">return</span>;</span><br><span class="line">        a &amp;&amp; wx.navigateTo(&#123;</span><br><span class="line">            url: <span class="string">"/pages/banner-url/index?url="</span> + a</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">swiperchange: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        swiperCurrent: e.detail.current</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/e81d29b01fbe" target="_blank" rel="noopener"><strong>wx:key</strong></a>是用来告诉程序按照某个<strong>key</strong>去排序这个组件，例如<strong>wx:key=”Id”,</strong>此时组件顺序就会按照你arr中Id值来进行排序了(<strong>注意此时的Id是唯一切不能动态改变的，也是你要迭代对象中唯一的一个标识符</strong>)。而如果没有这个wx:key的话，当渲染时框架会去查找这个<strong>“key”</strong>，造成资源的浪费。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">autoplay</span>=<span class="string">"&#123;&#123;swiper.autoplay&#125;&#125;"</span> <span class="attr">bindchange</span>=<span class="string">"swiperchange"</span> <span class="attr">class</span>=<span class="string">"swiper_box"</span> <span class="attr">duration</span>=<span class="string">"&#123;&#123;swiper.duration&#125;&#125;"</span> <span class="attr">interval</span>=<span class="string">"&#123;&#123;swiper.interval&#125;&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">swiper-item</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;banners.length?banners:defaultBanners&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">image</span> <span class="attr">bindtap</span>=<span class="string">"onClickBanner"</span> <span class="attr">class</span>=<span class="string">"baners"</span> <span class="attr">data-type</span>=<span class="string">"&#123;&#123;item.type&#125;&#125;"</span> <span class="attr">data-url</span>=<span class="string">"&#123;&#123;item.url&#125;&#125;"</span> <span class="attr">mode</span>=<span class="string">"widthFix"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;item.imgUrl&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"dots"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"dot&#123;&#123;index==swiperCurrent?' active':''&#125;&#125;"</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;banners.length?banners:defaultBanners&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"unique"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>滑块视图容器。其中只可放置<a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper-item.html" target="_blank" rel="noopener">swiper-item</a>组件，否则会导致未定义的行为。</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">必填</th><th align="left">说明</th><th align="left">最低版本</th></tr></thead><tbody><tr><td align="left">indicator-dots</td><td align="left">boolean</td><td align="left">false</td><td align="left">否</td><td align="left">是否显示面板指示点</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.0.0</a></td></tr><tr><td align="left">indicator-color</td><td align="left">color</td><td align="left">rgba(0, 0, 0, .3)</td><td align="left">否</td><td align="left">指示点颜色</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.1.0</a></td></tr><tr><td align="left">indicator-active-color</td><td align="left">color</td><td align="left">#000000</td><td align="left">否</td><td align="left">当前选中的指示点颜色</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.1.0</a></td></tr><tr><td align="left">autoplay</td><td align="left">boolean</td><td align="left">false</td><td align="left">否</td><td align="left">是否自动切换</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.0.0</a></td></tr><tr><td align="left">current</td><td align="left">number</td><td align="left">0</td><td align="left">否</td><td align="left">当前所在滑块的 index</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.0.0</a></td></tr><tr><td align="left">interval</td><td align="left">number</td><td align="left">5000</td><td align="left">否</td><td align="left">自动切换时间间隔</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.0.0</a></td></tr><tr><td align="left">duration</td><td align="left">number</td><td align="left">500</td><td align="left">否</td><td align="left">滑动动画时长</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.0.0</a></td></tr><tr><td align="left">circular</td><td align="left">boolean</td><td align="left">false</td><td align="left">否</td><td align="left">是否采用衔接滑动</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.0.0</a></td></tr><tr><td align="left">vertical</td><td align="left">boolean</td><td align="left">false</td><td align="left">否</td><td align="left">滑动方向是否为纵向</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.0.0</a></td></tr><tr><td align="left">previous-margin</td><td align="left">string</td><td align="left">“0px”</td><td align="left">否</td><td align="left">前边距，可用于露出前一项的一小部分，接受 px 和 rpx 值</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.9.0</a></td></tr><tr><td align="left">next-margin</td><td align="left">string</td><td align="left">“0px”</td><td align="left">否</td><td align="left">后边距，可用于露出后一项的一小部分，接受 px 和 rpx 值</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.9.0</a></td></tr><tr><td align="left">display-multiple-items</td><td align="left">number</td><td align="left">1</td><td align="left">否</td><td align="left">同时显示的滑块数量</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.9.0</a></td></tr><tr><td align="left">skip-hidden-item-layout</td><td align="left">boolean</td><td align="left">false</td><td align="left">否</td><td align="left">是否跳过未显示的滑块布局，设为 true 可优化复杂情况下的滑动性能，但会丢失隐藏状态滑块的布局信息</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.9.0</a></td></tr><tr><td align="left">easing-function</td><td align="left">string</td><td align="left">“default”</td><td align="left">否</td><td align="left">指定 swiper 切换缓动动画类型</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">2.6.5</a></td></tr><tr><td align="left">bindchange</td><td align="left">eventhandle</td><td align="left"></td><td align="left">否</td><td align="left">current 改变时会触发 change 事件，event.detail = {current, source}</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.0.0</a></td></tr><tr><td align="left">bindtransition</td><td align="left">eventhandle</td><td align="left"></td><td align="left">否</td><td align="left">swiper-item 的位置发生改变时会触发 transition 事件，event.detail = {dx: dx, dy: dy}</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">2.4.3</a></td></tr><tr><td align="left">bindanimationfinish</td><td align="left">eventhandle</td><td align="left"></td><td align="left">否</td><td align="left">动画结束时会触发 animationfinish 事件，event.detail 同上</td><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="noopener">1.9.0</a></td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">//轮播图容器 相对位置 内边距 上外边距 背景线性渐变</span><br><span class="line"><span class="selector-class">.swiper-container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40</span>rpx;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">88</span>rpx;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(#fff,#f2f2f2);</span><br><span class="line">&#125;</span><br><span class="line">//轮播图匣子 宽 高 溢出内容被修剪 圆角边框 定义转换，只是用 Y 轴的值。</span><br><span class="line"><span class="selector-class">.swiper_box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">240</span>rpx;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">670</span>rpx;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">16</span>rpx;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">//轮播图 宽高和匣子一致 设置背景色</span><br><span class="line"><span class="selector-class">.baners</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">240</span>rpx;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">670</span>rpx;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">198</span>,<span class="number">55</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">//容器中的圆点 位置绝对 左边缘向右50个像素 右边缘向左50个像素 距底部60个像素</span><br><span class="line">//flex容器保持块状特性，宽度默认100%，不和内联元素一行显示。</span><br><span class="line">//在弹性盒对象中位于容器的结尾。</span><br><span class="line">//z-index 属性指定一个元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</span><br><span class="line"><span class="selector-class">.swiper-container</span> <span class="selector-class">.dots</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50</span>rpx;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">50</span>rpx;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">60</span>rpx;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line">//圆点 宽高 上下边距0px 右左边距8rpx 背景黑色透明 使用%定义角落的形状。</span><br><span class="line">//0.6秒悬停变化 透明度0.4</span><br><span class="line"><span class="selector-class">.swiper-container</span> <span class="selector-class">.dots</span> <span class="selector-class">.dot</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10</span>rpx;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">8</span>rpx;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.4</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.6s</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.4</span>;</span><br><span class="line">&#125;</span><br><span class="line">//圆点触发时 宽度改变 背景不透明度增加 圆角改变</span><br><span class="line"><span class="selector-class">.swiper-container</span> <span class="selector-class">.dots</span> <span class="selector-class">.dot</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10</span>rpx;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20</span>rpx;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.8</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5</span>rpx;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode203-移除链表元素</title>
      <link href="p/915a.html"/>
      <url>p/915a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/submissions/" target="_blank" rel="noopener">删除链表中等于给定值 val 的所有节点。</a></p><blockquote><p>示例:</p><p>输入: 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6<br>输出: 1-&gt;2-&gt;3-&gt;4-&gt;5</p></blockquote><a id="more"></a><figure class="highlight java"><figcaption><span>预设条件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">*     <span class="keyword">int</span> val;</span><br><span class="line">*     ListNode next;</span><br><span class="line">*     ListNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">* &#125;</span><br></pre></td></tr></table></figure><h1 id="常规解法"><a href="#常规解法" class="headerlink" title="常规解法"></a>常规解法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//题解：传入一个链表以及需要删除的元素，元素重复也需要删除,返回删除后的链表</span></span><br><span class="line">    <span class="comment">//不使用虚拟头结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//头结点被删除</span></span><br><span class="line">        <span class="keyword">while</span>(head !=<span class="keyword">null</span> &amp;&amp; head.val==val)&#123;</span><br><span class="line">            ListNode delNode = head;</span><br><span class="line">            head = head.next;</span><br><span class="line">            delNode.next=<span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//链表为空，返回null</span></span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中间节点被删除</span></span><br><span class="line">        <span class="comment">//删除链表需要找到其前面的元素</span></span><br><span class="line">        ListNode prev= head;</span><br><span class="line">        <span class="keyword">while</span>(prev.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prev.next.val==val)&#123;</span><br><span class="line">                <span class="comment">//执行删除操作</span></span><br><span class="line">                ListNode target=prev.next;</span><br><span class="line">                prev.next=target.next;</span><br><span class="line">                target.next=<span class="keyword">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                prev=prev.next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://img.senup.cn/blog/20200423/97WV9xK2mu0E.png?imageslim" alt="运行结果"></p><h1 id="修改版"><a href="#修改版" class="headerlink" title="修改版"></a>修改版</h1><figure class="highlight java"><figcaption><span>不考虑内存的情况下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//题解：传入一个链表以及需要删除的元素，元素重复也需要删除,返回删除后的链表</span></span><br><span class="line">    <span class="comment">//不使用虚拟头结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//头结点被删除</span></span><br><span class="line">        <span class="keyword">while</span>(head !=<span class="keyword">null</span> &amp;&amp; head.val==val)&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//链表为空，返回null</span></span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中间节点被删除</span></span><br><span class="line">        <span class="comment">//删除链表需要找到其前面的元素</span></span><br><span class="line">        ListNode prev= head;</span><br><span class="line">        <span class="keyword">while</span>(prev.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prev.next.val==val)&#123;</span><br><span class="line">                <span class="comment">//执行删除操作</span></span><br><span class="line">                prev.next=prev.next.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                prev=prev.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="增设虚拟头节点"><a href="#增设虚拟头节点" class="headerlink" title="增设虚拟头节点"></a>增设虚拟头节点</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//题解：传入一个链表以及需要删除的元素，元素重复也需要删除,返回删除后的链表</span></span><br><span class="line">    <span class="comment">//使用虚拟头结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummyHead.next=head;</span><br><span class="line"></span><br><span class="line">        ListNode prev= dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(prev.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prev.next.val==val)&#123;</span><br><span class="line">                <span class="comment">//执行删除操作</span></span><br><span class="line">                ListNode target=prev.next;</span><br><span class="line">                prev.next=target.next;</span><br><span class="line">                target.next=<span class="keyword">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                prev=prev.next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="递归一"><a href="#递归一" class="headerlink" title="递归一"></a>递归一</h1><p>使用递归解决该算法问题：思路是把问题拆分成头结点和后续的节点。</p><p>现在考虑最小的情况：</p><ol><li><p>最后一个元素（头结点为空），返回的是空；</p></li><li><p>倒数第二个元素判断头结点的值若为要删除的值，则直接返回最后一个元素为空的结果；</p></li><li><p>倒数第三个元素若不是要删除的值，则第三个元素接上后面的结果，即第三个元素.next=后两步返回的结果</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用递归解决问题</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode res = removeElements(head.next, val);</span><br><span class="line">        <span class="keyword">if</span>(head.val==val)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            head.next=res;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="递归二"><a href="#递归二" class="headerlink" title="递归二"></a>递归二</h1><p>思路和上面一致，不过逻辑处理的时候默认返回后半部分，如果不为删除的元素则后半部分+头部一起返回。</p><figure class="highlight java"><figcaption><span>更简洁的写法，使用三目运算符</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用递归解决问题</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head.next = removeElements(head.next, val);</span><br><span class="line">        <span class="keyword">return</span> head.val==val?head.next:head;</span><br><span class="line"><span class="comment">//        if(head.val==val)&#123;</span></span><br><span class="line"><span class="comment">//            return head.next;</span></span><br><span class="line"><span class="comment">//        &#125;else &#123;</span></span><br><span class="line"><span class="comment">//            return head;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>可以看到使用递归可以三行代码解决问题，非常优雅！简单的递归语句有着更为复杂的逻辑需要编写者去思索，但这也是值得的。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网课现状</title>
      <link href="p/3df8.html"/>
      <url>p/3df8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>最近新开了一门课——微信小程序。有意思的是，我发现任课老师讲的内容我全都看过，那是一本书的内容。这老师居然直接使用别人的教学！人家黑马出的《微信小程序开发实战》书、教学视频和ppt课件全都有了，需要你再来照着讲一遍？只能说，信息不对等造就了一堆混子。还有就是，除了我之外，其他人似乎都在很认真很认真地听课，还真不好吐槽什么…</li><li>发哥的游戏开发照常很水。就拿游戏场景设计和功能实现这两方面来说，本来游戏场景设计讲一下思路方法即可，毕竟每个人实现不同，重点应该是讲讲功能实现。结果他完全反着来，场景99%，功能1%。我已经看了好几节课，发哥用着他慢吞吞的语速给大家慢慢科普要怎么建模，期间出现程序问题丝毫没有debug的思维，靠着替换以前文件来解决当前的问题。总之，互联网快速迭代下，计科老教师很难跟上时代发展。</li><li>抱怨和吐槽有什么区别？没区别。因为这两者都改变不了什么，很多东西其实只是去做就行了，公开场合说过一些多余的话反而让我事后觉得浑身不舒坦，所以，照着自己的意志走就行了，切记：少发言多做事。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用网站合集</title>
      <link href="p/be58.html"/>
      <url>p/be58.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>整理浏览器收藏夹的时候，觉得有必要把一些可能会用到的网站收藏起来，万一以后要用到呢？</p><a id="more"></a><h1 id="windows激活"><a href="#windows激活" class="headerlink" title="windows激活"></a><a href="https://kms.cangshui.net/" target="_blank" rel="noopener">windows激活</a></h1><p><img src="https://img.senup.cn/blog/20200426/om2KuT6QbdKF.png?imageslim" alt="激活"></p><h1 id="纸飞机"><a href="#纸飞机" class="headerlink" title="纸飞机"></a><a href="https://zfjvpn.gitbook.io/123/" target="_blank" rel="noopener">纸飞机</a></h1><p><img src="https://img.senup.cn/blog/20200421/DD2zuoH322Fa.png?imageslim" alt></p><h1 id="大眼仔旭"><a href="#大眼仔旭" class="headerlink" title="大眼仔旭"></a><a href="http://www.dayanzai.me/" target="_blank" rel="noopener">大眼仔旭</a></h1><p><img src="https://img.senup.cn/blog/20200421/hgRH0n4FTD4M.png?imageslim" alt></p><h1 id="在线ico图标制作"><a href="#在线ico图标制作" class="headerlink" title="在线ico图标制作"></a><a href="http://www.bitbug.net/" target="_blank" rel="noopener">在线ico图标制作</a></h1><p><img src="https://img.senup.cn/blog/20200421/8c2ijAtMdmDI.png?imageslim" alt></p><h1 id="消除图片背景"><a href="#消除图片背景" class="headerlink" title="消除图片背景"></a><a href="https://www.remove.bg/zh" target="_blank" rel="noopener">消除图片背景</a></h1><p><img src="https://img.senup.cn/blog/20200421/CVafvuSTzx0Y.png?imageslim" alt></p><h1 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a><a href="https://tinypng.com/" target="_blank" rel="noopener">图片压缩</a></h1><p><img src="https://img.senup.cn/blog/20200421/DdrJGMC0ULry.png?imageslim" alt></p><h1 id="图片放大"><a href="#图片放大" class="headerlink" title="图片放大"></a><a href="http://waifu2x.udp.jp/" target="_blank" rel="noopener">图片放大</a></h1><p><img src="https://img.senup.cn/blog/20200421/MqED7mdQeeoV.png?imageslim" alt></p><h1 id="pornhub-Logo生成"><a href="#pornhub-Logo生成" class="headerlink" title="pornhub Logo生成"></a><a href="https://www.zerobbs.net/pornhub/" target="_blank" rel="noopener">pornhub Logo生成</a></h1><p><img src="https://img.senup.cn/blog/20200421/YBlhew8BoL4D.png?imageslim" alt></p><h1 id="YouTube-logo生成"><a href="#YouTube-logo生成" class="headerlink" title="YouTube logo生成"></a><a href="https://www.zerobbs.net/youtube/" target="_blank" rel="noopener">YouTube logo生成</a></h1><p><img src="https://img.senup.cn/blog/20200421/aorpfvjJi4wS.png?imageslim" alt></p><h1 id="Pexels"><a href="#Pexels" class="headerlink" title="Pexels"></a><a href="https://www.pexels.com/" target="_blank" rel="noopener">Pexels</a></h1><p><img src="https://img.senup.cn/blog/20200421/7E2s0KgsDPTY.png?imageslim" alt></p><h1 id="短句子API"><a href="#短句子API" class="headerlink" title="短句子API"></a><a href="https://www.alapi.net/doc/show/4.html" target="_blank" rel="noopener">短句子API</a></h1><p><img src="https://img.senup.cn/blog/20200421/hC3rQ1qd2Wcl.png?imageslim" alt></p><h1 id="magisk框架"><a href="#magisk框架" class="headerlink" title="magisk框架"></a><a href="http://xposed.appkg.com/tag/magisk%E6%A1%86%E6%9E%B6" target="_blank" rel="noopener">magisk框架</a></h1><p><img src="https://img.senup.cn/blog/20200421/BH7VKXXQEJwV.png?imageslim" alt></p><h1 id="漫画"><a href="#漫画" class="headerlink" title="漫画"></a><a href="https://volmoe.com/" target="_blank" rel="noopener">漫画</a></h1><p><img src="https://img.senup.cn/blog/20200421/TealUF8Mu8Ok.png?imageslim" alt></p><h1 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a><a href="https://sobooks.cc/" target="_blank" rel="noopener">书籍</a></h1><p><img src="https://img.senup.cn/blog/20200421/iyVm8dWPyBLS.png?imageslim" alt></p><h1 id="书聚"><a href="#书聚" class="headerlink" title="书聚"></a><a href="https://ebookg.com/" target="_blank" rel="noopener">书聚</a></h1><p><img src="https://img.senup.cn/blog/20200421/i2urlgBBWq4X.png?imageslim" alt></p><h1 id="Java知识分享网"><a href="#Java知识分享网" class="headerlink" title="Java知识分享网"></a><a href="http://www.java1234.com/a/javabook/" target="_blank" rel="noopener">Java知识分享网</a></h1><p><img src="https://img.senup.cn/blog/20200421/CJSpSjzNcQ81.png?imageslim" alt></p><h1 id="脚本之家"><a href="#脚本之家" class="headerlink" title="脚本之家"></a><a href="https://www.jb51.net/books/" target="_blank" rel="noopener">脚本之家</a></h1><p><img src="https://img.senup.cn/blog/20200421/X0JRHw24fGxx.png?imageslim" alt></p><h1 id="Css3演示"><a href="#Css3演示" class="headerlink" title="Css3演示"></a>Css3演示</h1><p><img src="https://img.senup.cn/blog/20200421/Hso6L9aASATH.png?imageslim" alt></p><h1 id="弹唱谱"><a href="#弹唱谱" class="headerlink" title="弹唱谱"></a><a href="https://mp.weixin.qq.com/s/wImBtygT8ic0vOZGXQLWVg" target="_blank" rel="noopener">弹唱谱</a></h1><p><img src="https://img.senup.cn/blog/20200421/WhnOfviPalbV.png?imageslim" alt></p><h1 id="好看的渐变色"><a href="#好看的渐变色" class="headerlink" title="好看的渐变色"></a><a href="https://webgradients.com/" target="_blank" rel="noopener">好看的渐变色</a></h1><p><img src="https://img.senup.cn/blog/20200421/5NGVSoBiJDeA.png?imageslim" alt></p><hr><h1 id="博客美化系列"><a href="#博客美化系列" class="headerlink" title="博客美化系列"></a>博客美化系列</h1><p><a href="https://siriusq.top/Next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96" target="_blank" rel="noopener">https://siriusq.top/Next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96</a></p><p><a href="http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html" target="_blank" rel="noopener">http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html</a></p><p><a href="https://xian6ge.cn/posts/6d7ed114/" target="_blank" rel="noopener">https://xian6ge.cn/posts/6d7ed114/</a></p><p><a href="http://yearito.cn/categories/技术/博客/" target="_blank" rel="noopener">http://yearito.cn/categories/%E6%8A%80%E6%9C%AF/%E5%8D%9A%E5%AE%A2/</a></p><p><a href="https://gis90.github.io/articles/3412/" target="_blank" rel="noopener">https://gis90.github.io/articles/3412/</a></p><p><a href="https://bestzuo.cn/posts/1689445187.html" target="_blank" rel="noopener">https://bestzuo.cn/posts/1689445187.html</a></p><p><a href="https://www.teaper.dev/2019/05/31/hexogithub/" target="_blank" rel="noopener">https://www.teaper.dev/2019/05/31/hexogithub/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-黑人抬棺(Astronomy)</title>
      <link href="p/8783.html"/>
      <url>p/8783.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  在新冠肺炎疫情肆虐期间，全世界的人们不得不宅在家里自行隔离。而这时侯有一段灵魂舞曲突然蹿红网络，成为了全球模仿的热潮。这段舞曲叫做“黑人抬棺”，其实是非洲加纳的一段殡葬仪式视频。其实，“黑人抬棺”并不是什么故意做出来的噱头，而是真正的加纳殡葬习俗。而这首BGM背景音乐是托尼·伊基（Tony Igy）的电子舞曲“天文学”（Astronomy），所以听上去还真有点星辰大海的灵魂感觉！这些抬棺材的黑人小哥是加纳著名的护柩者，当地人将其亲切地称为“达达·阿武”。</p><a id="more"></a><p>乐谱：</p><p><img src="https://img.senup.cn/blog/20200421/q5KtBjkylxCT.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200421/EDzMny8Cc5oi.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200421/rHM7Gg07PKqX.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题之HTTPS</title>
      <link href="p/980b.html"/>
      <url>p/980b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>真正的知识应该是大道至简的。</p></blockquote><a id="more"></a><h1 id="为什么使用协议呢？"><a href="#为什么使用协议呢？" class="headerlink" title="为什么使用协议呢？"></a>为什么使用协议呢？</h1><p>协议就是一种规则和约定，有了这种约定，不同厂商的生产设备，以及不同操作系统组成的计算机之间，就可以实现通信。</p><h1 id="http协议用来干嘛？"><a href="#http协议用来干嘛？" class="headerlink" title="http协议用来干嘛？"></a>http协议用来干嘛？</h1><p>HTTP协议是超文本传输协议的缩写，英文是Hyper Text Transfer Protocol。</p><p>超文本协议，就是用来传输超文本，也就是传输超文本标记语言HTML。</p><h1 id="http是怎么工作的呢？"><a href="#http是怎么工作的呢？" class="headerlink" title="http是怎么工作的呢？"></a>http是怎么工作的呢？</h1><p>我们以访问百度为例：</p><p><img src="https://img.senup.cn/blog/20200418/NQD15iVbU9db.png?imageslim" alt="工作原理"></p><h1 id="http有什么特点？"><a href="#http有什么特点？" class="headerlink" title="http有什么特点？"></a>http有什么特点？</h1><ol><li>无连接，处理完请求就断开了。但是却不利于客户端与服务器保持会话连接，为了弥补这种不足，产生了两项记录http状态的技术，一个叫做Cookie,一个叫做Session。</li><li>无状态：无状态是指协议对于事务处理没有记忆，后续处理需要前面的信息，则必须重传。</li></ol><h1 id="uri和url有什么区别？"><a href="#uri和url有什么区别？" class="headerlink" title="uri和url有什么区别？"></a>uri和url有什么区别？</h1><blockquote><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。</p><p>URI：Uniform Resource Identifier 统一资源标识符<br>URL：Uniform Resource Location 统一资源定位符<br>URI 是用来标示 一个具体的资源的，我们可以通过 URI 知道一个资源是什么。</p><p>URL 则是用来定位具体的资源的，标示了一个具体的资源位置。互联网上的每个文件都有一个唯一的URL。</p></blockquote><p>比如一个叫张三的人，他的住址xx街xx号xx室可以作为URL，他的身份证xxxxxxxxx可以作为URI。</p><h1 id="常见请求方法有什么区别？"><a href="#常见请求方法有什么区别？" class="headerlink" title="常见请求方法有什么区别？"></a>常见请求方法有什么区别？</h1><ol><li>GET:请求指定的页面信息，并返回实体主体。<ol start="2"><li>POST:向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。<ol start="3"><li>HEAD:类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头<ol start="4"><li>PUT:从客户端向服务器传送的数据取代指定的文档的内容。<ol start="5"><li>DELETE:请求服务器删除指定的页面。</li></ol></li></ol></li></ol></li></ol></li></ol><h1 id="编程中响应状态码是什么意思？"><a href="#编程中响应状态码是什么意思？" class="headerlink" title="编程中响应状态码是什么意思？"></a>编程中响应状态码是什么意思？</h1><p>响应状态码：访问一个网页时，浏览器会向web服务器发出请求。此网页所在的服务器会返回一个包含HTTP状态码的信息头用以响应浏览器的请求。</p><p>状态码分类：</p><p>1XX- 信息型，服务器收到请求，需要请求者继续操作。<br>2XX- 成功型，请求成功收到，理解并处理。<br>3XX - 重定向，需要进一步的操作以完成请求。<br>4XX - 客户端错误，请求包含语法错误或无法完成请求。<br>5XX - 服务器错误，服务器在处理请求的过程中发生了错误。<br>常见状态码：</p><p>200 OK - 客户端请求成功<br>301 - 资源（网页等）被永久转移到其它URL<br>302 - 临时跳转<br>400 Bad Request - 客户端请求有语法错误，不能被服务器所理解<br>401 Unauthorized - 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>404 - 请求资源不存在，可能是输入了错误的URL<br>500 - 服务器内部发生了不可预期的错误<br>503 Server Unavailable - 服务器当前不能处理客户端的请求，一段时间后可能恢复正常。</p><h1 id="使用http有什么危险？"><a href="#使用http有什么危险？" class="headerlink" title="使用http有什么危险？"></a>使用http有什么危险？</h1><p>比如你登陆一个http的网站，那么使用抓包工具wireshark就可以直接看到账号和密码明文。那么这就是<strong>请求部分明文传输，容易被窃听截取</strong>。</p><p>如果你的数据被窃听，那么你可能收到黑客修改后的数据，这就涉及了<strong>数据的完整性未校验，容易被篡改</strong>。</p><p>你使用信任的网站，<strong>没有验证对方身份，那么存在冒充危险</strong>，网站背后也可能是个黑客。</p><h1 id="什么是HTTPS"><a href="#什么是HTTPS" class="headerlink" title="什么是HTTPS?"></a>什么是HTTPS?</h1><p>HTTPS 协议（HyperText Transfer Protocol over Secure Socket Layer）：一般理解为HTTP+SSL/TLS，通过 SSL证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密。</p><h1 id="HTTPS有什么缺点？"><a href="#HTTPS有什么缺点？" class="headerlink" title="HTTPS有什么缺点？"></a>HTTPS有什么缺点？</h1><p>HTTPS协议多次握手，导致页面的加载时间延长近50%；<br>HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗；<br>申请SSL证书需要钱，功能越强大的证书费用越高。<br>SSL涉及到的安全算法会消耗 CPU 资源，对服务器资源消耗较大。</p><h1 id="浏览器在使用HTTPS传输数据的流程是什么？"><a href="#浏览器在使用HTTPS传输数据的流程是什么？" class="headerlink" title="浏览器在使用HTTPS传输数据的流程是什么？"></a>浏览器在使用HTTPS传输数据的流程是什么？</h1><p><img src="https://img.senup.cn/blog/20200418/UkSSlCuQNaWx.png?imageslim" alt="传输数据的流程"></p><p>首先客户端通过URL访问服务器建立SSL连接。<br>服务端收到客户端请求后，会将网站支持的证书信息（证书中包含公钥）传送一份给客户端。<br>客户端的服务器开始协商SSL连接的安全等级，也就是信息加密的等级。<br>客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。<br>服务器利用自己的私钥解密出会话密钥。<br>服务器利用会话密钥加密与客户端之间的通信。</p><h1 id="HTTPS和HTTP有什么区别？"><a href="#HTTPS和HTTP有什么区别？" class="headerlink" title="HTTPS和HTTP有什么区别？"></a>HTTPS和HTTP有什么区别？</h1><p>HTTPS是HTTP协议的安全版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理。<br>http和https使用连接方式不同，默认端口也不一样，http是80，https是443。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十年之约</title>
      <link href="p/c661.html"/>
      <url>p/c661.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>刚刚收到【<a href="https://www.foreverblog.cn/blogs.html" target="_blank" rel="noopener">十年之约</a>】的邮件，没想到随手投递的申请居然过了！本社恐居然有点高兴又有点害怕(摊手</p><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>【十年之约】亲爱的十年之约成员：很高兴通知您，您的申请已通过审核，欢迎加入十年之约！从今日起，您就是十年之约的正式成员！您收到本邮件之时，您博客的十年之约正式生效，请认真对待这个约定！</p>            <i class="fa fa-quote-right"></i>          </blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次线上演讲</title>
      <link href="p/34bf.html"/>
      <url>p/34bf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这学期项目管理的老师有点作妖，喜欢让学生花时间制作PPT，演讲，录制视频，分享讨论等等，虽然本人并不喜欢太严格的管教，但是不可否认的是，在这些学习任务的压力下，还是学到了很多东西的。接下来就讲讲阴差阳错学到的各种软件吧。</p><a id="more"></a><h1 id="一定要录视频吗？"><a href="#一定要录视频吗？" class="headerlink" title="一定要录视频吗？"></a>一定要录视频吗？</h1><p>录制视频的时候感受到深深的恶意——原来自己的嗓音那么难听！一度难听到快录不下去，并且声线音色这些东西其实是很难改过来的，毕竟出厂配置早早就决定好了。囧~这般情况下有什么办法呢？</p><p>想起之前自己保存过变声器，那么正好借录视频的机会把这个软件拿起来用用。</p><h1 id="变声器"><a href="#变声器" class="headerlink" title="变声器"></a>变声器</h1><div class="tabs" id="tab标签列表"><ul class="nav-tabs"><li class="tab active"><a href="#tab标签列表-1">软件配置</a></li><li class="tab"><a href="#tab标签列表-2">下载地址</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab标签列表-1"><p>  软件的具体配置</p><ol><li>麦克风设备bee设置为【默认设备】，之前的默认麦克风设备则改成【默认通信设备】</li><li>调节变声器（主要调节音调移位控制声音，其他微调，如下图）</li><li>解决杂音回响（麦克风音量调低，大概10左右即可）</li></ol></div><div class="tab-pane" id="tab标签列表-2"><a class="btn" href="https://pan.baidu.com/s/1BGYB3yQdDgui_GoYmoehAQ" target="_blank" rel="noopener">            <i class="fa fa-download fa-lg fa-fw"></i>提取码:10pu          </a></div></div></div><p><img src="https://img.senup.cn/blog/20200417/A4DcAwxNR3Yg.png?imageslim" alt="麦克风"></p><p><img src="https://img.senup.cn/blog/20200417/wahBqWlWkUGo.png?imageslim" alt="调节变声器"></p><p>变声过程中最重要的一点是：轻声细语。</p><p>不同于以往撕扯声带的发声方式，真正好听的发声方式应该是轻轻地，柔和且富有感情的声音。演讲的时候语速要保持慢，咬字清晰。虽然不能保证出彩的效果，但是起码不会出丑。这种方式也适合之后生活上使用。</p><h1 id="电脑录屏软件"><a href="#电脑录屏软件" class="headerlink" title="电脑录屏软件"></a>电脑录屏软件</h1><div class="tabs" id="录屏软件"><ul class="nav-tabs"><li class="tab active"><a href="#录屏软件-1">使用</a></li><li class="tab"><a href="#录屏软件-2">下载地址</a></li></ul><div class="tab-content"><div class="tab-pane active" id="录屏软件-1"><p>尝试过很多坑，大部分软件不是限制时长，就是要求收费使用，用户体验非常不好。</p><p>明明录制视频不过就是对ffmpeg的使用，却搞出了很多花样。因此，找到了一个极简的电脑录屏软件——Captura。</p><p>因为之前安装过变声器，所以在Captura里把音频设置里面bee Audio的设备勾选上。</p><p>接下来自定义好录制/停止的快捷键，就可以开始录制视频了。</p></div><div class="tab-pane" id="录屏软件-2"><a class="btn" href="https://mathewsachin.github.io/Captura/" target="_blank" rel="noopener">            <i class="fa fa-download fa-lg fa-fw"></i>点击下载Captura          </a></div></div></div><h1 id="PPT神器"><a href="#PPT神器" class="headerlink" title="PPT神器"></a>PPT神器</h1><p>那么制作PPT的时候就用到自己使用过的【islide】。不幸的是这个软件似乎加紧了收费，越来越多的资源都需要开通vip才能使用，免费的资源所剩无几，怎么办呢？</p><p>我尝试下载破解版的插件,3.x版本的破解插件几乎是使用不了的，会因为账号无法登录而不能连接服务器，获取不到资源。</p><p>所以，这里似乎白嫖不了，穷鬼的哭泣。</p><p>难道真的做一次PPT需要买一个二十块钱的vip么？不，其实还是有解决办法的。</p><p>从论坛搜索到islide官方有邮箱验证七天试用的活动。那么简单地使用接码平台，就可以得到想要多久就能多久的效果。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>学习任务在我看来其实并不重要，谁不是照着稿子念呢？无非就是形式主义，应付上去即可。有人认为演讲能提升口头能力，有人认为演讲能熟悉技术，重要的是知道自己手头 现在做的事情是什么。</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>pandownload的作者蔡某萌被抓了，突然感觉到很难过。听这个名字感觉像是一个程序媛，一个人折腾服务器，折腾客户端，努力提升用户体验，软件质量相当高，无广告，不收费。可以说，这个人是极富有原始互联网分享精神的，让我怀念起以前还没资本化的网络环境，那时候大家分享都是单纯做分享，分享技术，乐在其中。我觉得有一个词是可以形容这些前辈的——侠之大者，听上去虽然很中二，但这也是我心中对技术人员的最好定义了。</p>            <i class="fa fa-quote-right"></i>          </blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode20-有效的括号</title>
      <link href="p/74a.html"/>
      <url>p/74a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tabs" id="tab标签列表"><ul class="nav-tabs"><li class="tab active"><a href="#tab标签列表-1">题目要求</a></li><li class="tab"><a href="#tab标签列表-2">示例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab标签列表-1"><p>  给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。</p><p>左括号必须以正确的顺序闭合。</p><p>注意空字符串可被认为是有效字符串。</p></div><div class="tab-pane" id="tab标签列表-2"><p>示例 1:</p><p>输入: “()”<br>输出: true<br>示例 2:</p><p>输入: “()[]{}”<br>输出: true<br>示例 3:</p><p>输入: “(]”<br>输出: false<br>示例 4:</p><p>输入: “([)]”<br>输出: false<br>示例 5:</p><p>输入: “{[]}”<br>输出: true</p></div></div></div><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>观察下面的示例，可以看出括号需要满足闭合以及括号匹配的问题。</p><p>那这里可以利用栈来实现，先把字符串遍历，取出字符，左括号入栈，遇到右括号先判断是否和栈顶的符合匹配，如果匹配，则弹出；再进行下一步右括号的匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'('</span> || c==<span class="string">'['</span>||c==<span class="string">'&#123;'</span>)&#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(stack.isEmpty())&#123;<span class="comment">//说明最左边为右括号。</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">char</span> topChar=stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(topChar!=<span class="string">'('</span> &amp;&amp; c==<span class="string">')'</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(topChar!=<span class="string">'['</span> &amp;&amp; c==<span class="string">']'</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(topChar!=<span class="string">'&#123;'</span> &amp;&amp; c==<span class="string">'&#125;'</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        return true;错误，举例"["</span></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.senup.cn/blog/20200415/nkl9w4jfru3G.png?imageslim" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coding更新记</title>
      <link href="p/e0dc.html"/>
      <url>p/e0dc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2020.0413这一天，搭载在coding page上的静态博客访问速度时好时坏，终于在晚上十一点的时候，博客访问不了，出现404，看到熟悉的猴子logo，就知道开发者平台肯定又更新了。于是，必须要进行博客git仓库的重新适配。</p><p><img src="https://img.senup.cn/blog/20200413/DDcScvvCutpu.png?imageslim" alt></p><a id="more"></a><h2 id="实名认证"><a href="#实名认证" class="headerlink" title="实名认证"></a>实名认证</h2><p>这一次要求开发者团队所有者必须实名认证才能使用静态page服务。无奈，遂照做。</p><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><p>首先，新建个readme文件进行初始化。</p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p><img src="https://img.senup.cn/blog/20200413/ziuuM2XLcExP.png?imageslim" alt></p><h3 id="添加dns解析记录"><a href="#添加dns解析记录" class="headerlink" title="添加dns解析记录"></a>添加dns解析记录</h3><p>即添加上图打码部分的CNAME记录</p><h3 id="添加txt记录"><a href="#添加txt记录" class="headerlink" title="添加txt记录"></a>添加txt记录</h3><p>为了证明域名归属，按要求在DNS解析中添加txt记录</p><p><img src="https://img.senup.cn/blog/20200413/I7E0WuL1bopd.png?imageslim" alt></p><h3 id="解决证书申请错误"><a href="#解决证书申请错误" class="headerlink" title="解决证书申请错误"></a>解决证书申请错误</h3><p>Coding Pages 申请 SSL/TLS 安全证书出现以下错误：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urn:acme:error:unauthorized: Invalid response from http:<span class="comment">//www.xxxx.cn/.well-known/acme-challenge/ysOz9wW3U_GFPP8kRP4w8uknBZ9UfiUT7t2xpu9pDCw [185.199.111.153]: "\n\n \n &lt;meta http-equiv="Content-type" content="text/html; charset=utf-8"&gt;\n &lt;meta http-equiv=“Co”</span></span><br></pre></td></tr></table></figure><p>原因分析：这种错误一般是 hexo 博客双线部署到 GitHub Pages 和 Coding Pages 过程中出现的，并且已经在域名 DNS 配置好了 GitHub 的域名解析，这种情况下，在验证域名所有权时会定位到 Github Pages 的主机上导致 SSL 证书申请失败</p><p>解决方法：先去域名 DNS 把 GitHub 的解析暂停掉，然后再重新申请 SSL 证书，等待申请成功再恢复 GitHub 的解析</p><p>此时证书申请成功。</p><h2 id="修改博客配置文件"><a href="#修改博客配置文件" class="headerlink" title="修改博客配置文件"></a>修改博客配置文件</h2><p>按照coding提供的SSH链接更新本地的_comfig.yml的deploy-&gt;repo路径。</p><p>接着git提交。</p><p>出现错误。</p><h2 id="解决提交git问题"><a href="#解决提交git问题" class="headerlink" title="解决提交git问题"></a>解决提交git问题</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nothing to commit, working tree clean</span><br><span class="line">Coding 提示: Permission denied.</span><br><span class="line">没有权限操作此仓库。</span><br></pre></td></tr></table></figure><p>没有权限，大概率是跟公钥有关，打开个人设置里面查看，之前的公钥确实都被清空了。</p><p><img src="https://img.senup.cn/blog/20200413/lUyYJHgirr25.png?imageslim" alt></p><p>解决办法：</p><p>上传<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>下的公钥。</p><h2 id="部署成功"><a href="#部署成功" class="headerlink" title="部署成功"></a>部署成功</h2><p><img src="https://img.senup.cn/blog/20200413/I0sf2JbsssSQ.png?imageslim" alt></p><p>由于是github和coding的双线部署，现在再把github的境外DNS解析记录打开就行了，完毕。</p><p>希望更新后的服务器能更好用吧。</p><blockquote><p>总结，白嫖麻花藤巴巴的git仓库真是太烦了，隔三差五更新谁顶得住？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白盒测试设计方法学习笔记</title>
      <link href="p/6c79.html"/>
      <url>p/6c79.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="白盒测试设计方法学习笔记"><a href="#白盒测试设计方法学习笔记" class="headerlink" title="白盒测试设计方法学习笔记"></a>白盒测试设计方法学习笔记</h1><p>白盒测试设计方法最简单的区别如下：</p><ul><li><p>语句覆盖：所有的“语句”都要覆盖一遍</p></li><li><p>判定覆盖：包含语句覆盖，每个判断T、F各一次</p></li><li><p>条件覆盖：包含语句覆盖，每个条件T、F各一次</p></li><li><p>判定条件覆盖：包含判定覆盖、条件覆盖</p></li><li><p>条件组合覆盖：每个条件的每种组合</p></li><li><p>路径覆盖：所有执行路径</p></li></ul><a id="more"></a><blockquote><p>以下是通过黑马的教学视频做的笔记，方便日后复习。（视频附在最下方）</p></blockquote><h3 id="什么是白盒测试？"><a href="#什么是白盒测试？" class="headerlink" title="什么是白盒测试？"></a>什么是白盒测试？</h3><p>白盒<strong>测试</strong>作为测试人员常用的一种测试<strong>方法</strong>，越来越受到测试工程师的重视。白盒测试并不是简单的按照<strong>代码**</strong>设计<strong>用例，而是需要根据不同的测试</strong>需求<strong>，结合不同的测试对象，</strong>使用**适合的方法进行测试。因为对于不同复杂度的代码逻辑，可以衍生出许多种执行路径，只有适当的测试方法，才能帮助我们从代码的迷雾森林中找到正确的方向。本文介绍六种白盒子测试方法：语句覆盖、判定覆盖、条件覆盖、判定条件覆盖、条件组合覆盖、路径覆盖。</p><h3 id="白盒测试的特点"><a href="#白盒测试的特点" class="headerlink" title="白盒测试的特点"></a>白盒测试的特点</h3><p>优点</p><ul><li>代码覆盖率高</li></ul><p>缺点</p><ol><li>覆盖所有代码路径难度大，特别是遇到循环语句</li><li>业务功能可能覆盖不全</li><li>测试开销大</li></ol><p>因此实际项目中，白盒测试主要针对重点模块进行测试，同时，黑盒测试也不可缺少。</p><p><img src="https://img.senup.cn/blog/20200413/sAcwDJfqSoS4.png?imageslim" alt="优缺点"></p><h3 id="白盒测试设计方法"><a href="#白盒测试设计方法" class="headerlink" title="白盒测试设计方法"></a>白盒测试设计方法</h3><p>主要有动静两种方法。</p><p>静态方法：</p><ul><li>桌面检查：A写完代码给B检查，遵守开发规范</li><li>代码审查：不再一个人审查，而是开会，作者讲解，项目会员审查，侧重关注总体结构</li><li>代码走查：开会，会议上项目会员提前熟悉并准备好测试数据，验证代码实现情况，侧重关注功能实现</li><li>代码扫描工具：自定义规则，若代码 不匹配则自动报错，减少检查编码规范的时间，效果弱于上面三种。</li></ul><p>动态方法：</p><ul><li><p>语句覆盖：所有的“语句”都要覆盖一遍</p></li><li><p>判定覆盖：包含语句覆盖，每个判断T、F各一次</p></li><li><p>条件覆盖：包含语句覆盖，每个条件T、F各一次</p></li><li><p>判定条件覆盖：包含判定覆盖、条件覆盖</p></li><li><p>条件组合覆盖：每个条件的每种组合</p></li><li><p>路径覆盖：所有执行路径</p></li></ul><p>总之，静态不执行程序，动态则是执行程序，实战中使用中动静结合，即先静态再动态。</p><p><img src="https://img.senup.cn/blog/20200413/mzknuVIWH6ti.png?imageslim" alt="设计方法"></p><h3 id="测试设计方法——逻辑覆盖法"><a href="#测试设计方法——逻辑覆盖法" class="headerlink" title="测试设计方法——逻辑覆盖法"></a>测试设计方法——逻辑覆盖法</h3><p>逻辑覆盖法：是通过对程序逻辑结构的遍历实现程序的覆盖。</p><p>覆盖率：用来<code>度量</code>测试完整性的一个手段。</p><p><img src="https://img.senup.cn/blog/20200413/8ds0Y530SYCy.png?imageslim" alt></p><p>一般先将代码转换为程序流程图，再对流程图进行分析。</p><h3 id="语句覆盖"><a href="#语句覆盖" class="headerlink" title="语句覆盖"></a>语句覆盖</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>语句覆盖要求设计足够多的测试用例，使得程序中每条语句至少被执行一次。</p><ul><li><p>优点：可以很直观地从源代码得到测试用例，无须细分每条判定表达式。</p></li><li><p>缺点：由于这种测试方法仅仅针对程序逻辑中显式存在的语句，但对于隐藏的条件和可能到达的隐式逻辑分支，是无法测试的。在if结构中若源代码没有给出else后面的执行分支，那么语句覆盖测试就不会考虑这种情况。但是我们不能排除这种以外的分支不会被执行，而往往这种错误会经常出现。再如，在Do-While结构中，语句覆盖执行其中某一个条件分支。那么显然，语句覆盖对于多分支的逻辑运算是无法全面反映的，它只在乎运行一次，而不考虑其他情况。</p></li></ul><p><img src="https://img.senup.cn/blog/20200413/61E6ORNomhim.png?imageslim" alt></p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>根据定义，每条语句至少被执行一次，则设计以下两条测试用例就满足要求了。</p><blockquote><p>注意：分辨语句、条件以及判定的相关概念</p></blockquote><p><img src="https://img.senup.cn/blog/20200413/H0AcUlubCeI4.png?imageslim" alt="mark"></p><p>测试用例：</p><table><thead><tr><th>数据</th><th>执行语句</th></tr></thead><tbody><tr><td>x=3 ,y=1,magic=2</td><td>1、4</td></tr><tr><td>x=3 ,y=1,magic=2</td><td>2、3、4</td></tr></tbody></table><p>可以看到，两条测试用例覆盖总共覆盖到语句1~4，因此语句覆盖100%。</p><h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><p>语句覆盖标准最弱。</p><p>举个例子：若测试条件<code>x&gt;0&amp;&amp;y&gt;0</code>被程序人员写错成<code>x&gt;0||y&gt;0</code>，你可以发现执行完上述的两条测试用例后，得到的执行结果跟之前完全一致，无法发现出代码的错误，因此，语句覆盖不能准确判断运算中的逻辑关系错误。</p><p><img src="https://img.senup.cn/blog/20200413/AgNfeXX9Q8Uc.png?imageslim" alt></p><h3 id="判定覆盖"><a href="#判定覆盖" class="headerlink" title="判定覆盖"></a>判定覆盖</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>判定覆盖又称为分支覆盖，它要求设计足够多的测试用例，使得程序中每个判定至少有一次为真值，有一次为假值，即：程序中的每个分支至少执行一次。每个判断的取真、取假至少执行一次。</p><ul><li><p>优点：判定覆盖比语句覆盖要多几乎一倍的测试路径，当然也就具有比语句覆盖更强的测试能力。同样判定覆盖也具有和语句覆盖一样的简单性，无须细分每个判定就可以得到测试用例。</p></li><li><p>缺点：往往大部分的判定语句是由多个逻辑条件组合而成（如，判定语句中包含AND、OR、CASE），若仅仅判断其整个最终结果，而忽略每个条件的取值情况，必然会遗漏部分测试路径。</p></li></ul><p><img src="https://img.senup.cn/blog/20200413/tPzTnrOdYUDQ.png?imageslim" alt="mark"></p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><p>针对下图，判定覆盖针对的是整个条件的真假值判断，为求简化将两个条件定义为P1、P2，</p><p>P1整个条件有真假，P2整个条件有真假，</p><p>因此设计的两条测试用例都有覆盖到，判定覆盖率100%。</p><blockquote><p>可以看到真真，假假这两种情况并没有涉及。</p></blockquote><p><img src="https://img.senup.cn/blog/20200413/0IHfwBvAOtRE.png?imageslim" alt="mark"></p><h4 id="局限性-1"><a href="#局限性-1" class="headerlink" title="局限性"></a>局限性</h4><ul><li>判定覆盖强于语句覆盖。</li><li>判定覆盖代码出错照样无法检测，参照下图例子</li></ul><p><img src="https://img.senup.cn/blog/20200413/sbu1eUgJqOrS.png?imageslim" alt></p><h3 id="条件覆盖"><a href="#条件覆盖" class="headerlink" title="条件覆盖"></a>条件覆盖</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>条件覆盖要求设计足够多的测试用例，使得判定中的每个条件获得各种可能的结果，即每个条件至少有一次为真值，有一次为假值。</p><ul><li>优点：显然条件覆盖比判定覆盖，增加了对符合判定情况的测试，增加了测试路径。</li><li>缺点：要达到条件覆盖，需要足够多的测试用例，但条件覆盖并不能保证判定覆盖。条件覆盖只能保证每个条件至少有一次为真，而不考虑所有的判定结果。</li></ul><p><img src="https://img.senup.cn/blog/20200413/NvudweW4jxA4.png?imageslim" alt></p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p><img src="https://img.senup.cn/blog/20200413/5HnRVAdTDRMd.png?imageslim" alt="mark"></p><p>可以看到条件覆盖侧重于C1 C2 C3单个条件的真假。</p><p><img src="https://img.senup.cn/blog/20200413/UQIK0rHpMqvl.png?imageslim" alt></p><h4 id="局限性-2"><a href="#局限性-2" class="headerlink" title="局限性"></a>局限性</h4><p>看到这里可能有疑惑：既然条件覆盖比判定覆盖更细致，那么条件覆盖是不是就包含了判定覆盖呢？</p><p>下图中，c1 c2 c3三个条件分别有真假两种情况，这是条件覆盖。但是我们可以看到P1这个综合条件却只有假这一种情况，P1为真并没有被覆盖到，不符合判定覆盖，因此结论是条件覆盖不包含判定覆盖。</p><p><img src="https://img.senup.cn/blog/20200413/3Fa7T9URDYsC.png?imageslim" alt="mark"></p><h3 id="判定覆盖-与-条件覆盖-的区别"><a href="#判定覆盖-与-条件覆盖-的区别" class="headerlink" title="判定覆盖 与 条件覆盖 的区别"></a>判定覆盖 与 条件覆盖 的区别</h3><p> 判定覆盖只关心判定表达式的值（真/假），而条件覆盖涉及到判定表达式的每个条件的值（真/假）。</p><blockquote><p>举个最简单的例子，方便理解：</p><p>  判定表达式：a&gt;1 or b&gt;1</p><p>   用判定覆盖设计的测试数据：</p><p>​     a＝5 （判定表达式的值为“真”）</p><p>​     a＝0 （判定表达式的值为“假”）</p><p>​     这里不需要管b的取值，就已经满足判定覆盖的条件了。</p><p>   用条件覆盖设计的测试数据：</p><p>​      a＝5 （条件a&gt;1的值为“真”）</p><p>​      a＝0（条件a&gt;1的值为“假”）</p><p>​      b＝5 （条件b&gt;1的值为“真”）</p><p>​     b＝0 （条件b&gt;1的值为“假”）</p><p>​     这里不考虑 a&gt;1 or b&gt;1 这个表达式的取值的情况，但必须把a&gt;1 和 b&gt;1 这两个条件的取值考虑全。</p></blockquote><h3 id="判定条件覆盖"><a href="#判定条件覆盖" class="headerlink" title="判定条件覆盖"></a>判定条件覆盖</h3><h4 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h4><p>设计足够多的测试用例，使得判定中每个条件的所有可能结果至少出现一次，每个判定本身所有可能结果也至少出现一次</p><ul><li>优点：判定/条件覆盖满足判定覆盖准则和条件覆盖准则，弥补了二者的不足。</li><li>缺点：判定/条件覆盖准则的缺点是未考虑条件的组合情况。</li></ul><p><img src="https://img.senup.cn/blog/20200413/9LFc6YXmigCu.png?imageslim" alt="mark"></p><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><p><img src="https://img.senup.cn/blog/20200413/sdpC7itQIH7J.png?imageslim" alt="mark"></p><p>由上图可知，先根据条件+判定都满足划分情况，再设计测试数据。</p><h4 id="局限性-3"><a href="#局限性-3" class="headerlink" title="局限性"></a>局限性</h4><p><img src="https://img.senup.cn/blog/20200413/ybm37SMFp4yY.png?imageslim" alt></p><h3 id="条件组合覆盖"><a href="#条件组合覆盖" class="headerlink" title="条件组合覆盖"></a>条件组合覆盖</h3><h4 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h4><p>要求设计足够多的测试用例，使得每个判定中条件结果的所有可能组合至少出现一次。</p><ul><li>优点：多重条件覆盖准则满足判定覆盖、条件覆盖和判定/条件覆盖准则。更改的判定/条件覆盖要求设计足够多的测试用例，使得判定中每个条件的所有可能结果至少出现一次，每个判定本身的所有可能结果也至少出现一次。并且每个条件都显示能单独影响判定结果。</li><li>缺点：线性地增加了测试用例的数量。</li></ul><p><img src="https://img.senup.cn/blog/20200413/n436fhheh0vT.png?imageslim" alt="mark"></p><h4 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h4><p><img src="https://img.senup.cn/blog/20200413/PH925rlLGqoV.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200413/Rn1qfiSlaCex.png?imageslim" alt="mark"></p><p>由上图红框可知，判定1里面有C1&amp;&amp;C2两个条件，组合有2*2=4种情况，C3有两种情况，针对C3这一列前两行满足C3的条件，后两行其实无所谓。</p><p>条件组合，字面意思是穷举各条件的组合，再设计测试用例。</p><h4 id="局限性-4"><a href="#局限性-4" class="headerlink" title="局限性"></a>局限性</h4><p><img src="https://img.senup.cn/blog/20200413/BY0nM6cd1tNc.png?imageslim" alt="mark"></p><h3 id="路径覆盖"><a href="#路径覆盖" class="headerlink" title="路径覆盖"></a>路径覆盖</h3><h4 id="概念-5"><a href="#概念-5" class="headerlink" title="概念"></a>概念</h4><p>设计足够的测试用例，覆盖程序中所有可能的路径。</p><ul><li><p>优点：这种测试方法可以对程序进行彻底的测试，比前面五种的覆盖面都广。</p></li><li><p>缺点：由于路径覆盖需要对所有可能的路径进行测试（包括循环、条件组合、分支选择等），那么需要设计大量、复杂的测试用例，使得工作量呈指数级增长。而在有些情况下，一些执行路径是不可能被执行的，如：<br>　　If （!A）B++；<br>　　If （!A）D–；</p><p>　　这两个语句实际只包括了2条执行路径，即A为真或假时候对B和D的处理，真或假不可能都存在，而路径覆盖测试则认为是包含了真与假的4条执行路径。这样不仅降低了测试效率，而且大量的测试结果的累积，也为排错带来麻烦。</p></li></ul><p><img src="https://img.senup.cn/blog/20200413/jCPNVS4TFn2w.png?imageslim" alt="mark"></p><h4 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h4><p>穷举出各条路径，再设计测试数据。</p><p><img src="https://img.senup.cn/blog/20200413/8uebXk40TmgL.png?imageslim" alt="mark"></p><h4 id="局限性-5"><a href="#局限性-5" class="headerlink" title="局限性"></a>局限性</h4><p>下图中，各路径都满足了，但是C2这一列不满足条件覆盖。</p><p><img src="https://img.senup.cn/blog/20200413/E0ah1zcgetFb.png?imageslim" alt="mark"></p><p>路径覆盖遇到循环，则工作量变得巨大，人力成本巨大。</p><p><img src="https://img.senup.cn/blog/20200413/VGruYCfOL6we.png?imageslim" alt="mark"></p><p>于是有了以下的方法。</p><h3 id="基本路径测试法"><a href="#基本路径测试法" class="headerlink" title="基本路径测试法"></a>基本路径测试法</h3><p><img src="https://img.senup.cn/blog/20200413/uc89FngxdHTJ.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200413/TbDr1qCJOTpB.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200413/oWfnoxHlaUtt.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200413/B9KbqSk5b7m3.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200413/k4cWCECb2va5.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200413/hyh3k1KtBdXv.png?imageslim" alt="mark"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>白盒测试是一种被广泛使用的逻辑测试方法，是由程序内部逻辑驱动的一种单元测试方法。只有对程序内部十分了解才能进行适度有效的白盒测试。但是贯穿在程序内部的逻辑存在着不确定性和无穷性，尤其对于大规模复杂软件。因此我们不能穷举所有的逻辑路径，即使穷举也未必会带来好运（穷举不能查出程序逻辑规则错误，不能查出数据相关错误，不能查出程序遗漏的路径）。</p><p>　　那么正确使用白盒测试，就要先从代码分析入手，根据不同的代码逻辑规则、语句执行情况，选用适合的覆盖方法。任何一个高效的测试用例，都是针对具体测试场景的。逻辑测试不是片面的测试正确的结果或是测试错误的结果，而是尽可能全面地覆盖每一个逻辑路径。</p><p><img src="https://img.senup.cn/blog/20200413/21WWCK3IGO3O.png?imageslim" alt="mark"></p><h3 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h3><p>教程出自<a href="http://yun.itheima.com/course/620.html" target="_blank" rel="noopener">http://yun.itheima.com/course/620.html</a> </p><p>课程亮点 ：</p><p>1、多种白盒测试用例方法的学习，让用例设计更加全面。</p><p> 2、每种白盒测试用例丰富的局限性说明，更好的理解应用每种方法。 </p><p>3、多角度的案例实践，深入掌握每种设计方法。</p><iframe src="//player.bilibili.com/player.html?aid=80843726&bvid=BV1XJ411Y7UJ&cid=138365773&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-butter-fly</title>
      <link href="p/5f72.html"/>
      <url>p/5f72.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>六弦到一弦DADF#AD，标准调弦为EADGBE，简单来讲，就是 一二六弦降全音，三弦降半音。演示：</p><iframe src="//player.bilibili.com/player.html?aid=4331458&bvid=BV1Bs411z7wc&cid=7007793&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><a id="more"></a><iframe src="//player.bilibili.com/player.html?aid=29021970&bvid=BV1us411u7ei&cid=50343596&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h1 id="butterfly"><a href="#butterfly" class="headerlink" title="butterfly"></a><a href="https://pdf.senup.cn/Butterfly.pdf" target="_blank" rel="noopener">butterfly</a></h1><object data="https://pdf.senup.cn/Butterfly.pdf" type="application/pdf" width="100%" height="877px"></object>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-人类的光</title>
      <link href="p/633c.html"/>
      <url>p/633c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>不需要特殊调弦，附谱。</p><iframe src="//player.bilibili.com/player.html?aid=71529359&bvid=BV1fE411C7jF&cid=123948223&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><a id="more"></a><p><img src="https://img.senup.cn/blog/20200409/clhpcbsSBbkn.png?imageslim" alt="1"></p><p><img src="https://img.senup.cn/blog/20200409/kXOYkpvVCRyh.png?imageslim" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何解决编程中遇到的问题？</title>
      <link href="p/1e68.html"/>
      <url>p/1e68.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在使用mybatis-plus的开发过程中，遇到分页数量不正确的问题，获取的pages和total的数据是实际情况的两倍，初步猜测是嵌套查询分页的时候插件查询了两次。那么怎么能快速解决问题呢？首先，国内搜索引擎大部分是复制粘贴，很难查询到有帮助的答案，兜兜转转最后只是浪费了很多时间，所以要挂梯子上谷歌，能够检索更大范围；其次，遇到技术问题，优先查看官方文档。就比如这里遇到的是baomidou开源插件的分页问题，最后是查看github上issue的答案而解决的。遇到问题追根溯源，源头的地方大概率会遇到跟你一样的问题，正所谓，不要重复造轮子，要善用轮子。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不抱怨的世界</title>
      <link href="p/6132.html"/>
      <url>p/6132.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>“为什么会抱怨？抱怨有什么用？”</p><p>在一次小组讨论中，由于过于紧张项目进度，给其他成员施压，导致气氛过于胶着。林哥表示：“不要抱怨”。这个时候才意识到自己情绪可能有点失控。在其他人不愿参与讨论与项目逐步进行的矛盾里面，私心是会苦闷的。后来细想，其实项目分工这种事情潜规则下是分不了工的，只能由某些人完成，因为绝大数人是不懂如何分工的，花费时间分配工作不如一个人默认主动地把项目完成来的效率高。所以，造成这样的局面是个人的错，没必要，没必要发脾气。有一次，在家里看到双亲是随意抱怨的时候，我又想起这个问题：原生家庭对孩子的影响。不可否认，影响肯定是存在的。平时不注意间控制，耳濡目染必然沾染不良的癖习，而这又不知觉影响着生活。抱怨有什么用？是因为事才抱怨么？不对。从心理学上讲是通过抱怨来达到某种手段，即为了让别人听从自己才采取抱怨的手段。所以，可能潜意识里是想通过抱怨让其他成员采取更积极的态度，但是事与愿违了呢。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-起风了</title>
      <link href="p/35e0.html"/>
      <url>p/35e0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>这一路上走走停停<br>顺着少年漂流的痕迹<br>迈出车站的前一刻<br>竟有些犹豫<br>不禁笑这近乡情怯<br>仍无可避免<br>而长野的天 依旧这么暖<br>风吹起了从前</p>            <i class="fa fa-quote-right"></i>          </blockquote><a id="more"></a><p><img src="https://img.senup.cn/blog/20200418/8oFyLmv5YXPK.png?imageslim" alt="起风了1"><br><img src="https://img.senup.cn/blog/20200418/kxC12XpGqG3f.png?imageslim" alt="起风了2"><br><img src="https://img.senup.cn/blog/20200418/24PteooR1Ers.png?imageslim" alt="起风了3"></p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高把位和弦推算</title>
      <link href="p/a0c8.html"/>
      <url>p/a0c8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>对于封闭和弦，高把位和弦可以根据全音半音的关系推算出来。</p><p><img src="https://img.senup.cn/blog/20200413/ovFz8aXIByKm.png?imageslim" alt></p><a id="more"></a><p>全音和半音的关系</p><p>简单点来说就是除了BC和EF是半音的关系，其他都是间隔一个全音。</p><p><img src="https://img.senup.cn/blog/20200413/nRDGcaSr5DwO.png?imageslim" alt></p><p>从图上看E和弦其实和F和弦其实超级像，除了E和弦少了食指的大横按。那么根据E、F之间是半音的关系，整体下移一格即可得到F和弦。以此类推，F和弦下移两格，相差一个全音，那么可以得到G和弦…</p><p><img src="https://img.senup.cn/blog/20200413/Wy3KtKcYCYJW.png?imageslim" alt></p><p><img src="https://img.senup.cn/blog/20200413/QR0swnbbPW9P.png?imageslim" alt></p><p>除此之外，还有A、Am、A7推算出来的高把位和弦较常用。</p><p><img src="https://img.senup.cn/blog/20200413/awuEuf7p2fi6.png?imageslim" alt></p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自然卷自救历程</title>
      <link href="p/ba27.html"/>
      <url>p/ba27.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>自然卷卷的并不自然。</p><p>自然卷并不像人工卷出来的卷发那么好看，甚至是难看，这种难看也就伴随了自己二十多年。以前觉得无所谓，毕竟自己是看不到自己的头发的，除非照镜子。最近觉得过于邋遢也不好，遂开始想想怎么调理。得出的结论就是：自然卷在头发潮湿度过高的时候卷发的弯曲度更大，更容易卷的让自己像头疯狗一样…所以，办法就是洗完头之后，用干毛巾轻轻压在头发上尽可能吸收水分，然后使用负离子/水离子吹风机，冷风大风，顺着一边吹过去，一缕一缕吹干，顺便把头皮也吹干，这样的话看起来头发不塌，整体感觉会好很多。然而，发质差表现出来的粗、硬、无光泽似乎还是存在。跟阿铭说起这个，意外发现高中时候我们差不多的头发，现在他的发质好了很多。据他说是用了日本进口的洗发水（reveur紫+护发素），看起来也不贵，一百多出头，改天可以试试。顺带一提，自己用的是韩国进口的BALLVIC ,居然要一千多，之前植发医院的医生说养护效果很好，实际上还行吧，除了头屑少了很多以及掉发少了，发质还是那个发质…花了很多钱感觉自己像个憨憨。总之，既然已经是自然卷了，那就要接受这个事实，要花比常人多点心思保养好头发。（预感到自己以后可能会有个卷发宝宝…竟不知道要用什么表情应对..囧？</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis从入门到摔门-持久化的取舍和选择</title>
      <link href="p/1c0e.html"/>
      <url>p/1c0e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>持久化的作用</li><li>RDB</li><li>AOF</li><li>RDB和AOF的抉择</li></ul><a id="more"></a><h1 id="持久化的作用"><a href="#持久化的作用" class="headerlink" title="持久化的作用"></a>持久化的作用</h1><h2 id="持久化是什么？"><a href="#持久化是什么？" class="headerlink" title="持久化是什么？"></a>持久化是什么？</h2><p>redis所有数据保存在内存中，将数据的更新异步保存在磁盘上。</p><h2 id="持久化的实现方式"><a href="#持久化的实现方式" class="headerlink" title="持久化的实现方式"></a>持久化的实现方式</h2><ul><li>快照</li><li>写日志</li></ul><p><img src="https://img.senup.cn/blog/20200506/Cq6DMKYGvMx7.png?imageslim" alt="mark"></p><h1 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h1><h2 id="什么是RDB"><a href="#什么是RDB" class="headerlink" title="什么是RDB"></a>什么是RDB</h2><p>快照，用于数据备份恢复。</p><p>复制媒介</p><p><img src="https://img.senup.cn/blog/20200506/rwSHy074ljMB.png?imageslim" alt="mark"></p><h2 id="触发机制-不容忽略方式"><a href="#触发机制-不容忽略方式" class="headerlink" title="触发机制-不容忽略方式"></a>触发机制-不容忽略方式</h2><ol><li>全量复制</li><li>debug reload</li><li>shutdown</li></ol><h2 id="触发机制-主要三种方式"><a href="#触发机制-主要三种方式" class="headerlink" title="触发机制-主要三种方式"></a>触发机制-主要三种方式</h2><p><img src="https://img.senup.cn/blog/20200506/S6UqN9yWiFpc.png?imageslim" alt="mark"></p><h3 id="save命令"><a href="#save命令" class="headerlink" title="save命令"></a>save命令</h3><p><img src="https://img.senup.cn/blog/20200506/rxsuKkdHYNKE.png?imageslim" alt="mark"></p><p>数据量大时造成阻塞</p><p><img src="https://img.senup.cn/blog/20200506/srrJxNJnGW4y.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200506/BaVdPL9fTowy.png?imageslim" alt="mark"></p><h3 id="bgsave命令"><a href="#bgsave命令" class="headerlink" title="bgsave命令"></a>bgsave命令</h3><p><img src="https://img.senup.cn/blog/20200506/Gu4n0ccdowVp.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200506/wNnlIbU7DcM5.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200506/wINDu1djsUo0.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200506/di0UAqN1O2qJ.png?imageslim" alt="mark"></p><h3 id="自动"><a href="#自动" class="headerlink" title="自动"></a>自动</h3><p>比如300秒内改变10条数据触发自动生成RDB</p><p><img src="https://img.senup.cn/blog/20200506/c30PrhvnbyPM.png?imageslim" alt="mark"></p><h3 id="配置文件（默认）"><a href="#配置文件（默认）" class="headerlink" title="配置文件（默认）"></a>配置文件（默认）</h3><p><img src="https://img.senup.cn/blog/20200506/ARVzLLrbnion.png?imageslim" alt="mark"></p><h3 id="最佳配置"><a href="#最佳配置" class="headerlink" title="最佳配置"></a>最佳配置</h3><p><img src="https://img.senup.cn/blog/20200506/CsuLzbvmcF5W.png?imageslim" alt="mark"></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p><img src="https://img.senup.cn/blog/20200506/UPeAcnUS5QDs.png?imageslim" alt="mark"></p><ul><li>非阻塞</li><li>子进程</li><li>文件策略</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://img.senup.cn/blog/20200506/N4N0Wn7IkSsX.png?imageslim" alt="mark"></p><h1 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h1><h2 id="RDB现存问题"><a href="#RDB现存问题" class="headerlink" title="RDB现存问题"></a>RDB现存问题</h2><ol><li>耗时 耗性能</li><li>不可控、丢失数据</li></ol><p><img src="https://img.senup.cn/blog/20200506/EKpKO328ITcE.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200506/7XELv6vWODoh.png?imageslim" alt="mark"></p><h2 id="什么是AOF"><a href="#什么是AOF" class="headerlink" title="什么是AOF"></a>什么是AOF</h2><p><img src="https://img.senup.cn/blog/20200506/PucqUeURdmt7.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200506/MPNNasSXcxwa.png?imageslim" alt="mark"></p><h2 id="AOF三种策略"><a href="#AOF三种策略" class="headerlink" title="AOF三种策略"></a>AOF三种策略</h2><h3 id="always"><a href="#always" class="headerlink" title="always"></a>always</h3><p><img src="https://img.senup.cn/blog/20200506/EbFSJcGdCTvH.png?imageslim" alt="mark"></p><h3 id="everysec"><a href="#everysec" class="headerlink" title="everysec"></a>everysec</h3><p><img src="https://img.senup.cn/blog/20200506/6XHhbbf4i8BQ.png?imageslim" alt="mark"></p><h3 id="no"><a href="#no" class="headerlink" title="no"></a>no</h3><p><img src="https://img.senup.cn/blog/20200506/EJw1S1zkv0Me.png?imageslim" alt="mark"></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><img src="https://img.senup.cn/blog/20200506/w8uJgmR7FF7N.png?imageslim" alt="mark"></p><h2 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h2><p>好处：</p><ul><li>减少硬盘占用量</li><li>加快恢复速度</li></ul><p><img src="https://img.senup.cn/blog/20200506/Gnk9nGMybseI.png?imageslim" alt="mark"></p><h2 id="AOF重写的两种方式"><a href="#AOF重写的两种方式" class="headerlink" title="AOF重写的两种方式"></a>AOF重写的两种方式</h2><h3 id="bgrewriteaof命令"><a href="#bgrewriteaof命令" class="headerlink" title="bgrewriteaof命令"></a>bgrewriteaof命令</h3><p><img src="https://img.senup.cn/blog/20200506/krPVT4jT4XlA.png?imageslim" alt="mark"></p><h3 id="AOF重写配置"><a href="#AOF重写配置" class="headerlink" title="AOF重写配置"></a>AOF重写配置</h3><p><img src="https://img.senup.cn/blog/20200506/qI7d8esLSVES.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200506/FwSxYt76HdWb.png?imageslim" alt="mark"></p><h3 id="AOF重写流程"><a href="#AOF重写流程" class="headerlink" title="AOF重写流程"></a>AOF重写流程</h3><p><img src="https://img.senup.cn/blog/20200506/jpOzbp6mYoTG.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200506/f7cEMRwCbRNz.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200506/D2W3zloIPVir.png?imageslim" alt="mark"></p><h1 id="持久化的取舍和选择"><a href="#持久化的取舍和选择" class="headerlink" title="持久化的取舍和选择"></a>持久化的取舍和选择</h1><h2 id="RDB-VS-AOF"><a href="#RDB-VS-AOF" class="headerlink" title="RDB VS AOF"></a>RDB VS AOF</h2><p><img src="https://img.senup.cn/blog/20200506/G18IeiiWXYAQ.png?imageslim" alt="mark"></p><h2 id="RDB最佳策略"><a href="#RDB最佳策略" class="headerlink" title="RDB最佳策略"></a>RDB最佳策略</h2><ul><li>建议“关”</li><li>集中管理</li><li>主从，从开？</li></ul><h2 id="AOF最佳策略"><a href="#AOF最佳策略" class="headerlink" title="AOF最佳策略"></a>AOF最佳策略</h2><ul><li>“开”：缓存和存储</li><li>AOF重写集中管理</li><li>everysec</li></ul><h2 id="最佳策略"><a href="#最佳策略" class="headerlink" title="最佳策略"></a>最佳策略</h2><ul><li>小分片</li><li>缓存或者存储</li><li>监控（硬盘、内存、负载、网络）</li><li>足够的内存</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis从入门到摔门-其他功能</title>
      <link href="p/987b.html"/>
      <url>p/987b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img.senup.cn/blog/20200429/tgCp1W8u1sfx.png?imageslim" alt="mark"></p><a id="more"></a><h1 id="Jedis（java客户端）"><a href="#Jedis（java客户端）" class="headerlink" title="Jedis（java客户端）"></a>Jedis（java客户端）</h1><p><img src="https://img.senup.cn/blog/20200429/c2vlKYd9hrmW.png?imageslim" alt="mark"></p><h2 id="获取jedis"><a href="#获取jedis" class="headerlink" title="获取jedis"></a>获取jedis</h2><p><img src="https://img.senup.cn/blog/20200429/OmiXKRGEQUz7.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/VKeyXyH0CSo4.png?imageslim" alt="mark"></p><h2 id="jedis基本使用"><a href="#jedis基本使用" class="headerlink" title="jedis基本使用"></a>jedis基本使用</h2><p><img src="https://img.senup.cn/blog/20200429/aKCVJ8Vl4Xxz.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/R0niivep8HUp.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/DruIebmIeVz5.png?imageslim" alt="mark"></p><h2 id="jedis连接池使用"><a href="#jedis连接池使用" class="headerlink" title="jedis连接池使用"></a>jedis连接池使用</h2><h3 id="jedis直连"><a href="#jedis直连" class="headerlink" title="jedis直连"></a>jedis直连</h3><p><img src="https://img.senup.cn/blog/20200429/dlSWsxFbv6gj.png?imageslim" alt="mark"></p><h3 id="jedis连接池"><a href="#jedis连接池" class="headerlink" title="jedis连接池"></a>jedis连接池</h3><p><img src="https://img.senup.cn/blog/20200429/SJL1Wkt9eSyB.png?imageslim" alt="mark"></p><h3 id="方案对比"><a href="#方案对比" class="headerlink" title="方案对比"></a>方案对比</h3><p><img src="https://img.senup.cn/blog/20200429/i0VW8zlFARPo.png?imageslim" alt="mark"></p><h3 id="jedisPool使用"><a href="#jedisPool使用" class="headerlink" title="jedisPool使用"></a>jedisPool使用</h3><p><img src="https://img.senup.cn/blog/20200429/37GTjJsa3ky2.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/EjcBUgDpNUMB.png?imageslim" alt="mark"></p><h1 id="慢查询：记录命令"><a href="#慢查询：记录命令" class="headerlink" title="慢查询：记录命令"></a>慢查询：记录命令</h1><p>许多存储系统（例如MySQL）提供慢查询日志帮助开发和运维人员定位系统存在的慢操作。</p><p>所谓<strong>慢查询日志就是系统在命令执行前后计算每条命令的执行时间，当超过预设阈值，</strong></p><p><strong>就将这条命令的相关信息（例如：发生时间、耗时、命令的详细信息）记录下来</strong>，Redis也提供了类似的功能。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="https://img.senup.cn/blog/20200429/shiSUGR5Inll.png?imageslim" alt="mark"></p><h2 id="两个配置"><a href="#两个配置" class="headerlink" title="两个配置"></a>两个配置</h2><h3 id="slowlog-max-len"><a href="#slowlog-max-len" class="headerlink" title="slowlog-max-len"></a>slowlog-max-len</h3><ol><li>慢查询是一个先进先出的队列</li><li>队列长度固定</li><li>保存在内存中，也就是重启即消失</li></ol><p>从下图可以看出，超过10毫秒就将它加入慢查询队列中</p><p><img src="https://img.senup.cn/blog/20200429/sviucP4ic1NV.png?imageslim" alt="mark"></p><h3 id="slowlog-log-slower-than"><a href="#slowlog-log-slower-than" class="headerlink" title="slowlog-log-slower-than"></a>slowlog-log-slower-than</h3><ol><li>慢查询阈值（单位：微秒）</li><li><code>slowlog-log-slower-than=0</code> 设置为0记录所有命令</li><li><code>slowlog-log-slower-than&lt;0</code> 设置为小于0，不记录所有命令</li></ol><h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><ol><li>默认值</li></ol><p><code>config get slowlog-max-len = 128</code></p><p><code>config get slowlog-log-slower-than = 10000</code></p><ol start="2"><li><p>修改配置文件重启</p></li><li><p>动态配置</p></li></ol><p><code>config set slowlog-max-len 1000</code></p><p><code>config set slowlog-log-slower-than 10000</code></p><h3 id="三个命令"><a href="#三个命令" class="headerlink" title="三个命令"></a>三个命令</h3><ol><li><code>slowlog get [n]</code> : 获取慢查询队列</li><li><code>slowlog len</code>: 获取慢查询队列长度</li><li><code>slowlog reset</code>: 清空慢查询队列</li></ol><h3 id="运维经验"><a href="#运维经验" class="headerlink" title="运维经验"></a>运维经验</h3><ol><li><code>slowlog-max-len</code>不要设置过大，默认10ms,通常设置1ms。因为实战中大概处在1ms左右，设置过大不会触发慢查询；</li><li><code>slowlog-log-slower-than</code> 不要设置过小，通常设置在1000左右；</li><li>理解命令生命周期，通过各种因素分析可能出现的超时的原因。</li><li>定期持久化慢查询。因为慢查询在内存中，可以定期持久化到mysql中，可以查到慢查询的历史操作，查看关键数据。</li></ol><h1 id="Pipeline：提高客户端效率"><a href="#Pipeline：提高客户端效率" class="headerlink" title="Pipeline：提高客户端效率"></a>Pipeline：提高客户端效率</h1><h2 id="什么是流水线"><a href="#什么是流水线" class="headerlink" title="什么是流水线"></a>什么是流水线</h2><h3 id="1次网络命令通信模型"><a href="#1次网络命令通信模型" class="headerlink" title="1次网络命令通信模型"></a>1次网络命令通信模型</h3><p><img src="https://img.senup.cn/blog/20200429/oWgSR6L4Yvj4.png?imageslim" alt="mark"></p><p>如果有多条命令？</p><h3 id="批量网络命令通信模型"><a href="#批量网络命令通信模型" class="headerlink" title="批量网络命令通信模型"></a>批量网络命令通信模型</h3><p><img src="https://img.senup.cn/blog/20200429/fPVtbNLjIr85.png?imageslim" alt="mark"></p><p>其中，命令时间非常快。</p><h3 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h3><p><img src="https://img.senup.cn/blog/20200429/zIFAgw0NFT8Q.png?imageslim" alt="mark"></p><h3 id="流水线的作用"><a href="#流水线的作用" class="headerlink" title="流水线的作用"></a>流水线的作用</h3><p><img src="https://img.senup.cn/blog/20200429/a1Mn4gp57Qiu.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/pnogY0wqxlXD.png?imageslim" alt="mark"></p><p>在redis中执行一条命令可能只要几微秒，但是网络传输的话需要13毫秒。</p><h2 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h2><p><img src="https://img.senup.cn/blog/20200429/yyTkyJTfIRMX.png?imageslim" alt="mark"></p><h3 id="没有pipeline的情况下"><a href="#没有pipeline的情况下" class="headerlink" title="没有pipeline的情况下"></a>没有pipeline的情况下</h3><p><img src="https://img.senup.cn/blog/20200429/Ht6olxPUqNLu.png?imageslim" alt="mark"></p><h3 id="使用pipeline的情况下"><a href="#使用pipeline的情况下" class="headerlink" title="使用pipeline的情况下"></a>使用pipeline的情况下</h3><p><img src="https://img.senup.cn/blog/20200429/hLB9R73hHRx5.png?imageslim" alt="mark"></p><h2 id="与原生操作对比"><a href="#与原生操作对比" class="headerlink" title="与原生操作对比"></a>与原生操作对比</h2><h3 id="原生操作"><a href="#原生操作" class="headerlink" title="原生操作"></a>原生操作</h3><p><img src="https://img.senup.cn/blog/20200429/VvSRA6G4BWr1.png?imageslim" alt="mark"></p><h3 id="pipeline-操作拆分"><a href="#pipeline-操作拆分" class="headerlink" title="pipeline:操作拆分"></a>pipeline:操作拆分</h3><p><img src="https://img.senup.cn/blog/20200429/D45rrq6PX5qV.png?imageslim" alt="mark"></p><h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><ol><li>注意每次pipeline携带的数据量</li><li>pipeline每次只能作用在一个redis节点上</li><li>M操作与pipeline的区别：整体传输与拆分传输</li></ol><h1 id="发布订阅：实战功能"><a href="#发布订阅：实战功能" class="headerlink" title="发布订阅：实战功能"></a>发布订阅：实战功能</h1><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>publisher 发布者</li><li>channel 频道</li><li>subscriber 订阅者</li></ol><p>类似生产者消费者模型</p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p><img src="https://img.senup.cn/blog/20200429/OvhFjDLzwvJJ.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/IMiNV5aBhhka.png?imageslim" alt="mark"></p><h3 id="多个订阅"><a href="#多个订阅" class="headerlink" title="多个订阅"></a>多个订阅</h3><p><img src="https://img.senup.cn/blog/20200429/g5BiyECvFIM7.png?imageslim" alt="mark"></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ol><li>publish</li><li>subscribe</li><li>unsubscribe</li><li>other…</li></ol><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p><img src="https://img.senup.cn/blog/20200429/igNex8NhMAvq.png?imageslim" alt="mark"></p><h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><p><img src="https://img.senup.cn/blog/20200429/dmwfyd1nf7PV.png?imageslim" alt="mark"></p><h3 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h3><p><img src="https://img.senup.cn/blog/20200429/19MOUzFqRPQ1.png?imageslim" alt="mark"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><img src="https://img.senup.cn/blog/20200429/0wBtUXGTHNME.png?imageslim" alt="mark"></p><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p><img src="https://img.senup.cn/blog/20200429/gAI3XVRPEIuf.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/mWDfXvylksmL.png?imageslim" alt="mark"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>发布订阅模式的角色</li><li>重要的API</li><li>消息队列和发布订阅</li></ol><h1 id="Bitmap-内存方案"><a href="#Bitmap-内存方案" class="headerlink" title="Bitmap: 内存方案"></a>Bitmap: 内存方案</h1><h2 id="位图是什么？"><a href="#位图是什么？" class="headerlink" title="位图是什么？"></a>位图是什么？</h2><p><img src="https://img.senup.cn/blog/20200429/TLv844PgGW6n.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/DTAhDFCBGJuk.png?imageslim" alt="mark"></p><p>redis可以直接操纵位。</p><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><h3 id="setbit"><a href="#setbit" class="headerlink" title="setbit"></a>setbit</h3><p><img src="https://img.senup.cn/blog/20200429/UcQtsgMPRCI9.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/3BwlgJ7NOOyM.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/aiFxgO7FySHz.png?imageslim" alt="mark"></p><h3 id="getbit"><a href="#getbit" class="headerlink" title="getbit"></a>getbit</h3><p><img src="https://img.senup.cn/blog/20200429/L45gPKGabeKO.png?imageslim" alt="mark"></p><h3 id="bitcount"><a href="#bitcount" class="headerlink" title="bitcount"></a>bitcount</h3><p><img src="https://img.senup.cn/blog/20200429/i4UgN0UMEUQ3.png?imageslim" alt="mark"></p><h3 id="bitop"><a href="#bitop" class="headerlink" title="bitop"></a>bitop</h3><p><img src="https://img.senup.cn/blog/20200429/HD1Yi64GMJ9i.png?imageslim" alt="mark"></p><h3 id="bitpos"><a href="#bitpos" class="headerlink" title="bitpos"></a>bitpos</h3><p><img src="https://img.senup.cn/blog/20200429/rgiD7A3rqbo2.png?imageslim" alt="mark"></p><h2 id="实战：独立用户统计"><a href="#实战：独立用户统计" class="headerlink" title="实战：独立用户统计"></a>实战：独立用户统计</h2><p>网站有1亿用户，每天有5000万独立访问</p><p><img src="https://img.senup.cn/blog/20200429/S866PhpBKPUN.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/QhLixJlXPOlw.png?imageslim" alt="mark"></p><h2 id="使用经验"><a href="#使用经验" class="headerlink" title="使用经验"></a>使用经验</h2><ol><li><p>位图的类型为string,最大为512mb;数据过大可以进行拆分</p></li><li><p>注意setbit时的偏移量，可能有较大耗时</p></li><li><p>位图是单线程模型，不是绝对好</p></li></ol><h1 id="HyperLogLog：极端节省内存的方案"><a href="#HyperLogLog：极端节省内存的方案" class="headerlink" title="HyperLogLog：极端节省内存的方案"></a>HyperLogLog：极端节省内存的方案</h1><h2 id="新的数据结构？"><a href="#新的数据结构？" class="headerlink" title="新的数据结构？"></a>新的数据结构？</h2><ol><li>基于HyperLogLog算法：极小空间完成独立数据统计。</li><li>本质还是字符串。</li></ol><h2 id="内存消耗（百万独立用户）"><a href="#内存消耗（百万独立用户）" class="headerlink" title="内存消耗（百万独立用户）"></a>内存消耗（百万独立用户）</h2><p>内存消耗非常小</p><p><img src="https://img.senup.cn/blog/20200429/AEJLEsiVHy1U.png?imageslim" alt="mark"></p><h2 id="三个命令-1"><a href="#三个命令-1" class="headerlink" title="三个命令"></a>三个命令</h2><p><img src="https://img.senup.cn/blog/20200429/aX7M4jOco0pk.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/dqJOGQTlQFn6.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/ek1fzzpSrUYk.png?imageslim" alt="mark"></p><h2 id="使用经验-1"><a href="#使用经验-1" class="headerlink" title="使用经验"></a>使用经验</h2><p><img src="https://img.senup.cn/blog/20200429/h05Y06cuB7It.png?imageslim" alt="mark"></p><h1 id="GEO-定位功能"><a href="#GEO-定位功能" class="headerlink" title="GEO: 定位功能"></a>GEO: 定位功能</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p><img src="https://img.senup.cn/blog/20200429/pBoUM1H1MM43.png?imageslim" alt="mark"></p><p>应用：微信摇一摇</p><h2 id="5个城市经纬度"><a href="#5个城市经纬度" class="headerlink" title="5个城市经纬度"></a>5个城市经纬度</h2><p><img src="https://img.senup.cn/blog/20200429/q4eV7ulogpie.png?imageslim" alt="mark"></p><h2 id="相关命令-1"><a href="#相关命令-1" class="headerlink" title="相关命令"></a>相关命令</h2><h3 id="geoadd"><a href="#geoadd" class="headerlink" title="geoadd"></a>geoadd</h3><p><img src="https://img.senup.cn/blog/20200429/JikkzKL4phRd.png?imageslim" alt="mark"></p><h3 id="geopos"><a href="#geopos" class="headerlink" title="geopos"></a>geopos</h3><p><img src="https://img.senup.cn/blog/20200429/F4iOIoNz6cSw.png?imageslim" alt="mark"></p><h3 id="geodist"><a href="#geodist" class="headerlink" title="geodist"></a>geodist</h3><p><img src="https://img.senup.cn/blog/20200429/ILfz6o7fFDgf.png?imageslim" alt="mark"></p><h3 id="georadius"><a href="#georadius" class="headerlink" title="georadius"></a>georadius</h3><p><img src="https://img.senup.cn/blog/20200429/YxMmvhBvD1nP.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/1hOgMmb056PJ.png?imageslim" alt="mark"></p><h2 id="相关说明"><a href="#相关说明" class="headerlink" title="相关说明"></a>相关说明</h2><p><img src="https://img.senup.cn/blog/20200429/6Wma8D3TltPz.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis从入门到摔门-API的理解和使用</title>
      <link href="p/57f1.html"/>
      <url>p/57f1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通用命令</p><ol><li>keys</li><li>dbsize</li><li>exists key</li><li>del key [key…]</li><li>type key</li></ol><a id="more"></a><h2 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h2><p><img src="https://img.senup.cn/blog/20200428/tek8qyxPvIjB.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/q1nfSah0NfGv.png?imageslim" alt="mark"></p><p>注意：keys命令一般不在生产环境使用</p><p>因为生产环境数据大，redis单线程，基于安全性与速度考量，不再使用。</p><p>keys* 怎么用？</p><ul><li>热备从节点</li><li>scan</li></ul><h2 id="desize"><a href="#desize" class="headerlink" title="desize"></a>desize</h2><p><img src="https://img.senup.cn/blog/20200428/aQC4lIhjWQ6L.png?imageslim" alt="mark"></p><h2 id="exists-key"><a href="#exists-key" class="headerlink" title="exists key"></a>exists key</h2><p><img src="https://img.senup.cn/blog/20200428/7FFW4GspRcxH.png?imageslim" alt="mark"></p><h2 id="del-key"><a href="#del-key" class="headerlink" title="del key"></a>del key</h2><p><img src="https://img.senup.cn/blog/20200428/7yQlpSBPNYKV.png?imageslim" alt="mark"></p><h2 id="expire-ttl-persist"><a href="#expire-ttl-persist" class="headerlink" title="expire ttl persist"></a>expire ttl persist</h2><p><img src="https://img.senup.cn/blog/20200428/k2hyXpqIDWjY.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/YWbiTQfsAQI9.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/HttPqmHVaB9A.png?imageslim" alt="mark"></p><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p><img src="https://img.senup.cn/blog/20200428/LvbzRMp81nlk.png?imageslim" alt="mark"></p><h2 id="时间复杂度对比"><a href="#时间复杂度对比" class="headerlink" title="时间复杂度对比"></a>时间复杂度对比</h2><p><img src="https://img.senup.cn/blog/20200428/e4FrjgPDfLBf.png?imageslim" alt="mark"></p><h1 id="数据结构和内部编码"><a href="#数据结构和内部编码" class="headerlink" title="数据结构和内部编码"></a>数据结构和内部编码</h1><p>同一种数据结构可以有不同的内部编码，比如hash使用了压缩列表ziplist</p><p><img src="https://img.senup.cn/blog/20200428/nsuFUSXOxPEK.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/Y7C84XfcvShm.png?imageslim" alt="mark"></p><h1 id="单线程架构"><a href="#单线程架构" class="headerlink" title="单线程架构"></a>单线程架构</h1><p>如图，redis使用类型单管道的单线程架构，同一时间只能有一个操作。</p><p><img src="https://img.senup.cn/blog/20200428/DYi8Aq65xcNM.png?imageslim" alt="mark"></p><h2 id="单线程为什么快？"><a href="#单线程为什么快？" class="headerlink" title="单线程为什么快？"></a>单线程为什么快？</h2><ol><li>纯内存（主要）</li><li>非阻塞IO</li><li>避免线程切换和竞态消耗</li></ol><h2 id="单线程的特点？"><a href="#单线程的特点？" class="headerlink" title="单线程的特点？"></a>单线程的特点？</h2><p><img src="https://img.senup.cn/blog/20200428/MeUoHp4QysmS.png?imageslim" alt="mark"></p><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>五种数据结构</p>            <i class="fa fa-quote-right"></i>          </blockquote><h1 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h1><p>虽说是字符串，但是有多种类型，比如字符串、整形、字节、对象等</p><p><img src="https://img.senup.cn/blog/20200428/6wl9QSULQvpO.png?imageslim" alt="mark"></p><p>字符串的限制：不能大于512MB</p><h2 id="get-set-del"><a href="#get-set-del" class="headerlink" title="get set del"></a>get set del</h2><p><img src="https://img.senup.cn/blog/20200428/TBUi5fVJipQw.png?imageslim" alt="mark"></p><h2 id="incr-decr-incrby-decrby"><a href="#incr-decr-incrby-decrby" class="headerlink" title="incr decr incrby decrby"></a>incr decr incrby decrby</h2><p><img src="https://img.senup.cn/blog/20200428/HCn17k3CYL6M.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/KMK2CtK23qXD.png?imageslim" alt="mark"></p><h2 id="实战：记录网站每个用户个人主页的访问量？"><a href="#实战：记录网站每个用户个人主页的访问量？" class="headerlink" title="实战：记录网站每个用户个人主页的访问量？"></a>实战：记录网站每个用户个人主页的访问量？</h2><p>使用 <code>incr userid:pageview</code>   (单线程：无竞争)</p><p>用户id:网站，每访问一次自增</p><h2 id="实战：缓存视频的基本信息（数据源在MySQL中）"><a href="#实战：缓存视频的基本信息（数据源在MySQL中）" class="headerlink" title="实战：缓存视频的基本信息（数据源在MySQL中）"></a>实战：缓存视频的基本信息（数据源在MySQL中）</h2><p>在应用服务与数据库MySQL中增加中间层redis</p><ol><li>若在redis找不到视频信息，则访问mysql</li><li>若在redis访问到视频信息，则直接使用redis</li></ol><p><img src="https://img.senup.cn/blog/20200428/ppT2vc6qEh2w.png?imageslim" alt="mark"></p><p>伪代码：</p><p><img src="https://img.senup.cn/blog/20200428/BEWEX5gpeyLj.png?imageslim" alt="mark"></p><h2 id="实战：分布式id生成器"><a href="#实战：分布式id生成器" class="headerlink" title="实战：分布式id生成器"></a>实战：分布式id生成器</h2><p><img src="https://img.senup.cn/blog/20200428/cAcKsl5jnthf.png?imageslim" alt="mark"></p><h2 id="set-setnx-set-xx"><a href="#set-setnx-set-xx" class="headerlink" title="set setnx set-xx"></a>set setnx set-xx</h2><p><img src="https://img.senup.cn/blog/20200428/xa2yKzk4v0nY.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/ztSQ4ay1xppu.png?imageslim" alt="mark"></p><h2 id="mget-mset"><a href="#mget-mset" class="headerlink" title="mget mset"></a>mget mset</h2><p><img src="https://img.senup.cn/blog/20200428/PUvLcuIJeL68.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/dQgA8omiVG7t.png?imageslim" alt="mark"></p><h2 id="get-vs-mget"><a href="#get-vs-mget" class="headerlink" title="get vs mget"></a>get vs mget</h2><p><img src="https://img.senup.cn/blog/20200428/Yy1pgNKBQYpw.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/aFh4qHGpR2F0.png?imageslim" alt="mark"></p><h2 id="getset-append-strlen"><a href="#getset-append-strlen" class="headerlink" title="getset append strlen"></a>getset append strlen</h2><p><img src="https://img.senup.cn/blog/20200428/DpnqnpPxShOe.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/KMFxApo3rYcO.png?imageslim" alt="mark"></p><p>长度：utf-8 </p><h2 id="incrbyfloat-getrange-setrange"><a href="#incrbyfloat-getrange-setrange" class="headerlink" title="incrbyfloat getrange setrange"></a>incrbyfloat getrange setrange</h2><p><img src="https://img.senup.cn/blog/20200428/vXCX4o1w1SR7.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/ptswBVf3ACJs.png?imageslim" alt="mark"></p><h2 id="总结及时间复杂度"><a href="#总结及时间复杂度" class="headerlink" title="总结及时间复杂度"></a>总结及时间复杂度</h2><p><img src="https://img.senup.cn/blog/20200428/pdJ1OYNFTapy.png?imageslim" alt="mark"></p><h1 id="哈希类型"><a href="#哈希类型" class="headerlink" title="哈希类型"></a>哈希类型</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="https://img.senup.cn/blog/20200428/OH1l8nVgRAp3.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/1igdAOpXLVUg.png?imageslim" alt="mark"></p><h2 id="哈希特点"><a href="#哈希特点" class="headerlink" title="哈希特点"></a>哈希特点</h2><p><img src="https://img.senup.cn/blog/20200428/8lG3v7z5n8vG.png?imageslim" alt="mark"></p><h2 id="hget-hset-hdel"><a href="#hget-hset-hdel" class="headerlink" title="hget hset hdel"></a>hget hset hdel</h2><p><img src="https://img.senup.cn/blog/20200428/JXFTHLRXB88b.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/8hTew0IEk2u3.png?imageslim" alt="mark"></p><h2 id="hexists-hlen"><a href="#hexists-hlen" class="headerlink" title="hexists hlen"></a>hexists hlen</h2><p><img src="https://img.senup.cn/blog/20200428/J8hXJtWeosVw.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/ghK4zWsLKG8v.png?imageslim" alt="mark"></p><h2 id="hmget-hmset"><a href="#hmget-hmset" class="headerlink" title="hmget hmset"></a>hmget hmset</h2><p><img src="https://img.senup.cn/blog/20200428/bl0WoIqImYyb.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/AHgHCCYWPJDl.png?imageslim" alt="mark"></p><h2 id="实战：记录网站每个用户个人主页的访问量？-1"><a href="#实战：记录网站每个用户个人主页的访问量？-1" class="headerlink" title="实战：记录网站每个用户个人主页的访问量？"></a>实战：记录网站每个用户个人主页的访问量？</h2><p>思路一致，使用<code>hincrby user:1:info pageview count</code></p><h2 id="实战：缓存视频的基本信息（数据源在mysql中）"><a href="#实战：缓存视频的基本信息（数据源在mysql中）" class="headerlink" title="实战：缓存视频的基本信息（数据源在mysql中）"></a>实战：缓存视频的基本信息（数据源在mysql中）</h2><p>类似string</p><p><img src="https://img.senup.cn/blog/20200428/3XtEBmwjC5ic.png?imageslim" alt="mark"></p><h2 id="hgetall-hvals-hkeys"><a href="#hgetall-hvals-hkeys" class="headerlink" title="hgetall hvals hkeys"></a>hgetall hvals hkeys</h2><p><img src="https://img.senup.cn/blog/20200428/KdcFdK0YSOUJ.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/nCzXonMH37rg.png?imageslim" alt="mark"></p><p>单线程一次获取大批量数据需要谨慎。</p><p><img src="https://img.senup.cn/blog/20200428/CsDuyhmDrVCO.png?imageslim" alt="mark"></p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p><img src="https://img.senup.cn/blog/20200428/iUYLaohnAmrx.png?imageslim" alt="mark"></p><h2 id="实战：实现更新用户信息？"><a href="#实战：实现更新用户信息？" class="headerlink" title="实战：实现更新用户信息？"></a>实战：实现更新用户信息？</h2><p>三种方式</p><p><img src="https://img.senup.cn/blog/20200428/dozsiNSLP6BH.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/2R54RuGgVI9S.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/koWPoOMBcgtV.png?imageslim" alt="mark"></p><h2 id="三种方式对比"><a href="#三种方式对比" class="headerlink" title="三种方式对比"></a>三种方式对比</h2><p><img src="https://img.senup.cn/blog/20200428/fugznHx6qWi4.png?imageslim" alt="mark"></p><h2 id="hsetnx-hincrby-hincrbyfloat"><a href="#hsetnx-hincrby-hincrbyfloat" class="headerlink" title="hsetnx hincrby hincrbyfloat"></a>hsetnx hincrby hincrbyfloat</h2><p><img src="https://img.senup.cn/blog/20200428/j6uv16uBrWOq.png?imageslim" alt="mark"></p><h2 id="哈希总结"><a href="#哈希总结" class="headerlink" title="哈希总结"></a>哈希总结</h2><p><img src="https://img.senup.cn/blog/20200428/bQyLWTHLFWM5.png?imageslim" alt="mark"></p><h1 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h1><h2 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h2><p><img src="https://img.senup.cn/blog/20200428/4pEJJLMYcv3x.png?imageslim" alt="mark"></p><h2 id="方法一览"><a href="#方法一览" class="headerlink" title="方法一览"></a>方法一览</h2><p><img src="https://img.senup.cn/blog/20200428/hutQhj0yDY9d.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/f82Jxsj40AmY.png?imageslim" alt="mark"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>有序</li><li>可以重复</li><li>左右两边插入弹出</li></ol><h2 id="rpush"><a href="#rpush" class="headerlink" title="rpush"></a>rpush</h2><p><img src="https://img.senup.cn/blog/20200428/uY6TIbWFX6M6.png?imageslim" alt="mark"></p><h2 id="lpush"><a href="#lpush" class="headerlink" title="lpush"></a>lpush</h2><p><img src="https://img.senup.cn/blog/20200428/tR95QG8Enrz2.png?imageslim" alt="mark"></p><h2 id="linsert"><a href="#linsert" class="headerlink" title="linsert"></a>linsert</h2><p><img src="https://img.senup.cn/blog/20200428/A3v205hHupnf.png?imageslim" alt="mark"></p><h2 id="lpop"><a href="#lpop" class="headerlink" title="lpop"></a>lpop</h2><p><img src="https://img.senup.cn/blog/20200428/i2kP3y2Yfu3F.png?imageslim" alt="mark"></p><h2 id="lrem"><a href="#lrem" class="headerlink" title="lrem"></a>lrem</h2><p><img src="https://img.senup.cn/blog/20200428/ywMl2ARGACgA.png?imageslim" alt="mark"></p><h2 id="ltrim"><a href="#ltrim" class="headerlink" title="ltrim"></a>ltrim</h2><p><img src="https://img.senup.cn/blog/20200428/HxxErkgYXWco.png?imageslim" alt="mark"></p><h2 id="lrange"><a href="#lrange" class="headerlink" title="lrange"></a>lrange</h2><p><img src="https://img.senup.cn/blog/20200428/iSd56tYzT7aW.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/JOf2HMHlFSnG.png?imageslim" alt="mark"></p><h2 id="lindex"><a href="#lindex" class="headerlink" title="lindex"></a>lindex</h2><p><img src="https://img.senup.cn/blog/20200428/sJeoC7PaBQKD.png?imageslim" alt="mark"></p><h2 id="llen"><a href="#llen" class="headerlink" title="llen"></a>llen</h2><p><img src="https://img.senup.cn/blog/20200428/DBwA9T27thP0.png?imageslim" alt="mark"></p><h2 id="lset"><a href="#lset" class="headerlink" title="lset"></a>lset</h2><p><img src="https://img.senup.cn/blog/20200428/Q0dzt8XFOke3.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/uqNjdo5AOMdW.png?imageslim" alt="mark"></p><h2 id="实战-TimeLine"><a href="#实战-TimeLine" class="headerlink" title="实战-TimeLine"></a>实战-TimeLine</h2><p><img src="https://img.senup.cn/blog/20200428/fwuUCKDt69oQ.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/VAT7nrVNloGD.png?imageslim" alt="mark"></p><h2 id="blpop-brpop"><a href="#blpop-brpop" class="headerlink" title="blpop brpop"></a>blpop brpop</h2><p><img src="https://img.senup.cn/blog/20200428/jE9KaQ5G6ENe.png?imageslim" alt="mark"></p><h2 id="数据类型选型"><a href="#数据类型选型" class="headerlink" title="数据类型选型"></a>数据类型选型</h2><p><img src="https://img.senup.cn/blog/20200428/r8WIJXsuDqOR.png?imageslim" alt="mark"></p><h1 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h1><p>集合不允许插入重复元素</p><p><img src="https://img.senup.cn/blog/20200428/4wY0Dv6ahPfd.png?imageslim" alt="mark"></p><h2 id="sinter-sdiff-sunion"><a href="#sinter-sdiff-sunion" class="headerlink" title="sinter sdiff sunion"></a>sinter sdiff sunion</h2><p><img src="https://img.senup.cn/blog/20200428/Ngrfbf03Orjm.png?imageslim" alt="mark"></p><h2 id="集合的特点"><a href="#集合的特点" class="headerlink" title="集合的特点"></a>集合的特点</h2><ol><li>无序</li><li>无重复</li><li>集合间操作</li></ol><h2 id="sadd-srem"><a href="#sadd-srem" class="headerlink" title="sadd srem"></a>sadd srem</h2><p><img src="https://img.senup.cn/blog/20200428/FkDHGwRfFYTj.png?imageslim" alt="mark"></p><h2 id="scard-sismember-srandmember-smembers"><a href="#scard-sismember-srandmember-smembers" class="headerlink" title="scard sismember srandmember smembers"></a>scard sismember srandmember smembers</h2><p><img src="https://img.senup.cn/blog/20200428/IB2EPESJHzBR.png?imageslim" alt="mark"></p><h2 id="smembers"><a href="#smembers" class="headerlink" title="smembers"></a>smembers</h2><ul><li>无序</li><li>小心使用</li></ul><h2 id="srandmember-和-pop"><a href="#srandmember-和-pop" class="headerlink" title="srandmember 和 pop"></a>srandmember 和 pop</h2><ul><li>spop从集合弹出</li><li>srandmember不会破坏集合</li></ul><p><img src="https://img.senup.cn/blog/20200428/fRNAc5jbzmqF.png?imageslim" alt="mark"></p><h2 id="实战：抽奖系统"><a href="#实战：抽奖系统" class="headerlink" title="实战：抽奖系统"></a>实战：抽奖系统</h2><p><img src="https://img.senup.cn/blog/20200428/WSb7XAaU0WLV.png?imageslim" alt="mark"></p><h2 id="实战：点赞"><a href="#实战：点赞" class="headerlink" title="实战：点赞"></a>实战：点赞</h2><p><img src="https://img.senup.cn/blog/20200428/cr5pVkXJSTFk.png?imageslim" alt="mark"></p><h2 id="实战：标签"><a href="#实战：标签" class="headerlink" title="实战：标签"></a>实战：标签</h2><p><img src="https://img.senup.cn/blog/20200428/VHgPCa4sqe4U.png?imageslim" alt="mark"></p><h2 id="sdiff-sinter-sunion"><a href="#sdiff-sinter-sunion" class="headerlink" title="sdiff sinter sunion"></a>sdiff sinter sunion</h2><p><img src="https://img.senup.cn/blog/20200428/RKY9PcUrUjcE.png?imageslim" alt="mark"></p><h2 id="实现：共同关注"><a href="#实现：共同关注" class="headerlink" title="实现：共同关注"></a>实现：共同关注</h2><p><img src="https://img.senup.cn/blog/20200428/m80J3epEwYob.png?imageslim" alt="mark"></p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p><img src="https://img.senup.cn/blog/20200428/Nv8jVkfMGN4D.png?imageslim" alt="mark"></p><h1 id="有序集合类型"><a href="#有序集合类型" class="headerlink" title="有序集合类型"></a>有序集合类型</h1><h2 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h2><p><img src="https://img.senup.cn/blog/20200428/i8ILjpou4a1t.png?imageslim" alt="mark"></p><h2 id="集合-vs有序集合"><a href="#集合-vs有序集合" class="headerlink" title="集合 vs有序集合"></a>集合 vs有序集合</h2><p><img src="https://img.senup.cn/blog/20200428/bBi13fMkpI0S.png?imageslim" alt="mark"></p><h2 id="列表VS有序集合"><a href="#列表VS有序集合" class="headerlink" title="列表VS有序集合"></a>列表VS有序集合</h2><p><img src="https://img.senup.cn/blog/20200428/Bj2esEVM3KHm.png?imageslim" alt="mark"></p><h2 id="zadd"><a href="#zadd" class="headerlink" title="zadd"></a>zadd</h2><p><img src="https://img.senup.cn/blog/20200428/6Sudandx8zsL.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/w0A1z9d3w15U.png?imageslim" alt="mark"></p><h2 id="zrem"><a href="#zrem" class="headerlink" title="zrem"></a>zrem</h2><p><img src="https://img.senup.cn/blog/20200428/HxyCbaAaU9Iv.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/NLbVX0YYrvNW.png?imageslim" alt="mark"></p><h2 id="zscore"><a href="#zscore" class="headerlink" title="zscore"></a>zscore</h2><p><img src="https://img.senup.cn/blog/20200428/7o7sB3JkStAN.png?imageslim" alt="mark"></p><h2 id="zincrby"><a href="#zincrby" class="headerlink" title="zincrby"></a>zincrby</h2><p><img src="https://img.senup.cn/blog/20200428/ma6OFzhr6X54.png?imageslim" alt="mark"></p><h2 id="zcard"><a href="#zcard" class="headerlink" title="zcard"></a>zcard</h2><p><img src="https://img.senup.cn/blog/20200428/aAnH1uBFpmpz.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/pqGdo37Qb7kb.png?imageslim" alt="mark"></p><h2 id="zrange"><a href="#zrange" class="headerlink" title="zrange"></a>zrange</h2><p><img src="https://img.senup.cn/blog/20200428/idoGux49piCi.png?imageslim" alt="mark"></p><h2 id="zrangebyscore"><a href="#zrangebyscore" class="headerlink" title="zrangebyscore"></a>zrangebyscore</h2><p><img src="https://img.senup.cn/blog/20200428/M0DI8wNFLmG6.png?imageslim" alt="mark"></p><h2 id="zcount"><a href="#zcount" class="headerlink" title="zcount"></a>zcount</h2><p><img src="https://img.senup.cn/blog/20200428/y9zTpoS6WpIL.png?imageslim" alt="mark"></p><h2 id="zremrangebyrank"><a href="#zremrangebyrank" class="headerlink" title="zremrangebyrank"></a>zremrangebyrank</h2><p><img src="https://img.senup.cn/blog/20200428/Y48eyIkoKg67.png?imageslim" alt="mark"></p><h2 id="zremrangebyscore"><a href="#zremrangebyscore" class="headerlink" title="zremrangebyscore"></a>zremrangebyscore</h2><p><img src="https://img.senup.cn/blog/20200428/R9KASnumQDdi.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/b2cyK8rQ3Kw0.png?imageslim" alt="mark"></p><h2 id="实战：排行榜"><a href="#实战：排行榜" class="headerlink" title="实战：排行榜"></a>实战：排行榜</h2><p><img src="https://img.senup.cn/blog/20200428/PnAHziawzV5i.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/4WemTPaxjBTL.png?imageslim" alt="mark"></p><h2 id="额外方法"><a href="#额外方法" class="headerlink" title="额外方法"></a>额外方法</h2><p><img src="https://img.senup.cn/blog/20200428/W6rD4UpMGshG.png?imageslim" alt="mark"></p><h2 id="有序集合总结"><a href="#有序集合总结" class="headerlink" title="有序集合总结"></a>有序集合总结</h2><p><img src="https://img.senup.cn/blog/20200428/N0UFo1ICQX97.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis从入门到摔门-redis初识</title>
      <link href="p/13d1.html"/>
      <url>p/13d1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于Redis：</p><ol><li>开源</li><li>基于键值的存储服务系统</li><li>多种数据结构</li><li>高性能、功能丰富</li></ol><a id="more"></a><h1 id="Redis特性"><a href="#Redis特性" class="headerlink" title="Redis特性"></a>Redis特性</h1><ol><li>速度快</li><li>持久化</li><li>多种数据结构</li><li>支持多种编程语言</li><li>功能丰富</li><li>简单</li><li>主从复制</li><li>高可用、分布式</li></ol><h2 id="速度快"><a href="#速度快" class="headerlink" title="速度快"></a>速度快</h2><ol><li>redis将数据存在内存中</li><li>C语言编写</li><li>单线程：因为内存读写快</li></ol><p><img src="https://img.senup.cn/blog/20200428/iBoJdrrSf1nX.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/wmcYorvWpcan.png?imageslim" alt="mark"></p><h2 id="持久化（断电不丢数据）"><a href="#持久化（断电不丢数据）" class="headerlink" title="持久化（断电不丢数据）"></a>持久化（断电不丢数据）</h2><p>redis所有数据保存在内存中，对数据的更新将异步地保存在磁盘上。</p><h2 id="支持多种数据结构"><a href="#支持多种数据结构" class="headerlink" title="支持多种数据结构"></a>支持多种数据结构</h2><p>初始五种数据结构</p><p><img src="https://img.senup.cn/blog/20200428/0owUG32cAwLM.png?imageslim" alt="mark"></p><p>后续拓展的数据结构</p><p><img src="https://img.senup.cn/blog/20200428/k9rtsp9xu44p.png?imageslim" alt="mark"></p><h2 id="支持多种客户端语言"><a href="#支持多种客户端语言" class="headerlink" title="支持多种客户端语言"></a>支持多种客户端语言</h2><p><img src="https://img.senup.cn/blog/20200428/9sS4olptGUS0.png?imageslim" alt="mark"></p><h2 id="功能丰富"><a href="#功能丰富" class="headerlink" title="功能丰富"></a>功能丰富</h2><ol><li>发布订阅</li><li>Lua脚本</li><li>事务</li><li>pipeline</li></ol><h2 id="“简单”"><a href="#“简单”" class="headerlink" title="“简单”"></a>“简单”</h2><ul><li>不依赖外部库（like libevent）</li><li>代码少</li><li>单线程模型 ：相较多线程开发难度低</li></ul><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p><img src="https://img.senup.cn/blog/20200428/qpakS3NjCHqn.png?imageslim" alt="mark"></p><h2 id="高可用-分布式"><a href="#高可用-分布式" class="headerlink" title="高可用 分布式"></a>高可用 分布式</h2><p><img src="https://img.senup.cn/blog/20200428/LnJxCDrQKEav.png?imageslim" alt="mark"></p><h1 id="redis典型应用场景"><a href="#redis典型应用场景" class="headerlink" title="redis典型应用场景"></a>redis典型应用场景</h1><ol><li>缓存系统</li><li>计数器</li><li>消息队列系统</li><li>排行榜</li><li>社交网络</li><li>实时系统</li></ol><h2 id="缓存系统"><a href="#缓存系统" class="headerlink" title="缓存系统"></a>缓存系统</h2><p><img src="https://img.senup.cn/blog/20200428/zFBqBuNIXuGV.png?imageslim" alt="mark"></p><h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p><img src="https://img.senup.cn/blog/20200428/RRPN9xrQ7JTD.png?imageslim" alt="mark"></p><h2 id="消息队列系统"><a href="#消息队列系统" class="headerlink" title="消息队列系统"></a>消息队列系统</h2><p><img src="https://img.senup.cn/blog/20200428/m3NR5F8Ou8k4.png?imageslim" alt="mark"></p><h2 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h2><p><img src="https://img.senup.cn/blog/20200428/Wx7dWoCgOK6q.png?imageslim" alt="mark"></p><h2 id="社交网络"><a href="#社交网络" class="headerlink" title="社交网络"></a>社交网络</h2><p><img src="https://img.senup.cn/blog/20200428/N5y2xl0yNNpq.png?imageslim" alt="mark"></p><h2 id="实时系统"><a href="#实时系统" class="headerlink" title="实时系统"></a>实时系统</h2><p>比如邮件系统</p><p><img src="https://img.senup.cn/blog/20200428/LUvpBS9fPg8z.png?imageslim" alt="mark"></p><h1 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h1><h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><p><img src="https://img.senup.cn/blog/20200428/19D1S2l4HY8S.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/w7t1ggLPYGEJ.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/Oqsml9mDQV18.png?imageslim" alt="mark"></p><h2 id="启动方法"><a href="#启动方法" class="headerlink" title="启动方法"></a>启动方法</h2><p>最简启动 redis-server</p><p><img src="https://img.senup.cn/blog/20200428/MIvj2CIW633U.png?imageslim" alt="mark"></p><p>动态参数启动</p><ul><li>redis-server –port 6380</li></ul><p>配置文件启动</p><ul><li>redis-server configPath</li></ul><h2 id="启动方式比较"><a href="#启动方式比较" class="headerlink" title="启动方式比较"></a>启动方式比较</h2><ol><li>生产环境选择配置启动</li><li>单机多实例配置文件可以用端口区分</li></ol><h2 id="redis客户端连接"><a href="#redis客户端连接" class="headerlink" title="redis客户端连接"></a>redis客户端连接</h2><p><img src="https://img.senup.cn/blog/20200428/qpm9xs4TeMRq.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/RJTj1LvYwKXT.png?imageslim" alt="mark"></p><h2 id="redis客户端返回值"><a href="#redis客户端返回值" class="headerlink" title="redis客户端返回值"></a>redis客户端返回值</h2><p><img src="https://img.senup.cn/blog/20200428/SWvjeL5q0HoV.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/1NtnvHdqMei1.png?imageslim" alt="mark"></p><h1 id="redis常用配置"><a href="#redis常用配置" class="headerlink" title="redis常用配置"></a>redis常用配置</h1><p><img src="https://img.senup.cn/blog/20200428/0FJ6EQUOYvXR.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/IGwYEEsc8Nq4.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/TM5tI0OEgwJP.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回家</title>
      <link href="p/20b0.html"/>
      <url>p/20b0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>九点起飞的飞机，突然晚点了一个小时。<br>飞机往下看的时候，是下面这个样子的。其实更喜欢的是坐下午的飞机，云层晚霞落日余晖，想想都觉得好美。到了昆明真的巨冷，7度左右，还下了小雨。</p><p><img src="https://img.senup.cn/blog/20200105/QCF8QpWRsuIy.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感觉</title>
      <link href="p/6dc2.html"/>
      <url>p/6dc2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天从朋友那里听了一点关于她的消息，心情突然很微妙，一开始只是好像心跳突然骤停了两三秒，然后深深地呼了一口气。眼前会浮现出以前的画面，然后视线回到眼前，时间似乎也已经过了很久。很多种情感交织，复杂地说不上来，大抵是，终于可以放下了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平安夜</title>
      <link href="p/ae01.html"/>
      <url>p/ae01.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这两天鼓捣各种有趣的东西，差点忘记了我还要应付的期末考试。第一个是onedrive，搞了一个5t的空间，然后把自己移动硬盘的演唱会视频全都上传了，可惜的是学校的辣鸡网络上传都是1.5M/s，一天也就传了几十G，何况网络像王会林说的每天晚上固定时间会断网！！第二个是搭建了oneIndex+Aria2的离线下载服务，既然有了5T的空间那肯定要拿来用啦，人的欲望总是被刺激出来的。不过似乎不太好用，改天调一调，顺便写篇教程。第三个是写教务系统自动评课脚本。以往我懒得写脚本，结果拖拖拉拉到大三了还是手动评教，想想自己愧为一个计算机系的学生，再加上这段时间对油猴脚本很感兴趣，发现原来不是什么高深莫测的东西，就是js，那就好办了，起码看得懂，于是按着别人写的js脚本简单试了一下，可以用。不过职业生涯规划这门课居然有两个老师，所以简单修改了一下逻辑，成功！！下一年不用自己手动点评课了。贼高兴，顺便把脚本共享给室友，高兴程度不亚于小时候打游戏开外挂吊打其他小朋友，说起来学计算机的初衷居然是想制造游戏外挂，然而后来我戒了游戏，摊手。</p><p>戴哥说了一个问题，可以有更好的方式来进行应试教育吗？原话大概是 像你们专业，本来应该教出来的是像你这样实践能力强的人，可是最后教出来的是很会考试的学生？他们能拿奖学金，却不会写代码。我能想到的回答是，学校不需要我这样特立独行的人，学校需要的是那种愿意听话好好学习的学生，这样方便他们的管理。至于能力强不强他们并不在意那一点，那是你以后人生需要考虑的，学校不会也不愿为你负责，所以从这种程度上来说，什么事情都是有代价的，每个人的时间都有限，所以有时候做对选择很重要。</p><p>现在是2019年12月24日21点49分59秒，平安夜。想起来上一年这个时候属实憨憨，回想起来送苹果真的是羞愧，这辈子大概也就这一次了。叫了外卖送一堆零食，拿一点送给室友们，权哥说：这是平安夜礼物吗？顺口就说是了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《青春大概》</title>
      <link href="p/f1be.html"/>
      <url>p/f1be.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>哭过笑过恋过恨过，仿佛是一梦蹉跎。<br>迷惑失落犹豫寂寞，谁都是凡人一个。<br>细水还来不及长流，抽刀已经断不了情愁。<br>牵手还是放手，不如一歌。<br>在遗忘中不舍，醉醒交错，<br>青春大概如你所说。<br>在花落时结果，期望很多，青春大概都这样过。</p>            <i class="fa fa-quote-right"></i>          </blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=31721697&auto=0&height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-奇迹的山</title>
      <link href="p/a1cb.html"/>
      <url>p/a1cb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本曲难度为： ★ ★</p><p><img src="https://img.senup.cn/blog/20200719/fHPOawOOyWtv.png?imageslim" alt="mark"></p><a id="more"></a><p><img src="https://img.senup.cn/blog/20200719/G6NxO9Softnz.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200719/log3pcRHFhmQ.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200719/q73daYbCg2G9.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广州之行</title>
      <link href="p/9e5b.html"/>
      <url>p/9e5b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>从结果上看，虽然这次系统架构师的考试考的相当不顺利，但是年轻多尝试一些总是没错的哈哈哈哈哈（强行安慰自己）。</p><p><img src="http://img.senup.cn/blog/20191202/rohrhrYp5Ir3.jpg" alt="广技师的图书馆外复习"></p><a id="more"></a><p>一开始拖拖拉拉被林哥赶鸭子上架似的报了软考高级的考试，交了三科快两百块的考试费。本着一种“来都来了”“钱都交了”的心态佛系复习，在最后两个星期里面，不听课看资料然后就到了广州，考点在广技师。值得一提的是，论文这个很让人头疼的东西。我居然等到只剩下三天的时候才开始写，要知道2个小时写三千字的论文可太难为我了，高考作文八百字我都要憋一个小时才写，所以难度相当大。疯狂找资料，在那大概十个题目里面选了三个，分别是SOA服务的应用，架构风格的选择，设计模式等等。那个下午，看到论文的题目，头都大了。考的是设计方法，架构评估，数据池什么鬼的…挑了个设计方法，因为其他完全不知道是什么，只能瞎写了，因为从小到大他们都说有写总比不写好，对吧？洋洋洒洒把设计模式+分层准备的东西写了进去，写到最后快五分钟交卷的时候才写完，手都是发麻的。考完后，林哥跟我讲设计方法是类似于面向对象的知识点，哦豁，离题十万八千里，及格再见。</p><p><img src="http://img.senup.cn/blog/20191202/fwte5XpHN75u.jpg" alt="考场"></p><p>接下来的晚上我们到处瞎逛，终于可以换个舒缓点的心情来欣赏广州这座城市了。但是！广州发展好快，快速公交让我碰了几次壁。一条道上开辟了好几条快速公交的通道，站在广技师外面的立交桥上面，居然不知道走哪一条，这里要批评一下百度地图，瞎几把导航，就不能让人省心点。做错了一次又要回头去另外一条，觉得此时的自己就是个憨憨。好不容易上了车。有一说一，城市化真的很棒啊！平时在学校呆久了，出来一次真的很感慨！</p><p><img src="http://img.senup.cn/blog/20191202/v6LWdbccYUIU.jpg" alt="立交桥"></p><p>在广技师的时候，我想起来我初中很喜欢的那个姑娘，她考到这里来了。当时，还不知道喜欢是什么感觉，就是想和她同一个班，抱着这么一个信念，初中拼命学习，后来两年里面挤进了实验班，和她一起。每天看到她在隔壁的桌子上就很安心，觉得那时候真的很美好。阳光和煦地拍在桌子上，下课和基友在栏杆旁打打闹闹，上课的时候可以瞥见自己喜欢的姑娘，偶尔看到她笑逐颜开的时候觉得世界都亮了，但是我不会和她说很多话。她真的是太好了，好到我觉得是自己无法触及的美好，我看着也很满足。后来升高中的时候少了五分，没能考上和她同一所中学。如果可以的话，我应该会和她表白了吧，人生是另外一条轨迹了，这也是后话了。再到后面，混日子，复读，现在的我，也应该知道她不在这里了。唉，有点遗憾。平行时空里面的那个我啊，会不会当时多多争气和她在一起呢？</p><p>聊点来广州做的事情吧。因为学校那边也要上课，所以行程蛮紧的。</p><p>我们在大学城里面各种公交地铁徘徊，因为说真的没啥目标哈哈哈。去了暨南大学，中山大学，广技师，路过星海音乐学院…对于别人的大学，除了酸还是酸。是我垃圾了~此外，就是吃吃吃。吃自助的时候，林哥这小身板居然大吃特吃的同时还吃了六块牛排，属实难顶，当时很好笑的是，“老板看你这样，不得哭着花钱请你走，招架不住”</p><p><img src="http://img.senup.cn/blog/20191202/TtAX0YG0wdIT.jpg" alt="自助餐"></p><p>总之软考之行就这样了。还是要继续努力啊，外面的世界很棒，值得我为之奋斗。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-流行的云</title>
      <link href="p/d1c9.html"/>
      <url>p/d1c9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本曲难度为： ★ ★ </p><p><img src="https://img.senup.cn/blog/20200719/cMeixqOnc6Er.png?imageslim" alt="mark"></p><a id="more"></a><p><img src="https://img.senup.cn/blog/20200719/WBp6Be34Oii5.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200719/qoiYMiTANxFA.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用cdn加速博客</title>
      <link href="p/2acf.html"/>
      <url>p/2acf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>折腾了半天，重新配置了博客，并加入了又拍云CDN优化，现在这访问速度，自己都忍不住想多刷新几次。</p><p><img src="https://img.senup.cn/blog/20200417/CGLfPnFlAVYi.png?imageslim" alt="加入cdn前后速度对比"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-翼~Hoping for the FUTURE~</title>
      <link href="p/e48c.html"/>
      <url>p/e48c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本曲难度为： ★ ★ ★ </p><p><img src="https://img.senup.cn/blog/20200719/wIykgRmuFqpJ.png?imageslim" alt="mark"></p><a id="more"></a><p><img src="https://img.senup.cn/blog/20200719/L2EenW9zh56i.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200719/YKeKnpc8bC6B.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200719/2SnqavVKbI0C.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200719/Mx6OQWAPpxlu.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200719/BHSf4WzrrX70.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200719/tJhfYx5BiWJv.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-花</title>
      <link href="p/8849.html"/>
      <url>p/8849.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本曲难度为： ★ ★ </p><p><img src="https://img.senup.cn/blog/20200719/p7iGTPEmMVql.png?imageslim" alt="mark"></p><a id="more"></a><p><img src="https://img.senup.cn/blog/20200719/OhS6AI7vXr4H.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200719/QmmClLlgYtbU.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指弹谱-无题</title>
      <link href="p/f8f6.html"/>
      <url>p/f8f6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本曲难度为： ★ ★ ★ ★</p><p><img src="https://img.senup.cn/blog/20200718/pIvGUi497KGe.png?imageslim" alt="mark"></p><a id="more"></a><p><img src="https://img.senup.cn/blog/20200718/0zdtm6oNFfvO.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200718/et7cSN8gePdo.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200718/RC1I3EpGQv5y.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 吉他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构学习笔记-线段树</title>
      <link href="p/8b23.html"/>
      <url>p/8b23.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>线段树是算法竞赛中常用的用来维护 <strong>区间信息</strong> 的数据结构。</p><p>线段树是一个平衡的二元树，所有叶子到根的距离最多只差1。令整个区间的长度为N，则其有N个叶节点，每个叶节点代表一个单位区间，每个内部结点代表的区间为其两个儿子代表区间的联集。</p><p>线段树可以在O(logn) 的时间复杂度内实现单点修改、区间修改、区间查询（区间求和，求区间最大值，求区间最小值）等操作。</p><p><img src="https://img.senup.cn/blog/20200507/Ql9QQRESAPjL.png?imageslim" alt="mark"></p><a id="more"></a><h1 id="为什么要使用线段树？"><a href="#为什么要使用线段树？" class="headerlink" title="为什么要使用线段树？"></a>为什么要使用线段树？</h1><h2 id="区间染色问题"><a href="#区间染色问题" class="headerlink" title="区间染色问题"></a>区间染色问题</h2><p><img src="https://img.senup.cn/blog/20200507/UBhHHY7Y8RTI.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200507/5v56ohUyKp08.png?imageslim" alt="mark"></p><h2 id="区间查询问题"><a href="#区间查询问题" class="headerlink" title="区间查询问题"></a>区间查询问题</h2><p><img src="https://img.senup.cn/blog/20200507/twDKg9MoczMt.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200507/r7Gk0xy3SUg7.png?imageslim" alt="mark"></p><h2 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h2><p>从上面两个问题可以看到利用数组来实现区间查询的问题，时间复杂度为O（n），也就是查询效率低下，因此需要对这个过程进行优化，这也就引出了线段树，时间复杂度能够做到O(logn)。</p><p>线段树不涉及插入删除的问题，它只解决更新和查询的问题。这也就是说，线段树的长度固定。</p><p><img src="https://img.senup.cn/blog/20200507/q2Ei98h2NxQk.png?imageslim" alt="mark"></p><p>针对下图，比如我们要对4~7这个区间求和。</p><p>传统做法是整个数组遍历一遍找到区间然后累加。</p><p>使用线段树的话，可以根据索引直接找到4~7的部分再累加，这就是线段树的优势。</p><p><img src="https://img.senup.cn/blog/20200507/UIMTLUFugtPO.png?imageslim" alt="mark"></p><p>当线段树的元素个数不满足2的N次方的时候，线段树就会变成这样：</p><p><img src="https://img.senup.cn/blog/20200507/17qMLIrHopaL.png?imageslim" alt="mark"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>线段树不是完全二叉树</li><li>线段树是<strong>平衡二叉树</strong>（最大深度和最小深度相差不超过一，图中为第5层和第4层），依然可以用数组表示</li><li>ps;堆也是平衡二叉树  </li></ul><p>针对上面第二点，我们知道，满二叉树可以用数组表示，因此只要把叶子节点看作为空，也可以构造出一个用数组表示的满二叉树。</p><p><img src="https://img.senup.cn/blog/20200507/2hsn6dfAgAJz.png?imageslim" alt="mark"></p><p>假设刚好是之前的8个元素，那么需要16个节点。2n</p><p><img src="https://img.senup.cn/blog/20200507/gTJtKlNusCd4.png?imageslim" alt="mark"></p><p>最坏的情况下，如果n=2^k+1,那么蓝色这一层不足以存储所有节点，也就是出现第三层绿色，这个时候根据最后一层大致等于前面所有层节点之和，那么总共需要4n个节点。</p><p><img src="https://img.senup.cn/blog/20200507/kSJKnJmeb8fj.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200507/jtOcdqjT8mNM.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200507/6jraSEmzKVxF.png?imageslim" alt="mark"></p><figure class="highlight java"><figcaption><span>创建线段树</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day10_segmentTree;</span><br><span class="line"><span class="comment">//用数组实现的线段树</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//用户需要获取数据</span></span><br><span class="line">    <span class="keyword">private</span> E[] data;</span><br><span class="line">    <span class="comment">//组织成树的形式 因为树的节点更多</span></span><br><span class="line">    <span class="keyword">private</span> E[] tree;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SegmentTree</span><span class="params">(E[] arr)</span> </span>&#123;</span><br><span class="line">        data = (E[]) <span class="keyword">new</span> Object[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            data[i]=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        tree=(E[]) <span class="keyword">new</span> Object[arr.length*<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= data.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"index is illeagal."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回完全二叉树的数组表示中，一个索引所表示的元素的左孩子节点的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">leftChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*index+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回完全二叉树的数组表示中，一个索引所表示的元素的右孩子节点的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rightChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*index+<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构学习笔记-堆和优先队列</title>
      <link href="p/ec15.html"/>
      <url>p/ec15.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>堆（英语：heap)是计算机科学中一类特殊的数据结构的统称。堆通常是一个可以被看做一棵树的数组对象。堆总是满足下列性质：<br>堆中某个节点的值总是不大于或不小于其父节点的值；<br>堆总是一棵完全二叉树。<br>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。<br>堆是非线性数据结构，相当于一维数组，有两个直接后继。<br>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)<br>若将和此次序列对应的一维数组（即以一维数组作此序列的存储结构）看成是一个完全二叉树，则堆的含义表明，完全二叉树中所有非终端结点的值均不大于（或不小于）其左、右孩子结点的值。由此，若序列{k1,k2,…,kn}是堆，则堆顶元素（或完全二叉树的根）必为序列中n个元素的最小值（或最大值）。 </p><p><img src="https://img.senup.cn/blog/20200505/8RSU4yQJfaQn.png?imageslim" alt="mark"></p><a id="more"></a><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>之前学过的树是二叉树，然而并不是说学完二叉树就完事儿了。实际上，树结构可以有很丰富的拓展，比如堆 线段树 字典树 并查集等等。</p>            <i class="fa fa-quote-right"></i>          </blockquote><h1 id="优先队列的概念"><a href="#优先队列的概念" class="headerlink" title="优先队列的概念"></a>优先队列的概念</h1><h2 id="什么是优先队列？"><a href="#什么是优先队列？" class="headerlink" title="什么是优先队列？"></a>什么是优先队列？</h2><ul><li>普通队列：先进先出，后进后出</li><li>优先队列：出队顺序和入队顺序无关；和优先级相关（比如医院看病，根据病人的优先级来排队）</li></ul><h2 id="为什么使用优先队列？"><a href="#为什么使用优先队列？" class="headerlink" title="为什么使用优先队列？"></a>为什么使用优先队列？</h2><p>应用场景：操作系统任务调度</p><p>动态选择优先级最高的任务执行</p><h2 id="什么是动态？"><a href="#什么是动态？" class="headerlink" title="什么是动态？"></a>什么是动态？</h2><p>若任务数量固定，那么完全可以根据优先级排序执行就可以了。然而，实际场景下，任务数量是并不固定的。就比如说，处理完当前任务后，同时又加入了一些新任务，那么这个时候要怎么处理任务的调度分配？</p><p><strong><em>关键词：动态</em></strong></p><p>应用场景：游戏中的AI，众多敌人同时攻击的时候，AI会自动选择当前最危险的敌人进行攻击，类似于找到优先级最高的任务。</p><h2 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h2><p>和队列无差别，因此复用接口</p><p><img src="https://img.senup.cn/blog/20200505/LW57JRyvOzDS.png?imageslim" alt="mark"></p><p>优先队列和普通队列的区别主要在出队以及队首元素这两个方法上。</p><p>出队元素：优先级最高的元素</p><p>队首元素：优先级最高的元素，而不是最早进入队列的元素</p><h2 id="两种基础实现的时间复杂度"><a href="#两种基础实现的时间复杂度" class="headerlink" title="两种基础实现的时间复杂度"></a>两种基础实现的时间复杂度</h2><p>对于普通线性结构，比如数组、链表：</p><ol><li>入队的话时间复杂度为O(1)，将新的元素放进线性结构里</li><li>出队，即拿出最大元素，则需要<em>遍历</em>完整个数组才可以知道，O(n)</li></ol><p>因此，出队这个操作极大的影响了运行效率，需要解决这个问题。</p><p>有没有可能，不需要遍历就知道最大的元素是什么？</p><p>比如顺序线性结构？即整个线性结构是有序的。那么出队就变得很简单了，只需要拿出最大最小，或者说队首队尾的元素，时间复杂度为O(1)；但是！入队的时间复杂度就变成了O(n),每一个要入队的元素都需要找到插入的位置，即最差情况下整个数组都要遍历一遍。</p><p><img src="https://img.senup.cn/blog/20200505/dFIlTDNvj2N5.png?imageslim" alt="mark"></p><p>因此，引入堆这种高效的数据结构，在最差情况下都是O(logn)的时间复杂度。</p><h1 id="堆的基本结构"><a href="#堆的基本结构" class="headerlink" title="堆的基本结构"></a>堆的基本结构</h1><p><img src="https://img.senup.cn/blog/20200505/xNF3IGnkJRUR.png?imageslim" alt="mark"></p><h2 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h2><p><img src="https://img.senup.cn/blog/20200505/DFy30D1lUPRF.png?imageslim" alt="mark"></p><h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h2><p>完全二叉树：把元素顺序<em>排列</em>成树的形状</p><p>特点：不满的节点都放在树的左下方，空余的地方都在树的右下方，从左到右排列</p><p><img src="https://img.senup.cn/blog/20200505/hLtsl9SqHgU7.png?imageslim" alt="mark"></p><h2 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h2><p><strong>特点</strong></p><ol><li>最大堆：堆中某个节点的值总是不大于其父节点的值，简单理解就是，父节点总是比子节点大</li><li>二叉堆类似完全二叉树的形状</li></ol><p>用数组来表示二叉堆，注意索引0 的位置是空出来的</p><p><img src="https://img.senup.cn/blog/20200505/kOIhz24xQyF0.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200505/7DSaoW4DtrCr.png?imageslim" alt="mark"></p><p>上面这个公式中，i表示当前节点的索引，也就是0123456等等</p><p>根据索引，可以很容易找到其父节点，左子结点，右子节点</p><h2 id="索引从0开始时"><a href="#索引从0开始时" class="headerlink" title="索引从0开始时"></a>索引从0开始时</h2><p><img src="https://img.senup.cn/blog/20200505/u6u2eTaHPsxx.png?imageslim" alt="mark"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day09_MaxHeap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxHeap</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Array&lt;E&gt; data;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxHeap</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> Array&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxHeap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> Array&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回堆中的元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回父亲节点的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">parent</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"index0 does not have parent~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (index-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">int</span> <span class="title">leftChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">int</span> <span class="title">rightChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向堆中添加元素和sift-up-上浮"><a href="#向堆中添加元素和sift-up-上浮" class="headerlink" title="向堆中添加元素和sift up/上浮"></a>向堆中添加元素和sift up/上浮</h2><p>添加52，实际上也就是在索引10的位置上添加。</p><p>添加后，对该节点和父节点进行比较，在保证父节点总是比较大的情况下对两者进行交换位置。</p><p><img src="https://img.senup.cn/blog/20200505/5MKUKAzSSNjn.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200505/WlODUGvqn1fb.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200505/xGTnuMHFoS0v.png?imageslim" alt="mark"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">    data.addLast(e);</span><br><span class="line">    <span class="comment">//将该元素上浮,参数为索引值</span></span><br><span class="line">    siftUp(data.getSize()-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUp</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//父节点的值和该节点作比较,compareto这个方法我一直理解为类似减法</span></span><br><span class="line">    <span class="keyword">while</span> (k&gt;<span class="number">0</span> &amp;&amp; data.get(parent(k)).compareTo(data.get(k))&lt;<span class="number">0</span>) &#123;</span><br><span class="line">        data.swap(k,parent(k));</span><br><span class="line">        k=parent(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取出最大元素和sift-down-下沉"><a href="#取出最大元素和sift-down-下沉" class="headerlink" title="取出最大元素和sift down/下沉"></a>取出最大元素和sift down/下沉</h2><p>取出最大元素62，然后让最后一个元素16顶替62的位置。</p><p>重新对堆进行整理，使其满足父节点大于子节点。</p><p><img src="https://img.senup.cn/blog/20200505/kHcLVHdbtue5.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200505/Go2tXTqvA5UU.png?imageslim" alt="mark"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取出堆中最大元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">extractMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    E ret = findMax();</span><br><span class="line">    <span class="comment">//交换位置再删除最后一个元素</span></span><br><span class="line">    data.swap(<span class="number">0</span>, data.getSize() - <span class="number">1</span>);</span><br><span class="line">    data.removeLast();</span><br><span class="line">    <span class="comment">//整理堆</span></span><br><span class="line">    <span class="comment">//让索引为0的元素下沉</span></span><br><span class="line">    siftDown(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//左孩子越界的时候条件终止</span></span><br><span class="line">    <span class="keyword">while</span> (leftChild(k) &lt; data.getSize()) &#123;</span><br><span class="line">        <span class="comment">//找到左右节点中数值较大的那个</span></span><br><span class="line">        <span class="comment">//左孩子</span></span><br><span class="line">        <span class="keyword">int</span> j=leftChild(k);</span><br><span class="line">        <span class="comment">//右孩子</span></span><br><span class="line">        <span class="keyword">if</span> (j + <span class="number">1</span> &lt; data.getSize() &amp;&amp;</span><br><span class="line">                data.get(j + <span class="number">1</span>).compareTo(data.get(j)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            j = rightChild(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//data[i]是左右节点中的最大值</span></span><br><span class="line">        <span class="keyword">if</span> (data.get(k).compareTo(data.get(j)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        data.swap(k,j);</span><br><span class="line">        k=j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试取出最大元素的功能，当从100万个数据中依次取出最大值，那么得到的应该是一个降序的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day09_MaxHeap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">1000000</span>;</span><br><span class="line">        MaxHeap&lt;Integer&gt; maxHeap = <span class="keyword">new</span> MaxHeap&lt;&gt;();</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            maxHeap.add(random.nextInt(Integer.MAX_VALUE));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr[i] = maxHeap.extractMax();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i-<span class="number">1</span>]&lt;arr[i])&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"error"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"test maxheap completed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆的时间复杂度分析"><a href="#堆的时间复杂度分析" class="headerlink" title="堆的时间复杂度分析"></a>堆的时间复杂度分析</h2><p>对于堆这种完全二叉树来说，永远不会退化成一个链表</p><p><img src="https://img.senup.cn/blog/20200505/OvdHhHr58nUI.png?imageslim" alt="mark"></p><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><ul><li>replace:取出最大元素后，放入一个新元素:kissing_smiling_eyes:</li><li>实现：可以先extractMax，再add，两次O（logn）的操作</li><li>实现：可以直接将堆顶元素替换以后sift down,一次O（logn）的操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取出堆中的最大元素，并且替换成元素e</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">replace</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">    E ret = findMax();</span><br><span class="line">    data.set(<span class="number">0</span>,e);</span><br><span class="line">    siftDown(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="heapify"><a href="#heapify" class="headerlink" title="heapify"></a>heapify</h2><p>将任意数组整理成堆的形状</p><p>通常方法是：遍历</p><p>现在使用的方法是：找到最后一个非叶子节点，如下图的22，索引为4，</p><p>然后从最后一个非叶子节点向前遍历，进行下沉操作。</p><p><img src="https://img.senup.cn/blog/20200506/XWigT1u55uHz.png?imageslim" alt="mark"></p><p>怎么找这个节点？</p><p>这里很巧妙的地方是：最后一个非叶子节点就是最后一个叶子节点的父节点</p><p>最后一个叶子节点的索引为size-1=9，父节点索引为（size-1）/2=4</p><p>优点：一开始抛弃叶子节点，比传统操作几乎减少一半的遍历</p><p><img src="https://img.senup.cn/blog/20200506/nIkYv9dbMN0W.png?imageslim" alt="mark"></p><h2 id="heapify的算法复杂度"><a href="#heapify的算法复杂度" class="headerlink" title="heapify的算法复杂度"></a>heapify的算法复杂度</h2><ul><li>将n个元素逐个插入到一个空堆中，算法复杂度为O(nlogn)</li><li>heapify的过程算法复杂度为O(n)</li></ul><figure class="highlight java"><figcaption><span>Array.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line">    data= (E[]) <span class="keyword">new</span> Object[arr.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; ++i) &#123;</span><br><span class="line">        data[i] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    size=arr.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>maxheap.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MaxHeap</span><span class="params">(E[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将数组转化成动态数组</span></span><br><span class="line">    data = <span class="keyword">new</span> Array&lt;&gt;(arr);</span><br><span class="line">    <span class="comment">//从后往前遍历 下沉</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = parent(arr.length - <span class="number">1</span>); i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">        siftDown(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>测试方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day09_MaxHeap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n =<span class="number">1000000</span>;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        Integer[] testData = <span class="keyword">new</span> Integer[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            testData[i]=random.nextInt(Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> time1 = testHeap(testData, <span class="keyword">false</span>);</span><br><span class="line">        System.out.println(<span class="string">"without heapify:"</span>+time1+<span class="string">"s"</span>);</span><br><span class="line">        <span class="keyword">double</span> time2 = testHeap(testData, <span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="string">"with heapify:"</span>+time2+<span class="string">"s"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">testHeap</span><span class="params">(Integer[] teatData, <span class="keyword">boolean</span> isHeapify)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">        MaxHeap&lt;Integer&gt; maxHeap;</span><br><span class="line">        <span class="keyword">if</span> (isHeapify) &#123;</span><br><span class="line">            maxHeap = <span class="keyword">new</span> MaxHeap&lt;&gt;(teatData);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            maxHeap = <span class="keyword">new</span> MaxHeap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> num : teatData) &#123;</span><br><span class="line">                maxHeap.add(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[teatData.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; teatData.length; i++) &#123;</span><br><span class="line">            arr[i] = maxHeap.extractMax();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; teatData.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i - <span class="number">1</span>] &lt; arr[i]) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"error"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"test maxheap completed"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">        <span class="keyword">return</span> (endTime-startTime)/<span class="number">1000000000.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理论上测试结果应该是heapify的方法性能提升一半左右，然而还是感叹自己的机子太菜了，跑出来差别不是很大。</p><figure class="highlight sql"><figcaption><span>结果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test maxheap completed</span><br><span class="line">without heapify:3.2113518s</span><br><span class="line">test maxheap completed</span><br><span class="line"><span class="keyword">with</span> heapify:<span class="number">2.804985</span>s</span><br></pre></td></tr></table></figure><h1 id="优先队列的实现"><a href="#优先队列的实现" class="headerlink" title="优先队列的实现"></a>优先队列的实现</h1><p>前面铺垫这么多，现在终于可以通过最大堆这种数据结构来实现优先队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day09_MaxHeap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MaxHeap&lt;E&gt; maxHeap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriorityQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        maxHeap=<span class="keyword">new</span> MaxHeap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        maxHeap.add(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxHeap.extractMax();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxHeap.findMax();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxHeap.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxHeap.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优先队列的经典问题"><a href="#优先队列的经典问题" class="headerlink" title="优先队列的经典问题"></a>优先队列的经典问题</h2><p><strong>在100，0000个元素中选出前100名？</strong></p><p>抽象出来就是：在N个元素中选出前M个元素</p><p>如果直接进行排序，那么时间复杂度就为nlogn（n为所有元素个数）</p><p>更好的方法：使用优先队列，那么时间复杂度为nlogm（n为所有元素个数，m为所求元素个数）</p><p>具体思路是：使用优先队列维护当前看到的前m个元素</p><blockquote><p>一开始只维护前100个元素，如果发现新的元素比最小的元素还要大，那么抛弃最小的元素，将新的元素加入优先队列。如此如此，跑完100万个元素，维护好的队列就为所求前100个。</p></blockquote><p>需要使用最小堆=》使用最大堆，但是优先级调整为：最小的优先级最高</p><h1 id="其他类型的堆"><a href="#其他类型的堆" class="headerlink" title="其他类型的堆"></a>其他类型的堆</h1><ul><li>d叉堆</li></ul><p><img src="https://img.senup.cn/blog/20200506/QCs0yFMSi8J7.png?imageslim" alt="mark"></p><ul><li><p>索引堆：不止关注堆首。</p></li><li><p>二项堆</p></li><li><p>斐波那契堆</p></li></ul><h1 id="广义队列"><a href="#广义队列" class="headerlink" title="广义队列"></a>广义队列</h1><p><img src="https://img.senup.cn/blog/20200506/RNv5hg1Fidhx.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构学习笔记-映射</title>
      <link href="p/ee93.html"/>
      <url>p/ee93.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>映射Map</code></p><ul><li>存储（键，值）数据对的数据结构（key,value）</li><li>根据键（key),寻找值（value）</li><li>可以非常容易使用链表或者二分搜索树实现</li></ul><p><img src="https://img.senup.cn/blog/20200429/6WUcr75KhLKq.png?imageslim" alt="mark"></p><a id="more"></a><h1 id="两种实现思路"><a href="#两种实现思路" class="headerlink" title="两种实现思路"></a>两种实现思路</h1><p><img src="https://img.senup.cn/blog/20200429/RfAPsBeGQ163.png?imageslim" alt="mark"></p><h2 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(K key,V value)</span></span>;</span><br><span class="line">    <span class="function">V <span class="title">remove</span><span class="params">(K key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(K key)</span></span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(K key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(K key,V newValue)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基于链表的映射"><a href="#基于链表的映射" class="headerlink" title="基于链表的映射"></a>基于链表的映射</h1><figure class="highlight java"><figcaption><span>实现</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day08_Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> K key;</span><br><span class="line">        <span class="keyword">public</span> V value;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(K key,V value,Node next)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key=key;</span><br><span class="line">            <span class="keyword">this</span>.value=value;</span><br><span class="line">            <span class="keyword">this</span>.next=next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(key,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key.toString()+<span class="string">":"</span>+value.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node dummyHead;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedListMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dummyHead=<span class="keyword">new</span> Node();</span><br><span class="line">        size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//辅助方法：通过key获取整个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">getNode</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        Node cur = dummyHead.next;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.key.equals(key))</span><br><span class="line">                <span class="keyword">return</span> cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//添加操作的话要保证映射key不能出现重复</span></span><br><span class="line">        Node node = getNode(key);</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)&#123;</span><br><span class="line">            dummyHead.next=<span class="keyword">new</span> Node(key,value,dummyHead.next);</span><br><span class="line">            size++;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            node.value = value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//比较麻烦的操作：找到前一个节点</span></span><br><span class="line">        Node prev = dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(prev.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prev.next.key.equals(key))&#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev=prev.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(prev.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            Node delNode = prev.next;</span><br><span class="line">            prev.next = delNode.next;</span><br><span class="line">            delNode.next=<span class="keyword">null</span>;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> delNode.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(key)!=<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        Node node = getNode(key);</span><br><span class="line">        <span class="keyword">return</span> node==<span class="keyword">null</span>?<span class="keyword">null</span>:node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V newValue)</span> </span>&#123;</span><br><span class="line">        Node node = getNode(key);</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(key+<span class="string">"doesn't exist~~"</span>);</span><br><span class="line">        node.value=newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"双城记"</span>);</span><br><span class="line">        ArrayList&lt;String&gt; words = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(FileOperation.readFile(<span class="string">"src\\day08_Map\\a-tale-of-two-cities.txt"</span>,words))&#123;</span><br><span class="line">            System.out.println(<span class="string">"total words: "</span>+ words.size());</span><br><span class="line">            LinkedListMap&lt;String, Integer&gt; map = <span class="keyword">new</span> LinkedListMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(String word:words)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.contains(word))</span><br><span class="line">                    map.set(word,map.get(word)+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    map.add(word,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"total different words: "</span>+map.getSize());</span><br><span class="line">            System.out.println(<span class="string">"how many of 'was':"</span>+map.get(<span class="string">"was"</span>));</span><br><span class="line">            System.out.println(<span class="string">"how many of 'were':"</span>+map.get(<span class="string">"were"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><figure class="highlight sql"><figcaption><span>统计词频</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">双城记</span><br><span class="line">total words: 87747</span><br><span class="line">total different words: 8002</span><br><span class="line">how many of 'was':1143</span><br><span class="line">how many of 'were':425</span><br></pre></td></tr></table></figure><h1 id="基于二分搜索树的映射"><a href="#基于二分搜索树的映射" class="headerlink" title="基于二分搜索树的映射"></a>基于二分搜索树的映射</h1><p>懒得写介绍了，就直接看代码里的注释吧。</p><p>主要是删除功能比较麻烦。</p><figure class="highlight java"><figcaption><span>基于二分搜索树的map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day08_Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BSTMap</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">K</span>&gt;,<span class="title">V</span>&gt; <span class="keyword">implements</span>  <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> K key;</span><br><span class="line">        <span class="keyword">public</span> V value;</span><br><span class="line">        <span class="keyword">public</span> Node left,right;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(K key,V value)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            left = <span class="keyword">null</span>;</span><br><span class="line">            right=<span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BSTMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        root = <span class="keyword">null</span>;</span><br><span class="line">        size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    //辅助方法：返回以node为根节点的二分搜索树中key所在的节点</span></span><br><span class="line"><span class="comment">//    private Node getNode(Node node,K key)&#123;</span></span><br><span class="line"><span class="comment">//        if(node==null)</span></span><br><span class="line"><span class="comment">//            return null;</span></span><br><span class="line"><span class="comment">//        if(key.compareTo(node.key)==0)</span></span><br><span class="line"><span class="comment">//            return getNode(node.left,key);</span></span><br><span class="line"><span class="comment">//        else</span></span><br><span class="line"><span class="comment">//            return getNode(node.right,key);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回以node为根节点的二分搜索树中，key所在的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">getNode</span><span class="params">(Node node, K key)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(key.equals(node.key))</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(key.compareTo(node.key) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> getNode(node.left, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// if(key.compareTo(node.key) &gt; 0)</span></span><br><span class="line">            <span class="keyword">return</span> getNode(node.right, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        root = add(root, key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">add</span><span class="params">(Node node, K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)&#123;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Node(key,value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(key.compareTo(node.key)&lt;<span class="number">0</span>)</span><br><span class="line">            node.left=add(node.left,key,value);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(key.compareTo(node.key)&gt;<span class="number">0</span>)</span><br><span class="line">            node.right=add(node.right,key,value);</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//key.compareTo(node.key)==0</span></span><br><span class="line">            node.value=value;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(root,key)!=<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        Node node = getNode(root, key);</span><br><span class="line">        <span class="keyword">return</span> node==<span class="keyword">null</span>?<span class="keyword">null</span>:node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V newValue)</span> </span>&#123;</span><br><span class="line">        Node node = getNode(root, key);</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(key+<span class="string">"doesn't exist~~"</span>);</span><br><span class="line">        node.value=newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    从二分搜索树中删除键为key的节点</span></span><br><span class="line"><span class="comment">    如果节点在 则删除</span></span><br><span class="line"><span class="comment">    不存在 返回空</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        Node node = getNode(root, key);</span><br><span class="line">        <span class="keyword">if</span>(node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            root = remove(root,key);</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">remove</span><span class="params">(Node node, K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(key.compareTo(node.key)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            node.left = remove(node.left,key);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key.compareTo(node.key)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            node.right=remove(node.right,key);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//key.compareTo(node.key)==0</span></span><br><span class="line">            <span class="comment">//待删除节点左子树为空的情况</span></span><br><span class="line">            <span class="keyword">if</span>(node.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">                Node rightNode = node.right;</span><br><span class="line">                node.right=<span class="keyword">null</span>;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">return</span> rightNode;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//待删除节点右子树为空的情况</span></span><br><span class="line">            <span class="keyword">if</span>(node.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                Node leftNode = node.left;</span><br><span class="line">                node.left=<span class="keyword">null</span>;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">return</span> leftNode;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//待删除节点左右子树均不为空的情况</span></span><br><span class="line">            <span class="comment">/*找到比待删除节点大的最小节点，即待删除节点右子树的最小节点</span></span><br><span class="line"><span class="comment">            * 用这个节点顶替待删除节点的位置*/</span></span><br><span class="line">            Node successor = minimum(node.right);</span><br><span class="line">            successor.right=removeMin(node.right);</span><br><span class="line">            successor.left=node.left;</span><br><span class="line">            node.left=node.right=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> successor;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除以node为根的二分搜索树的最小节点</span></span><br><span class="line"><span class="comment">    * 返回删除节点后新的二分搜索树的根*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">removeMin</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">            Node rightNode = node.right;</span><br><span class="line">            node.right=<span class="keyword">null</span>;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> rightNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回以node为根的二分搜索树的最小值所在的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">minimum</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        <span class="keyword">return</span> minimum(node.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"双城记"</span>);</span><br><span class="line">        ArrayList&lt;String&gt; words = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(FileOperation.readFile(<span class="string">"src\\day08_Map\\a-tale-of-two-cities.txt"</span>,words))&#123;</span><br><span class="line">            System.out.println(<span class="string">"total words: "</span>+ words.size());</span><br><span class="line">            BSTMap&lt;String, Integer&gt; map = <span class="keyword">new</span> BSTMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(String word:words)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.contains(word))</span><br><span class="line">                    map.set(word,map.get(word)+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    map.add(word,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"total different words: "</span>+map.getSize());</span><br><span class="line">            System.out.println(<span class="string">"how many of 'was':"</span>+map.get(<span class="string">"was"</span>));</span><br><span class="line">            System.out.println(<span class="string">"how many of 'were':"</span>+map.get(<span class="string">"were"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">双城记</span><br><span class="line">total words: 87747</span><br><span class="line">total different words: 8002</span><br><span class="line">how many of 'was':1143</span><br><span class="line">how many of 'were':425</span><br></pre></td></tr></table></figure><p>其实结果相同，但是在运行速度方面肯定是二分搜索树快得多。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构学习笔记-集合</title>
      <link href="p/3c88.html"/>
      <url>p/3c88.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>Set&lt;E&gt;</code></p><ol><li>void add(E)  不能添加重复元素</li><li>void remove(E)</li><li>boolean contains(E)</li><li>int getSize()</li><li>boolean isEmpty()</li></ol><a id="more"></a><h1 id="集合-基于二分搜索树实现"><a href="#集合-基于二分搜索树实现" class="headerlink" title="集合-基于二分搜索树实现"></a>集合-基于二分搜索树实现</h1><p>上一节实现的二分搜索树，由于不能盛放重复元素，因此是非常好的实现“集合”的底层数据结构。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li><p>客户统计：比如记录网站的IP访问量</p></li><li><p>词汇量统计</p></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><figcaption><span>定义接口</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day07_Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>使用二分搜索树来实现的集合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day07_Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BSTSet</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BST&lt;E&gt; bst;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BSTSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        bst=<span class="keyword">new</span> BST&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        bst.add(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        bst.remove(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bst.contains(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bst.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bst.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>使用双城记来测试分词前后词汇量统计</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day07_Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"a-tale-of-two-cities(双城记)"</span>);</span><br><span class="line">        ArrayList&lt;String&gt; word = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        FileOperation.readFile(<span class="string">"src\\day07_Set\\a-tale-of-two-cities.txt"</span>, word);</span><br><span class="line">        System.out.println(<span class="string">"total words: "</span>+word.size());</span><br><span class="line"></span><br><span class="line">        BSTSet&lt;String&gt; set = <span class="keyword">new</span> BSTSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String w:word) &#123;</span><br><span class="line">            set.add(w);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"total different words: "</span>+set.getSize());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>文件处理类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day07_Set;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span>java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件相关操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOperation</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取文件名称为filename中的内容，并将其中包含的所有词语放进words中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">readFile</span><span class="params">(String filename,ArrayList&lt;String&gt; words)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(filename==<span class="keyword">null</span> || words==<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"filename is null or words is nulll~"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件读取</span></span><br><span class="line">        Scanner scanner;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(filename);</span><br><span class="line">            <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">                FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">                scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedInputStream(fis), <span class="string">"UTF-8"</span>);</span><br><span class="line">                scanner.useLocale(Locale.ENGLISH);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">            System.out.println(<span class="string">"cannot open "</span>+ filename);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//简单分词</span></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNextLine())&#123;</span><br><span class="line">            String contents = scanner.useDelimiter(<span class="string">"\\A"</span>).next();</span><br><span class="line">            <span class="keyword">int</span> start= firstCharacterIndex(contents,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=start+<span class="number">1</span>;i&lt;=contents.length();)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==contents.length() || !Character.isLetter(contents.charAt(i)))&#123;</span><br><span class="line">                    String word = contents.substring(start, i).toLowerCase();</span><br><span class="line">                    words.add(word);</span><br><span class="line">                    start = firstCharacterIndex(contents,i);</span><br><span class="line">                    i = start +<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//寻找字符串S中，从start的位置开始的第一个字幕字符的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">firstCharacterIndex</span><span class="params">(String s, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start;i&lt;s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isLetter(s.charAt(i))) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a-tale-of-two-cities(双城记)</span><br><span class="line">total words: 87747</span><br><span class="line">total different words: 8002</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="集合-基于链表实现"><a href="#集合-基于链表实现" class="headerlink" title="集合-基于链表实现"></a>集合-基于链表实现</h1><p>二分搜索树是动态结构，而链表也是。</p><p><img src="https://img.senup.cn/blog/20200429/bTsXxEWqGoXU.png?imageslim" alt="mark"></p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><figcaption><span>使用链表实现的集合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day07_Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线性数据结构不要求具有可比性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;E&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedListSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!list.contains(e))&#123;</span><br><span class="line">            list.addFirst(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        list.removeElement(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.contains(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"a-tale-of-two-cities(双城记)"</span>);</span><br><span class="line">        ArrayList&lt;String&gt; word = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        FileOperation.readFile(<span class="string">"src\\day07_Set\\a-tale-of-two-cities.txt"</span>, word);</span><br><span class="line">        System.out.println(<span class="string">"total words: "</span>+word.size());</span><br><span class="line"></span><br><span class="line">        LinkedListSet&lt;String&gt; set = <span class="keyword">new</span> LinkedListSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String w:word) &#123;</span><br><span class="line">            set.add(w);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"total different words: "</span>+set.getSize());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对比两种实现方式"><a href="#对比两种实现方式" class="headerlink" title="对比两种实现方式"></a>对比两种实现方式</h1><figure class="highlight java"><figcaption><span>简单分析时间复杂度</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day07_Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBoth</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String filename = <span class="string">"src\\day07_Set\\a-tale-of-two-cities.txt"</span>;</span><br><span class="line"></span><br><span class="line">        BSTSet&lt;String&gt; bstSet = <span class="keyword">new</span> BSTSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">double</span> time1 = testSet(bstSet, filename);</span><br><span class="line">        System.out.println(<span class="string">"BST Set :"</span>+time1+<span class="string">" S"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        LinkedListSet&lt;String&gt; linkedListSet = <span class="keyword">new</span> LinkedListSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">double</span> time2 = testSet(linkedListSet, filename);</span><br><span class="line">        System.out.println(<span class="string">"linkedList Set :"</span>+time2+<span class="string">" S"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">testSet</span><span class="params">(Set&lt;String&gt; set,String filename)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        System.out.println(filename);</span><br><span class="line">        ArrayList&lt;String&gt; words = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(FileOperation.readFile(filename,words))&#123;</span><br><span class="line">            System.out.println(<span class="string">"total words:"</span> + words.size());</span><br><span class="line">            <span class="keyword">for</span> (String word: words) &#123;</span><br><span class="line">                set.add(word);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"total different words "</span>+ set.getSize());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line">        <span class="keyword">return</span> (endTime - startTime)/<span class="number">1000000000.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个场景下，可以看到测试结果相差几十倍。</p><figure class="highlight sql"><figcaption><span>测试结果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">src\day07_Set\a-tale-of-two-cities.txt</span><br><span class="line">total words:87747</span><br><span class="line">total different words 8002</span><br><span class="line">BST <span class="keyword">Set</span> :<span class="number">0.1382748</span> S</span><br><span class="line"></span><br><span class="line">src\day07_Set\a-tale-<span class="keyword">of</span>-two-cities.txt</span><br><span class="line">total words:<span class="number">87747</span></span><br><span class="line">total different words <span class="number">8002</span></span><br><span class="line">linkedList <span class="keyword">Set</span> :<span class="number">4.3039813</span> S</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="集合的时间复杂度分析"><a href="#集合的时间复杂度分析" class="headerlink" title="集合的时间复杂度分析"></a>集合的时间复杂度分析</h1><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>对于链表来说，添加操作可以直接添加在链表头，这样的话时间复杂度为O(1);</p><p>然而链表实现的集合要求去重，所以添加操作需要先遍历链表，这样的话时间复杂度就变成了O(n);同理，查询以及删除同样需要遍历，因此时间复杂度都为O(n)；</p><h2 id="二分搜索树"><a href="#二分搜索树" class="headerlink" title="二分搜索树"></a>二分搜索树</h2><p>二分搜索树则是每每遇到分支，抛弃近一半的节点。</p><p>如此相当于是，经历的节点个数相当于整棵树的高度，因此，这样的话时间复杂度为O(h),h为树的高度（层数）</p><p><img src="https://img.senup.cn/blog/20200429/54SUr2VMfmI9.png?imageslim" alt="mark"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><img src="https://img.senup.cn/blog/20200429/1HCbdBHwhSye.png?imageslim" alt="mark"></p><h2 id="n和h有什么关系？"><a href="#n和h有什么关系？" class="headerlink" title="n和h有什么关系？"></a>n和h有什么关系？</h2><p>就拿一颗满二叉树举例</p><p><img src="https://img.senup.cn/blog/20200429/FU9EKNlmyXqU.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/cJw0NmUDx6j9.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200429/8Vpd5XxEjE9g.png?imageslim" alt="mark"></p><h2 id="logn-和n的差距"><a href="#logn-和n的差距" class="headerlink" title="logn 和n的差距"></a>logn 和n的差距</h2><p><img src="https://img.senup.cn/blog/20200429/F3eEVeaw5qte.png?imageslim" alt="mark"></p><h2 id="最优情况与最坏情况"><a href="#最优情况与最坏情况" class="headerlink" title="最优情况与最坏情况"></a>最优情况与最坏情况</h2><p><img src="https://img.senup.cn/blog/20200429/jgohHhAGJXdL.png?imageslim" alt="mark"></p><p>因此前面考虑的是最优情况，时间复杂度O(n)应该是平均的。</p><p>二分搜索树如果是在最坏情况下，就变成图右的链表，那么此时的时间复杂度就变成O(n)了.</p><p>综上，在最优和最坏的情况下，引出新的数据结构——<code>平衡二叉树</code>。</p><h1 id="有序集合-vs-无序集合"><a href="#有序集合-vs-无序集合" class="headerlink" title="有序集合 vs 无序集合"></a>有序集合 vs 无序集合</h1><ul><li>二分搜索树实现的集合属于有序集合：比如可以从小到大遍历元素以及查找目标元素的上一个下一个等等</li><li>链表实现的集合属于无序集合：没有顺序性，不能排序，无法找到最小最大元素</li></ul><p>有序集合基于搜索树来实现；</p><p>无序集合可以基于哈希表来实现，可以比搜索树更快。</p><h1 id="多重集合"><a href="#多重集合" class="headerlink" title="多重集合"></a>多重集合</h1><p>概念：集合中的元素可以重复</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构学习笔记-二叉查找树</title>
      <link href="p/7ccc.html"/>
      <url>p/7ccc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>二叉查找树</strong>（英语：Binary Search Tree），也称为<strong>二叉搜索树</strong>、<strong>有序二叉树</strong>（ordered binary tree）或<strong>排序二叉树</strong>（sorted binary tree），是指一棵空树或者具有下列性质的<a href="https://zh.wikipedia.org/wiki/二叉树" target="_blank" rel="noopener">二叉树</a>：</p><ol><li>若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；</li><li>若任意节点的右子树不空，则右子树上所有节点的值均大于或等于它的根节点的值；</li><li>任意节点的左、右子树也分别为二叉查找树；</li></ol><p><img src="https://img.senup.cn/blog/20200424/kI359rBdJSNN.png?imageslim" alt="二叉查找树"></p><a id="more"></a><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树可以有左孩子或者右孩子，二叉树不一定是满的，一个节点也可以是二叉树。</p><p><img src="https://img.senup.cn/blog/20200428/oD1ALzvkUVfN.png?imageslim" alt="二叉树"></p><h1 id="二分搜索树"><a href="#二分搜索树" class="headerlink" title="二分搜索树"></a>二分搜索树</h1><ol><li>二分搜索树是二叉树</li><li>二分搜索树的每个节点的值：<ul><li>大于其左子树的所有节点的值</li><li>小于其右子树的所有节点的值</li></ul></li><li>每一棵子树也是二分搜索树</li><li>存储的元素必须有可比较性（如果比较学生类，可以比较学号、成绩等可比较的数据）</li></ol><p><img src="https://img.senup.cn/blog/20200428/2nSPxo7BqrV7.png?imageslim" alt></p><h1 id="向二分搜索树中添加元素"><a href="#向二分搜索树中添加元素" class="headerlink" title="向二分搜索树中添加元素"></a>向二分搜索树中添加元素</h1><p>无非是判断节点的值，若比当前节点小，则往左；反之往右。</p><p>同时，如果节点的值与当前节点的值相同，则不做改变；</p><p>因为我们的二分搜索树不包含重复元素。</p><ul><li>如果想包含重复元素的话，只需要定义：</li><li>左子树小于等于节点；或者右子树大于节点；</li><li>注意：我们之前讲的数组和链表，可以有重复元素</li><li>二分搜索树添加元素的非递归写法和链表很像</li></ul><p><img src="https://img.senup.cn/blog/20200428/OesHgXa3eVV4.png?imageslim" alt></p><p>递归具有更高的开销，最坏的情况下二分搜索树可能成为链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//泛型必须可比较</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> E e;</span><br><span class="line">        <span class="keyword">public</span> Node left, right;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.e = e;</span><br><span class="line">            left = <span class="keyword">null</span>;</span><br><span class="line">            right = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //向二分搜索树中添加新的元素e</span></span><br><span class="line"><span class="comment">//    public void add(E e) &#123;</span></span><br><span class="line"><span class="comment">//        //根节点为空的情况下</span></span><br><span class="line"><span class="comment">//        if (root == null) &#123;</span></span><br><span class="line"><span class="comment">//            root = new Node(e);</span></span><br><span class="line"><span class="comment">//            size++;</span></span><br><span class="line"><span class="comment">//        &#125; else &#123;</span></span><br><span class="line"><span class="comment">//            //对用户屏蔽细节，调用真正的add函数</span></span><br><span class="line"><span class="comment">//            add(root, e);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    //向以node为根的二分搜索树中插入元素E，使用递归算法</span></span><br><span class="line"><span class="comment">//    private void add(Node node, E e) &#123;</span></span><br><span class="line"><span class="comment">//        //第一部分：递归终止的条件</span></span><br><span class="line"><span class="comment">//        //检查要插入的e是否等于元素的e</span></span><br><span class="line"><span class="comment">//        if (e.equals(node.e)) &#123;</span></span><br><span class="line"><span class="comment">//            return;</span></span><br><span class="line"><span class="comment">//        &#125; else if (e.compareTo(node.e) &lt; 0 &amp;&amp; node.left == null) &#123;</span></span><br><span class="line"><span class="comment">//            //插入左子树</span></span><br><span class="line"><span class="comment">//            node.left = new Node(e);</span></span><br><span class="line"><span class="comment">//            size++;</span></span><br><span class="line"><span class="comment">//            return;</span></span><br><span class="line"><span class="comment">//        &#125; else if (e.compareTo(node.e) &lt; 0 &amp;&amp; node.left == null) &#123;</span></span><br><span class="line"><span class="comment">//            node.right = new Node(e);</span></span><br><span class="line"><span class="comment">//            size++;</span></span><br><span class="line"><span class="comment">//            return;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        //第二部分 递归调用</span></span><br><span class="line"><span class="comment">//        if (e.compareTo(node.e) &lt; 0)</span></span><br><span class="line"><span class="comment">//            add(node.left, e);</span></span><br><span class="line"><span class="comment">//            //等于的情况在上面已经被排除</span></span><br><span class="line"><span class="comment">//        else</span></span><br><span class="line"><span class="comment">//            add(node.right, e);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 上面添加操作存在冗余：</span></span><br><span class="line"><span class="comment">* 用户调用的时候根节点为空插入新元素</span></span><br><span class="line"><span class="comment">* 而真实的添加操作同样使用了插入操作</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 进行两轮比较</span></span><br><span class="line"><span class="comment">* 不仅判断node的大小 同时比较其左右节点是否为空</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 条件臃肿</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 空——本身也为一棵二叉树</span></span><br><span class="line"><span class="comment">* 插入到空 本身也为一个位置节点</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="改进添加操作：深入理解递归终止条件"><a href="#改进添加操作：深入理解递归终止条件" class="headerlink" title="改进添加操作：深入理解递归终止条件"></a>改进添加操作：深入理解递归终止条件</h1><figure class="highlight java"><figcaption><span>改进添加操作 使用递归</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向二分搜索树中添加新的元素e</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    root = add(root,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向以node为根的二分搜索树中插入元素E，使用递归算法</span></span><br><span class="line"><span class="comment">//返回插入新节点后二叉搜索树的根root</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">add</span><span class="params">(Node node, E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//第一部分：递归终止的条件</span></span><br><span class="line">    <span class="comment">//检查要插入的e是否等于元素的e</span></span><br><span class="line">    <span class="keyword">if</span>(node==<span class="keyword">null</span>)&#123;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二部分 递归调用</span></span><br><span class="line">    <span class="keyword">if</span> (e.compareTo(node.e) &lt; <span class="number">0</span>)</span><br><span class="line">        node.left=add(node.left, e);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (e.compareTo(node.e) &gt; <span class="number">0</span>)</span><br><span class="line">        node.right=add(node.right, e);</span><br><span class="line">    <span class="comment">//不处理相等的逻辑</span></span><br><span class="line">    <span class="comment">//node还是原来的node</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分搜索树的查询操作"><a href="#二分搜索树的查询操作" class="headerlink" title="二分搜索树的查询操作"></a>二分搜索树的查询操作</h1><figure class="highlight java"><figcaption><span>查询操作</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询是否包含元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> contains(root,e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询以node 为根的树中是否包含元素e 使用递归算法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Node node,E e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.compareTo(node.e)==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e.compareTo(node.e)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> contains(node.left,e);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> contains(node.right,e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于二分搜索树没有索引的概念，因此不涉及其他查询操作；</p><h1 id="二分搜索树的前序遍历"><a href="#二分搜索树的前序遍历" class="headerlink" title="二分搜索树的前序遍历"></a>二分搜索树的前序遍历</h1><h2 id="什么是遍历操作"><a href="#什么是遍历操作" class="headerlink" title="什么是遍历操作"></a>什么是遍历操作</h2><ol><li>把所有节点都访问一遍（比如查询学生成绩）</li><li>访问的原因和业务相关</li><li>在线性结构中，遍历是极其容易的</li><li>在树结构下，也不是很难</li></ol><h2 id="二分搜索树的递归操作"><a href="#二分搜索树的递归操作" class="headerlink" title="二分搜索树的递归操作"></a>二分搜索树的递归操作</h2><p><img src="https://img.senup.cn/blog/20200428/vR3fXhCE9zDX.png?imageslim" alt="伪代码"></p><h1 id="二分搜索树的前序遍历-1"><a href="#二分搜索树的前序遍历-1" class="headerlink" title="二分搜索树的前序遍历"></a>二分搜索树的前序遍历</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        preOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以node为根的前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line"><span class="comment">//        if(node==null)&#123;</span></span><br><span class="line"><span class="comment">//            return;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        System.out.println(node.e);</span></span><br><span class="line"><span class="comment">//        preOrder(node.left);</span></span><br><span class="line"><span class="comment">//        preOrder(node.right);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(node.e);</span><br><span class="line">            preOrder(node.left);</span><br><span class="line">            preOrder(node.right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>测试</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day06_BST;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BST&lt;Integer&gt; bst = <span class="keyword">new</span> BST&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> nums[] = &#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num:nums</span><br><span class="line">             ) &#123;</span><br><span class="line">            bst.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        bst.preOrder();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.senup.cn/blog/20200428/VWQDI01QsHEh.png?imageslim" alt="结果"></p><h2 id="生成描述二叉树深度的字符串"><a href="#生成描述二叉树深度的字符串" class="headerlink" title="生成描述二叉树深度的字符串"></a>生成描述二叉树深度的字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">     StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 第一个参数为节点</span></span><br><span class="line"><span class="comment">     * 第二个参数为树的深度也就是层数，第一层为0，第二层为1，以此类推</span></span><br><span class="line"><span class="comment">     * 第三个参数为传入的字符串拼接对象*/</span></span><br><span class="line">     generateBSTString(root,<span class="number">0</span>,res);</span><br><span class="line">     <span class="keyword">return</span> res.toString();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//生成描述二叉树的字符串</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateBSTString</span><span class="params">(Node node, <span class="keyword">int</span> depth, StringBuilder res)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(node==<span class="keyword">null</span>)&#123;</span><br><span class="line">         res.append(generateDepthString(depth)+<span class="string">"null\n"</span>);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     res.append(generateDepthString(depth)+node.e+<span class="string">"\n"</span>);</span><br><span class="line">     generateBSTString(node.left,depth+<span class="number">1</span>,res);</span><br><span class="line">     generateBSTString(node.right,depth+<span class="number">1</span>,res);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> String <span class="title">generateDepthString</span><span class="params">(<span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">     StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;depth;i++ )&#123;</span><br><span class="line">         res.append(<span class="string">"--"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> res.toString();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BST&lt;Integer&gt; bst = <span class="keyword">new</span> BST&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> nums[] = &#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num:nums) &#123;</span><br><span class="line">            bst.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        bst.preOrder();</span><br><span class="line">        System.out.println(<span class="string">"=================================================="</span>);</span><br><span class="line">        System.out.println(bst);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印结果"><a href="#打印结果" class="headerlink" title="打印结果"></a>打印结果</h3><p>从深度来看，层数：536248</p><p>前序遍历：532468 满足前面的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line">--<span class="number">3</span></span><br><span class="line">----<span class="number">2</span></span><br><span class="line">------<span class="keyword">null</span></span><br><span class="line">------<span class="keyword">null</span></span><br><span class="line">----<span class="number">4</span></span><br><span class="line">------<span class="keyword">null</span></span><br><span class="line">------<span class="keyword">null</span></span><br><span class="line">--<span class="number">6</span></span><br><span class="line">----<span class="keyword">null</span></span><br><span class="line">----<span class="number">8</span></span><br><span class="line">------<span class="keyword">null</span></span><br><span class="line">------<span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>综上，前序遍历最常用，最自然，方式为</p><ol><li>访问该节点</li><li>其左结点</li><li>其右节点</li></ol><p>也就是直接看访问该节点的位置的顺序</p><h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><p>综上，中序遍历的方式为</p><ol><li>其左结点</li><li>访问该节点</li><li>其右节点</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    inOrder(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以node为根的中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        preOrder(node.left);</span><br><span class="line">        System.out.println(node.e);</span><br><span class="line">        preOrder(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>数据由小到大，实现了升序排序。</p><h1 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    afterOrder(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以node为根的后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">afterOrder</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        preOrder(node.left);</span><br><span class="line">        preOrder(node.right);</span><br><span class="line">        System.out.println(node.e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>为二分搜索树释放内存</li></ul><p>意思就是先释放孩子节点，再释放父节点</p><p>当然，java有垃圾回收机制，就不需要。而类似C++就需要这种手动控制内存。</p><h1 id="深入理解遍历"><a href="#深入理解遍历" class="headerlink" title="深入理解遍历"></a>深入理解遍历</h1><p>对于每个节点，会遍历三次。</p><p>拿前序遍历来说，第一次访问该节点即打印结果在右边。</p><p>28 16 13 22 30 29 42</p><p><img src="https://img.senup.cn/blog/20200428/KYRGaFnLl4Ha.png?imageslim" alt></p><p>拿中序遍历来说，第二次访问该节点即打印结果在右边。</p><p>13 16 22 28 29 30 42</p><p><img src="https://img.senup.cn/blog/20200428/mbdGpAsodyF0.png?imageslim" alt="mark"></p><p>后序遍历</p><p>13 22 16 29 42 30 28</p><p><img src="https://img.senup.cn/blog/20200428/YhwQmyK3VXfy.png?imageslim" alt="mark"></p><h1 id="前序遍历的非递归写法"><a href="#前序遍历的非递归写法" class="headerlink" title="前序遍历的非递归写法"></a>前序遍历的非递归写法</h1><p><img src="https://img.senup.cn/blog/20200428/rjJTYdpR3T8A.png?imageslim" alt="示例"></p><p>使用栈的结构，首先将28压入栈，弹出，出栈即打印，<code>打印28</code>；</p><p>接着压入两个子节点，先压入右孩子30，再压入左孩子16，这样的话后入先出，左孩子先出来，<code>打印16</code>。</p><p>接着对16压入右孩子22，再压入左孩子13，出栈<code>打印13</code>；</p><p>这时13的左右孩子为空，因此 不压入。</p><p>接着对栈顶的22，出栈弹出，<code>打印22</code>；</p><p>这时22的左右孩子为空，因此 不压入。</p><p>此时栈顶为30，出栈<code>打印30</code>；</p><p>压入30的右孩子42，再压入左孩子29，<code>依次打印出29,42.</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//preOrderNR no recursion非递归写法 前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderNR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        Node cur = stack.pop();</span><br><span class="line">        System.out.println(cur.e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cur.right != <span class="keyword">null</span>)</span><br><span class="line">            stack.push(cur.right);</span><br><span class="line">        <span class="keyword">if</span> (cur.left != <span class="keyword">null</span>)</span><br><span class="line">            stack.push(cur.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：需要使用一种数据结构——栈来辅助，因此非递归的方法更复杂！</p><p>以上讲的是深度优先遍历。</p><h1 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h1><p>广度优先遍历</p><p><img src="https://img.senup.cn/blog/20200428/1eX1O6ctWXVz.png?imageslim" alt></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>不使用递归，而是使用到队列。</p><ol><li>28从队尾到队首，出队，<code>打印28</code>；</li><li>队列先到先得，16,30依次入队，16出队，<code>打印16</code>；</li><li>此时16的左孩子12，右孩子22入队；</li><li>此时保证了顶层元素处于队首，30出队，<code>打印30</code>；</li><li>此时30的左孩子29，右孩子42入队；</li><li>此时队首的13，出队，<code>打印13</code>；</li><li>由于13没有左右孩子，因此不操作；</li><li>接下来打印<code>22 29 42</code></li></ol><p><img src="https://img.senup.cn/blog/20200428/b3pEG5axhWHI.png?imageslim" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//层序遍历（广度优先遍历）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//内置的queue是一个接口，这里选择使用链表来实现</span></span><br><span class="line">    Queue&lt;Node&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    q.add(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">        Node cur = q.remove();</span><br><span class="line">        System.out.println(cur.e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>)</span><br><span class="line">            q.add(cur.left);</span><br><span class="line">        <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>)</span><br><span class="line">            q.add(cur.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="广度优先遍历的意义"><a href="#广度优先遍历的意义" class="headerlink" title="广度优先遍历的意义"></a>广度优先遍历的意义</h2><p>可以更快查找到目标元素，用于搜索策略上；</p><ol><li>更快的找到问题的解</li><li>常用于算法设计中-最短路径</li><li>图中的深度优先遍历和广度优先遍历</li></ol><h1 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h1><h2 id="删除最大值与最小值"><a href="#删除最大值与最小值" class="headerlink" title="删除最大值与最小值"></a>删除最大值与最小值</h2><p>最小值：在二分搜索树中顺着左边走到末端，即可找到。</p><p>最大值：在二分搜索树中顺着右边走到末端，即可找到。</p><p><img src="https://img.senup.cn/blog/20200428/Qc6XCWgVUwG3.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/7Yg7BXv2fVi9.png?imageslim" alt></p><figure class="highlight java"><figcaption><span>查找元素</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寻找二分搜索树的最小元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">minimum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(size==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"bst is empty!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minimum(root).e;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">minimum</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.left==<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    <span class="keyword">return</span> minimum(node.left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找二分搜索树的最大元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">maxmum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(size==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"bst is empty!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxmum(root).e;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">maxmum</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.right==<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    <span class="keyword">return</span> maxmum(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>删除元素</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除最小值所在节点，返回最小值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    E ret= minimum();</span><br><span class="line">    <span class="comment">//根节点更新</span></span><br><span class="line">    root=removeMin(root);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除以node为根的二分搜索树中的最小节点</span></span><br><span class="line"><span class="comment">//返回删除节点后新的二分搜索树的根</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">removeMin</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">        Node rightNode = node.right;</span><br><span class="line">        node.right=<span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="comment">//删除原来的最小值，现在接上来的是右子树作为新的根节点</span></span><br><span class="line">        <span class="keyword">return</span> rightNode;</span><br><span class="line">    &#125;</span><br><span class="line">    node.left = removeMin(node.left);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回当前的node</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除最大值所在节点，返回最大值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    E ret= maxmum();</span><br><span class="line">    <span class="comment">//根节点更新</span></span><br><span class="line">    root=removeMax(root);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除以node为根的二分搜索树中的最大节点</span></span><br><span class="line"><span class="comment">//返回删除节点后新的二分搜索树的根</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">removeMax</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">        Node leftNode = node.left;</span><br><span class="line">        node.left=<span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="comment">//删除原来的最大值，现在接上来的是左子树作为新的根节点</span></span><br><span class="line">        <span class="keyword">return</span> leftNode;</span><br><span class="line">    &#125;</span><br><span class="line">    node.right = removeMax(node.right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回当前的node</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>测试</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">BST&lt;Integer&gt; bst = <span class="keyword">new</span> BST&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">1000</span>;</span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    bst.add(random.nextInt(<span class="number">10000</span>));</span><br><span class="line">&#125;</span><br><span class="line">ArrayList&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (!bst.isEmpty()) &#123;</span><br><span class="line">    nums.add(bst.removeMin());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(nums);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.get(i-<span class="number">1</span>)&gt;nums.get(i))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"error!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"removeMin is completed!"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight verilog"><figcaption><span>结果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">28</span>, <span class="number">39</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">117</span>, <span class="number">128</span>, <span class="number">134</span>, <span class="number">139</span>, <span class="number">142</span>, <span class="number">145</span>, <span class="number">147</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">163</span>, <span class="number">171</span>, <span class="number">174</span>, <span class="number">187</span>, <span class="number">188</span>, <span class="number">192</span>, <span class="number">199</span>, <span class="number">201</span>, <span class="number">212</span>, <span class="number">224</span>, <span class="number">227</span>, <span class="number">235</span>, <span class="number">240</span>, <span class="number">252</span>, <span class="number">270</span>, <span class="number">275</span>, <span class="number">289</span>, <span class="number">290</span>, <span class="number">293</span>, <span class="number">304</span>, <span class="number">313</span>, <span class="number">345</span>, <span class="number">360</span>, <span class="number">361</span>, <span class="number">369</span>, <span class="number">370</span>, <span class="number">374</span>, <span class="number">380</span>, <span class="number">405</span>, <span class="number">406</span>, <span class="number">421</span>, <span class="number">441</span>, <span class="number">444</span>, <span class="number">450</span>, <span class="number">457</span>, <span class="number">459</span>, <span class="number">473</span>, <span class="number">484</span>, <span class="number">491</span>, <span class="number">518</span>, <span class="number">565</span>, <span class="number">574</span>, <span class="number">587</span>, <span class="number">588</span>, <span class="number">596</span>, <span class="number">602</span>, <span class="number">609</span>, <span class="number">634</span>, <span class="number">647</span>, <span class="number">654</span>, <span class="number">673</span>, <span class="number">677</span>, <span class="number">681</span>, <span class="number">719</span>, <span class="number">752</span>, <span class="number">760</span>, <span class="number">765</span>, <span class="number">770</span>, <span class="number">774</span>, <span class="number">782</span>, <span class="number">798</span>, <span class="number">809</span>, <span class="number">861</span>, <span class="number">871</span>, <span class="number">885</span>, <span class="number">889</span>, <span class="number">894</span>, <span class="number">908</span>, <span class="number">929</span>, <span class="number">932</span>, <span class="number">969</span>, <span class="number">976</span>, <span class="number">986</span>, <span class="number">987</span>, <span class="number">990</span>, <span class="number">997</span>, <span class="number">1014</span>, <span class="number">1026</span>, <span class="number">1032</span>, <span class="number">1039</span>, <span class="number">1048</span>, <span class="number">1050</span>, <span class="number">1058</span>, <span class="number">1064</span>, <span class="number">1066</span>, <span class="number">1088</span>, <span class="number">1097</span>, <span class="number">1098</span>, <span class="number">1114</span>, <span class="number">1117</span>, <span class="number">1123</span>, <span class="number">1130</span>, <span class="number">1147</span>, <span class="number">1173</span>, <span class="number">1180</span>, <span class="number">1187</span>, <span class="number">1198</span>, <span class="number">1204</span>, <span class="number">1210</span>, <span class="number">1233</span>, <span class="number">1234</span>, <span class="number">1236</span>, <span class="number">1237</span>, <span class="number">1239</span>, <span class="number">1243</span>, <span class="number">1254</span>, <span class="number">1255</span>, <span class="number">1262</span>, <span class="number">1270</span>, <span class="number">1277</span>, <span class="number">1291</span>, <span class="number">1299</span>, <span class="number">1309</span>, <span class="number">1323</span>, <span class="number">1333</span>, <span class="number">1339</span>, <span class="number">1345</span>, <span class="number">1348</span>, <span class="number">1356</span>, <span class="number">1358</span>, <span class="number">1371</span>, <span class="number">1393</span>, <span class="number">1423</span>, <span class="number">1430</span>, <span class="number">1438</span>, <span class="number">1446</span>, <span class="number">1478</span>, <span class="number">1504</span>, <span class="number">1505</span>, <span class="number">1514</span>, <span class="number">1540</span>, <span class="number">1544</span>, <span class="number">1559</span>, <span class="number">1566</span>, <span class="number">1578</span>, <span class="number">1590</span>, <span class="number">1593</span>, <span class="number">1598</span>, <span class="number">1631</span>, <span class="number">1634</span>, <span class="number">1643</span>, <span class="number">1648</span>, <span class="number">1649</span>, <span class="number">1664</span>, <span class="number">1670</span>, <span class="number">1699</span>, <span class="number">1702</span>, <span class="number">1704</span>, <span class="number">1743</span>, <span class="number">1774</span>, <span class="number">1776</span>, <span class="number">1806</span>, <span class="number">1821</span>, <span class="number">1822</span>, <span class="number">1826</span>, <span class="number">1848</span>, <span class="number">1854</span>, <span class="number">1858</span>, <span class="number">1863</span>, <span class="number">1876</span>, <span class="number">1881</span>, <span class="number">1882</span>, <span class="number">1914</span>, <span class="number">1922</span>, <span class="number">1933</span>, <span class="number">1937</span>, <span class="number">1957</span>, <span class="number">1971</span>, <span class="number">1974</span>, <span class="number">1980</span>, <span class="number">1987</span>, <span class="number">2005</span>, <span class="number">2014</span>, <span class="number">2034</span>, <span class="number">2049</span>, <span class="number">2050</span>, <span class="number">2070</span>, <span class="number">2084</span>, <span class="number">2098</span>, <span class="number">2116</span>, <span class="number">2135</span>, <span class="number">2136</span>, <span class="number">2137</span>, <span class="number">2142</span>, <span class="number">2159</span>, <span class="number">2170</span>, <span class="number">2183</span>, <span class="number">2190</span>, <span class="number">2196</span>, <span class="number">2208</span>, <span class="number">2212</span>, <span class="number">2219</span>, <span class="number">2228</span>, <span class="number">2287</span>, <span class="number">2290</span>, <span class="number">2292</span>, <span class="number">2311</span>, <span class="number">2317</span>, <span class="number">2324</span>, <span class="number">2325</span>, <span class="number">2327</span>, <span class="number">2331</span>, <span class="number">2332</span>, <span class="number">2336</span>, <span class="number">2337</span>, <span class="number">2350</span>, <span class="number">2395</span>, <span class="number">2412</span>, <span class="number">2426</span>, <span class="number">2428</span>, <span class="number">2430</span>, <span class="number">2448</span>, <span class="number">2453</span>, <span class="number">2457</span>, <span class="number">2464</span>, <span class="number">2473</span>, <span class="number">2503</span>, <span class="number">2512</span>, <span class="number">2517</span>, <span class="number">2524</span>, <span class="number">2546</span>, <span class="number">2566</span>, <span class="number">2569</span>, <span class="number">2580</span>, <span class="number">2585</span>, <span class="number">2619</span>, <span class="number">2640</span>, <span class="number">2642</span>, <span class="number">2663</span>, <span class="number">2665</span>, <span class="number">2671</span>, <span class="number">2690</span>, <span class="number">2691</span>, <span class="number">2700</span>, <span class="number">2704</span>, <span class="number">2722</span>, <span class="number">2725</span>, <span class="number">2738</span>, <span class="number">2751</span>, <span class="number">2755</span>, <span class="number">2785</span>, <span class="number">2791</span>, <span class="number">2792</span>, <span class="number">2794</span>, <span class="number">2799</span>, <span class="number">2807</span>, <span class="number">2830</span>, <span class="number">2838</span>, <span class="number">2848</span>, <span class="number">2881</span>, <span class="number">2884</span>, <span class="number">2894</span>, <span class="number">2907</span>, <span class="number">2930</span>, <span class="number">2950</span>, <span class="number">2952</span>, <span class="number">2964</span>, <span class="number">2966</span>, <span class="number">2969</span>, <span class="number">2975</span>, <span class="number">2979</span>, <span class="number">2981</span>, <span class="number">2982</span>, <span class="number">2984</span>, <span class="number">3033</span>, <span class="number">3035</span>, <span class="number">3045</span>, <span class="number">3050</span>, <span class="number">3061</span>, <span class="number">3067</span>, <span class="number">3081</span>, <span class="number">3092</span>, <span class="number">3096</span>, <span class="number">3097</span>, <span class="number">3099</span>, <span class="number">3103</span>, <span class="number">3107</span>, <span class="number">3109</span>, <span class="number">3113</span>, <span class="number">3117</span>, <span class="number">3140</span>, <span class="number">3142</span>, <span class="number">3156</span>, <span class="number">3165</span>, <span class="number">3168</span>, <span class="number">3176</span>, <span class="number">3177</span>, <span class="number">3178</span>, <span class="number">3186</span>, <span class="number">3217</span>, <span class="number">3232</span>, <span class="number">3244</span>, <span class="number">3246</span>, <span class="number">3275</span>, <span class="number">3297</span>, <span class="number">3308</span>, <span class="number">3333</span>, <span class="number">3359</span>, <span class="number">3385</span>, <span class="number">3412</span>, <span class="number">3413</span>, <span class="number">3414</span>, <span class="number">3416</span>, <span class="number">3441</span>, <span class="number">3493</span>, <span class="number">3503</span>, <span class="number">3518</span>, <span class="number">3519</span>, <span class="number">3520</span>, <span class="number">3522</span>, <span class="number">3525</span>, <span class="number">3548</span>, <span class="number">3551</span>, <span class="number">3554</span>, <span class="number">3580</span>, <span class="number">3581</span>, <span class="number">3604</span>, <span class="number">3606</span>, <span class="number">3608</span>, <span class="number">3617</span>, <span class="number">3639</span>, <span class="number">3643</span>, <span class="number">3644</span>, <span class="number">3668</span>, <span class="number">3670</span>, <span class="number">3687</span>, <span class="number">3709</span>, <span class="number">3721</span>, <span class="number">3735</span>, <span class="number">3745</span>, <span class="number">3747</span>, <span class="number">3763</span>, <span class="number">3780</span>, <span class="number">3793</span>, <span class="number">3794</span>, <span class="number">3799</span>, <span class="number">3801</span>, <span class="number">3812</span>, <span class="number">3823</span>, <span class="number">3833</span>, <span class="number">3842</span>, <span class="number">3855</span>, <span class="number">3886</span>, <span class="number">3899</span>, <span class="number">3904</span>, <span class="number">3907</span>, <span class="number">3916</span>, <span class="number">3920</span>, <span class="number">3941</span>, <span class="number">3942</span>, <span class="number">3961</span>, <span class="number">3963</span>, <span class="number">3967</span>, <span class="number">3985</span>, <span class="number">3988</span>, <span class="number">3991</span>, <span class="number">4011</span>, <span class="number">4024</span>, <span class="number">4036</span>, <span class="number">4050</span>, <span class="number">4051</span>, <span class="number">4055</span>, <span class="number">4057</span>, <span class="number">4058</span>, <span class="number">4080</span>, <span class="number">4098</span>, <span class="number">4143</span>, <span class="number">4171</span>, <span class="number">4174</span>, <span class="number">4175</span>, <span class="number">4197</span>, <span class="number">4198</span>, <span class="number">4211</span>, <span class="number">4212</span>, <span class="number">4213</span>, <span class="number">4222</span>, <span class="number">4223</span>, <span class="number">4232</span>, <span class="number">4257</span>, <span class="number">4260</span>, <span class="number">4268</span>, <span class="number">4275</span>, <span class="number">4286</span>, <span class="number">4292</span>, <span class="number">4319</span>, <span class="number">4331</span>, <span class="number">4332</span>, <span class="number">4350</span>, <span class="number">4387</span>, <span class="number">4390</span>, <span class="number">4407</span>, <span class="number">4410</span>, <span class="number">4412</span>, <span class="number">4457</span>, <span class="number">4467</span>, <span class="number">4488</span>, <span class="number">4499</span>, <span class="number">4520</span>, <span class="number">4521</span>, <span class="number">4523</span>, <span class="number">4525</span>, <span class="number">4527</span>, <span class="number">4530</span>, <span class="number">4538</span>, <span class="number">4566</span>, <span class="number">4577</span>, <span class="number">4587</span>, <span class="number">4590</span>, <span class="number">4592</span>, <span class="number">4602</span>, <span class="number">4615</span>, <span class="number">4618</span>, <span class="number">4624</span>, <span class="number">4631</span>, <span class="number">4653</span>, <span class="number">4695</span>, <span class="number">4709</span>, <span class="number">4714</span>, <span class="number">4727</span>, <span class="number">4729</span>, <span class="number">4737</span>, <span class="number">4740</span>, <span class="number">4747</span>, <span class="number">4748</span>, <span class="number">4754</span>, <span class="number">4759</span>, <span class="number">4772</span>, <span class="number">4782</span>, <span class="number">4784</span>, <span class="number">4785</span>, <span class="number">4788</span>, <span class="number">4816</span>, <span class="number">4818</span>, <span class="number">4835</span>, <span class="number">4836</span>, <span class="number">4849</span>, <span class="number">4857</span>, <span class="number">4866</span>, <span class="number">4873</span>, <span class="number">4893</span>, <span class="number">4923</span>, <span class="number">4940</span>, <span class="number">4941</span>, <span class="number">4944</span>, <span class="number">4953</span>, <span class="number">4975</span>, <span class="number">4981</span>, <span class="number">4991</span>, <span class="number">4994</span>, <span class="number">4997</span>, <span class="number">5001</span>, <span class="number">5006</span>, <span class="number">5047</span>, <span class="number">5060</span>, <span class="number">5062</span>, <span class="number">5072</span>, <span class="number">5084</span>, <span class="number">5088</span>, <span class="number">5095</span>, <span class="number">5098</span>, <span class="number">5101</span>, <span class="number">5116</span>, <span class="number">5124</span>, <span class="number">5151</span>, <span class="number">5152</span>, <span class="number">5165</span>, <span class="number">5170</span>, <span class="number">5183</span>, <span class="number">5184</span>, <span class="number">5189</span>, <span class="number">5196</span>, <span class="number">5211</span>, <span class="number">5225</span>, <span class="number">5242</span>, <span class="number">5244</span>, <span class="number">5245</span>, <span class="number">5255</span>, <span class="number">5260</span>, <span class="number">5280</span>, <span class="number">5281</span>, <span class="number">5292</span>, <span class="number">5301</span>, <span class="number">5324</span>, <span class="number">5343</span>, <span class="number">5345</span>, <span class="number">5349</span>, <span class="number">5371</span>, <span class="number">5373</span>, <span class="number">5405</span>, <span class="number">5410</span>, <span class="number">5445</span>, <span class="number">5471</span>, <span class="number">5491</span>, <span class="number">5496</span>, <span class="number">5507</span>, <span class="number">5514</span>, <span class="number">5517</span>, <span class="number">5531</span>, <span class="number">5533</span>, <span class="number">5545</span>, <span class="number">5553</span>, <span class="number">5556</span>, <span class="number">5560</span>, <span class="number">5564</span>, <span class="number">5568</span>, <span class="number">5577</span>, <span class="number">5582</span>, <span class="number">5583</span>, <span class="number">5604</span>, <span class="number">5608</span>, <span class="number">5614</span>, <span class="number">5618</span>, <span class="number">5620</span>, <span class="number">5627</span>, <span class="number">5639</span>, <span class="number">5652</span>, <span class="number">5654</span>, <span class="number">5661</span>, <span class="number">5681</span>, <span class="number">5684</span>, <span class="number">5688</span>, <span class="number">5699</span>, <span class="number">5731</span>, <span class="number">5746</span>, <span class="number">5778</span>, <span class="number">5785</span>, <span class="number">5812</span>, <span class="number">5818</span>, <span class="number">5819</span>, <span class="number">5828</span>, <span class="number">5838</span>, <span class="number">5841</span>, <span class="number">5842</span>, <span class="number">5844</span>, <span class="number">5866</span>, <span class="number">5891</span>, <span class="number">5895</span>, <span class="number">5898</span>, <span class="number">5901</span>, <span class="number">5933</span>, <span class="number">5934</span>, <span class="number">5984</span>, <span class="number">5993</span>, <span class="number">5994</span>, <span class="number">6001</span>, <span class="number">6002</span>, <span class="number">6006</span>, <span class="number">6038</span>, <span class="number">6053</span>, <span class="number">6061</span>, <span class="number">6081</span>, <span class="number">6084</span>, <span class="number">6097</span>, <span class="number">6100</span>, <span class="number">6117</span>, <span class="number">6139</span>, <span class="number">6172</span>, <span class="number">6189</span>, <span class="number">6191</span>, <span class="number">6219</span>, <span class="number">6249</span>, <span class="number">6251</span>, <span class="number">6254</span>, <span class="number">6268</span>, <span class="number">6299</span>, <span class="number">6316</span>, <span class="number">6317</span>, <span class="number">6325</span>, <span class="number">6326</span>, <span class="number">6342</span>, <span class="number">6344</span>, <span class="number">6350</span>, <span class="number">6359</span>, <span class="number">6374</span>, <span class="number">6384</span>, <span class="number">6392</span>, <span class="number">6393</span>, <span class="number">6397</span>, <span class="number">6413</span>, <span class="number">6416</span>, <span class="number">6425</span>, <span class="number">6431</span>, <span class="number">6434</span>, <span class="number">6454</span>, <span class="number">6459</span>, <span class="number">6471</span>, <span class="number">6485</span>, <span class="number">6491</span>, <span class="number">6508</span>, <span class="number">6522</span>, <span class="number">6531</span>, <span class="number">6543</span>, <span class="number">6558</span>, <span class="number">6568</span>, <span class="number">6570</span>, <span class="number">6591</span>, <span class="number">6610</span>, <span class="number">6613</span>, <span class="number">6618</span>, <span class="number">6629</span>, <span class="number">6636</span>, <span class="number">6657</span>, <span class="number">6660</span>, <span class="number">6667</span>, <span class="number">6668</span>, <span class="number">6674</span>, <span class="number">6687</span>, <span class="number">6693</span>, <span class="number">6709</span>, <span class="number">6718</span>, <span class="number">6728</span>, <span class="number">6740</span>, <span class="number">6742</span>, <span class="number">6777</span>, <span class="number">6795</span>, <span class="number">6801</span>, <span class="number">6807</span>, <span class="number">6808</span>, <span class="number">6822</span>, <span class="number">6823</span>, <span class="number">6829</span>, <span class="number">6830</span>, <span class="number">6834</span>, <span class="number">6835</span>, <span class="number">6853</span>, <span class="number">6916</span>, <span class="number">6931</span>, <span class="number">6934</span>, <span class="number">6940</span>, <span class="number">6947</span>, <span class="number">6959</span>, <span class="number">6963</span>, <span class="number">7023</span>, <span class="number">7068</span>, <span class="number">7073</span>, <span class="number">7074</span>, <span class="number">7076</span>, <span class="number">7078</span>, <span class="number">7079</span>, <span class="number">7081</span>, <span class="number">7085</span>, <span class="number">7095</span>, <span class="number">7098</span>, <span class="number">7108</span>, <span class="number">7111</span>, <span class="number">7113</span>, <span class="number">7120</span>, <span class="number">7130</span>, <span class="number">7132</span>, <span class="number">7134</span>, <span class="number">7141</span>, <span class="number">7156</span>, <span class="number">7158</span>, <span class="number">7169</span>, <span class="number">7176</span>, <span class="number">7198</span>, <span class="number">7211</span>, <span class="number">7215</span>, <span class="number">7237</span>, <span class="number">7244</span>, <span class="number">7252</span>, <span class="number">7279</span>, <span class="number">7306</span>, <span class="number">7311</span>, <span class="number">7319</span>, <span class="number">7341</span>, <span class="number">7343</span>, <span class="number">7367</span>, <span class="number">7376</span>, <span class="number">7384</span>, <span class="number">7391</span>, <span class="number">7398</span>, <span class="number">7430</span>, <span class="number">7445</span>, <span class="number">7447</span>, <span class="number">7469</span>, <span class="number">7470</span>, <span class="number">7498</span>, <span class="number">7501</span>, <span class="number">7505</span>, <span class="number">7510</span>, <span class="number">7521</span>, <span class="number">7528</span>, <span class="number">7531</span>, <span class="number">7533</span>, <span class="number">7543</span>, <span class="number">7546</span>, <span class="number">7549</span>, <span class="number">7559</span>, <span class="number">7569</span>, <span class="number">7585</span>, <span class="number">7588</span>, <span class="number">7596</span>, <span class="number">7600</span>, <span class="number">7634</span>, <span class="number">7647</span>, <span class="number">7663</span>, <span class="number">7667</span>, <span class="number">7674</span>, <span class="number">7681</span>, <span class="number">7691</span>, <span class="number">7695</span>, <span class="number">7705</span>, <span class="number">7741</span>, <span class="number">7744</span>, <span class="number">7749</span>, <span class="number">7755</span>, <span class="number">7756</span>, <span class="number">7761</span>, <span class="number">7769</span>, <span class="number">7770</span>, <span class="number">7772</span>, <span class="number">7773</span>, <span class="number">7783</span>, <span class="number">7793</span>, <span class="number">7813</span>, <span class="number">7816</span>, <span class="number">7863</span>, <span class="number">7872</span>, <span class="number">7883</span>, <span class="number">7886</span>, <span class="number">7897</span>, <span class="number">7902</span>, <span class="number">7919</span>, <span class="number">7933</span>, <span class="number">7938</span>, <span class="number">7944</span>, <span class="number">7950</span>, <span class="number">7956</span>, <span class="number">7967</span>, <span class="number">7997</span>, <span class="number">8012</span>, <span class="number">8018</span>, <span class="number">8019</span>, <span class="number">8047</span>, <span class="number">8060</span>, <span class="number">8061</span>, <span class="number">8063</span>, <span class="number">8089</span>, <span class="number">8091</span>, <span class="number">8106</span>, <span class="number">8111</span>, <span class="number">8115</span>, <span class="number">8120</span>, <span class="number">8128</span>, <span class="number">8130</span>, <span class="number">8152</span>, <span class="number">8159</span>, <span class="number">8169</span>, <span class="number">8180</span>, <span class="number">8181</span>, <span class="number">8196</span>, <span class="number">8206</span>, <span class="number">8208</span>, <span class="number">8213</span>, <span class="number">8218</span>, <span class="number">8226</span>, <span class="number">8229</span>, <span class="number">8264</span>, <span class="number">8271</span>, <span class="number">8290</span>, <span class="number">8292</span>, <span class="number">8293</span>, <span class="number">8317</span>, <span class="number">8318</span>, <span class="number">8319</span>, <span class="number">8325</span>, <span class="number">8332</span>, <span class="number">8340</span>, <span class="number">8346</span>, <span class="number">8356</span>, <span class="number">8361</span>, <span class="number">8362</span>, <span class="number">8374</span>, <span class="number">8382</span>, <span class="number">8390</span>, <span class="number">8397</span>, <span class="number">8401</span>, <span class="number">8433</span>, <span class="number">8454</span>, <span class="number">8459</span>, <span class="number">8469</span>, <span class="number">8471</span>, <span class="number">8474</span>, <span class="number">8484</span>, <span class="number">8487</span>, <span class="number">8515</span>, <span class="number">8526</span>, <span class="number">8538</span>, <span class="number">8585</span>, <span class="number">8604</span>, <span class="number">8619</span>, <span class="number">8632</span>, <span class="number">8638</span>, <span class="number">8647</span>, <span class="number">8652</span>, <span class="number">8656</span>, <span class="number">8658</span>, <span class="number">8669</span>, <span class="number">8678</span>, <span class="number">8684</span>, <span class="number">8686</span>, <span class="number">8687</span>, <span class="number">8697</span>, <span class="number">8702</span>, <span class="number">8705</span>, <span class="number">8708</span>, <span class="number">8712</span>, <span class="number">8721</span>, <span class="number">8732</span>, <span class="number">8744</span>, <span class="number">8748</span>, <span class="number">8758</span>, <span class="number">8764</span>, <span class="number">8766</span>, <span class="number">8768</span>, <span class="number">8782</span>, <span class="number">8789</span>, <span class="number">8794</span>, <span class="number">8811</span>, <span class="number">8813</span>, <span class="number">8835</span>, <span class="number">8847</span>, <span class="number">8873</span>, <span class="number">8886</span>, <span class="number">8891</span>, <span class="number">8907</span>, <span class="number">8926</span>, <span class="number">8931</span>, <span class="number">8939</span>, <span class="number">8947</span>, <span class="number">8951</span>, <span class="number">8958</span>, <span class="number">8959</span>, <span class="number">8962</span>, <span class="number">8964</span>, <span class="number">8966</span>, <span class="number">8967</span>, <span class="number">8978</span>, <span class="number">8990</span>, <span class="number">9001</span>, <span class="number">9004</span>, <span class="number">9006</span>, <span class="number">9035</span>, <span class="number">9036</span>, <span class="number">9051</span>, <span class="number">9058</span>, <span class="number">9073</span>, <span class="number">9078</span>, <span class="number">9079</span>, <span class="number">9082</span>, <span class="number">9085</span>, <span class="number">9086</span>, <span class="number">9098</span>, <span class="number">9104</span>, <span class="number">9113</span>, <span class="number">9115</span>, <span class="number">9118</span>, <span class="number">9127</span>, <span class="number">9149</span>, <span class="number">9163</span>, <span class="number">9164</span>, <span class="number">9166</span>, <span class="number">9175</span>, <span class="number">9186</span>, <span class="number">9222</span>, <span class="number">9225</span>, <span class="number">9227</span>, <span class="number">9241</span>, <span class="number">9258</span>, <span class="number">9269</span>, <span class="number">9272</span>, <span class="number">9281</span>, <span class="number">9290</span>, <span class="number">9291</span>, <span class="number">9328</span>, <span class="number">9331</span>, <span class="number">9346</span>, <span class="number">9352</span>, <span class="number">9367</span>, <span class="number">9416</span>, <span class="number">9418</span>, <span class="number">9433</span>, <span class="number">9454</span>, <span class="number">9459</span>, <span class="number">9477</span>, <span class="number">9483</span>, <span class="number">9486</span>, <span class="number">9490</span>, <span class="number">9495</span>, <span class="number">9512</span>, <span class="number">9513</span>, <span class="number">9520</span>, <span class="number">9536</span>, <span class="number">9544</span>, <span class="number">9552</span>, <span class="number">9557</span>, <span class="number">9565</span>, <span class="number">9585</span>, <span class="number">9613</span>, <span class="number">9636</span>, <span class="number">9641</span>, <span class="number">9642</span>, <span class="number">9643</span>, <span class="number">9655</span>, <span class="number">9659</span>, <span class="number">9677</span>, <span class="number">9681</span>, <span class="number">9682</span>, <span class="number">9691</span>, <span class="number">9697</span>, <span class="number">9706</span>, <span class="number">9707</span>, <span class="number">9724</span>, <span class="number">9736</span>, <span class="number">9757</span>, <span class="number">9761</span>, <span class="number">9770</span>, <span class="number">9777</span>, <span class="number">9782</span>, <span class="number">9786</span>, <span class="number">9796</span>, <span class="number">9799</span>, <span class="number">9814</span>, <span class="number">9817</span>, <span class="number">9820</span>, <span class="number">9822</span>, <span class="number">9835</span>, <span class="number">9845</span>, <span class="number">9847</span>, <span class="number">9874</span>, <span class="number">9904</span>, <span class="number">9912</span>, <span class="number">9913</span>, <span class="number">9915</span>, <span class="number">9924</span>, <span class="number">9925</span>, <span class="number">9945</span>, <span class="number">9950</span>, <span class="number">9955</span>, <span class="number">9957</span>, <span class="number">9968</span>, <span class="number">9971</span>, <span class="number">9986</span>, <span class="number">9993</span>, <span class="number">9994</span>, <span class="number">9998</span>]</span><br><span class="line">removeMin is completed!</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="删除任意元素"><a href="#删除任意元素" class="headerlink" title="删除任意元素"></a>删除任意元素</h1><p><img src="https://img.senup.cn/blog/20200428/sHdOmmHpnysV.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/NITEfmF53DHz.png?imageslim" alt="mark"></p><h2 id="困难点"><a href="#困难点" class="headerlink" title="困难点"></a>困难点</h2><p><img src="https://img.senup.cn/blog/20200428/2QINuKRteYPH.png?imageslim" alt="mark"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>找到比58大同时距离最近的元素，也就是59；</p><p>59处于58的右子树的底端左结点。</p><p>59是58的后继</p><p>现在的操作是，移动59到58（分成四步：删除59，让58的右孩子成为59的右孩子，58更新成59，41的右孩子变成59），二叉树左小右大得以保留。厉害~</p><p><img src="https://img.senup.cn/blog/20200428/qH4lidH7pFNX.png?imageslim" alt="mark"></p><p><img src="https://img.senup.cn/blog/20200428/QdHfKSS6cqzK.png?imageslim" alt="mark"></p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//从二分搜索树中删除元素为e的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        remove(root,e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除以node为根的二分搜索树中值为e的节点，使用递归</span></span><br><span class="line">    <span class="comment">//返回删除节点后新的二分搜索树的根</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">remove</span><span class="params">(Node node, E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//递归到底的情况</span></span><br><span class="line">        <span class="comment">//也就是没找到要删除的元素</span></span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(e.compareTo(node.e)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            node.left=remove(node.left,e);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(e.compareTo(node.e)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            node.right=remove(node.right,e);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//e==node.e</span></span><br><span class="line">            <span class="comment">//左子树为空</span></span><br><span class="line">            <span class="keyword">if</span>(node.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">                Node rightNode = node.right;</span><br><span class="line">                node.right=<span class="keyword">null</span>;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">return</span> rightNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右子树为空</span></span><br><span class="line">            <span class="keyword">if</span>(node.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                Node leftNode = node.left;</span><br><span class="line">                node.left=<span class="keyword">null</span>;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">return</span> leftNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//左右子树都不为空</span></span><br><span class="line">            <span class="comment">//找到比待删除节点大的最小节点，即待删除节点右子树的最小节点</span></span><br><span class="line">            <span class="comment">//用这个节点顶替待删除节点的位置</span></span><br><span class="line">            Node successor= minimum(node.right);</span><br><span class="line"><span class="comment">//            size++;</span></span><br><span class="line">            <span class="comment">//拼装后继节点，即删除最小节点</span></span><br><span class="line">            successor.right=removeMin(node.right);</span><br><span class="line">            successor.left=node.left;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//回收</span></span><br><span class="line">            node.left=node.right=<span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//            size--;</span></span><br><span class="line">            <span class="keyword">return</span> successor;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//陷阱：要不要维护size,size--?</span></span><br><span class="line">            <span class="comment">//removeMin中的元素并没有被删除，但是内部size--;</span></span><br><span class="line">            <span class="comment">//同时多了successor,size++</span></span><br><span class="line">            <span class="comment">//同时最后删除了目标节点，因此size--;</span></span><br><span class="line">            <span class="comment">//size++ size-- 互相抵消</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>同样也可以使用前驱节点来替代删除目标节点的位置。</p><h1 id="关于二分搜索树"><a href="#关于二分搜索树" class="headerlink" title="关于二分搜索树"></a>关于二分搜索树</h1><h2 id="顺序性"><a href="#顺序性" class="headerlink" title="顺序性"></a>顺序性</h2><p>二分搜索树整体是有序的，因此可以拿到最大最小值。</p><p>floor:比45大的最小元素</p><p>ceil:比45小的最大元素</p><p><img src="https://img.senup.cn/blog/20200428/EiYoGUCu3gyI.png?imageslim" alt="mark"></p><p>rank: 第10个元素的排名是什么？</p><p>select:排名第10的元素是谁？</p><p><img src="https://img.senup.cn/blog/20200428/rr0HflItKdHS.png?imageslim" alt="mark"></p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>添加size的含义：</p><p>以41为根，总共11个节点</p><p>以22为根，总共有5个节点</p><p>……</p><p><img src="https://img.senup.cn/blog/20200428/8emxAblrBVFO.png?imageslim" alt="mark"></p><p>深度</p><p><img src="https://img.senup.cn/blog/20200428/IeTPaufOaY3L.png?imageslim" alt="mark"></p><p>重复</p><p><img src="https://img.senup.cn/blog/20200428/kTPnk7o4MOrt.png?imageslim" alt="mark"></p><p>重复个数count</p><p>找到相同元素的时候,维护count，count++</p><p><img src="https://img.senup.cn/blog/20200428/hh2mzBw379o5.png?imageslim" alt="mark"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构学习笔记-链表</title>
      <link href="p/b6ac.html"/>
      <url>p/b6ac.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>链表</strong>（Linked list）是一种常见的基础数据结构，是一种<a href="https://zh.wikipedia.org/wiki/线性表" target="_blank" rel="noopener">线性表</a>，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的<a href="https://zh.wikipedia.org/wiki/指標_(電腦科學)" target="_blank" rel="noopener">指针</a>(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的<a href="https://zh.wikipedia.org/wiki/複雜度" target="_blank" rel="noopener">复杂度</a>，比另一种线性表<a href="https://zh.wikipedia.org/wiki/顺序表" target="_blank" rel="noopener">顺序表</a>快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。</p><p>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</p><p>在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（”links”）。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。</p><p>链表可以在多种编程语言中实现。像<a href="https://zh.wikipedia.org/wiki/Lisp" target="_blank" rel="noopener">Lisp</a>和<a href="https://zh.wikipedia.org/wiki/Scheme" target="_blank" rel="noopener">Scheme</a>这样的语言的内建数据类型中就包含了链表的访问和操作。程序语言或面向对象语言，如C/C++和Java依靠易变工具来生成链表。</p><p><img src="https://img.senup.cn/blog/20200421/pjPvxxoOPwBo.png?imageslim" alt="链表"></p><a id="more"></a><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>前面学过的三种数据结构：动态数组、栈、队列，底层依托的是静态数组；靠resize解决固定容量问题。</p>            <i class="fa fa-quote-right"></i>          </blockquote><h1 id="链表：真正的动态数据结构"><a href="#链表：真正的动态数据结构" class="headerlink" title="链表：真正的动态数据结构"></a>链表：真正的动态数据结构</h1><ol><li>最简单的动态数据结构</li><li>更深入的理解引用（或者指针）</li><li>更深入的理解递归</li><li>辅助组成其他数据结构</li></ol><h1 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h1><ol><li>数据存储在“节点”（Node）中</li><li>优点：真正的动态，不需要处理固定容量的问题</li><li>缺点：丧失了随机访问的能力，即不能直接根据索引获得元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    E e;</span><br><span class="line">    Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.senup.cn/blog/20200421/sSUJbDEAm575.png?imageslim" alt="node"></p><h1 id="在链表头添加元素"><a href="#在链表头添加元素" class="headerlink" title="在链表头添加元素"></a>在链表头添加元素</h1><p>把666这个节点放在最前面，然后666节点成为链表头</p><p><img src="https://img.senup.cn/blog/20200421/yeWxwbz0MsTR.png?imageslim" alt="链表头添加元素"></p><h1 id="在链表中间添加元素"><a href="#在链表中间添加元素" class="headerlink" title="在链表中间添加元素"></a>在链表中间添加元素</h1><p><img src="https://img.senup.cn/blog/20200422/fXXWldmfCYmQ.png?imageslim" alt></p><h1 id="为链表设立虚拟头节点"><a href="#为链表设立虚拟头节点" class="headerlink" title="为链表设立虚拟头节点"></a>为链表设立虚拟头节点</h1><p>为什么这么操作呢？</p><p>是为了逻辑上每一个节点都有头结点，而不要去特殊处理最前面的节点没有头结点的问题。</p><p>本来0所对应的节点为头结点，现在指定null所在节点为虚拟节点，其中第一个节点为dummyHead.next,dummyHead并不存在</p><p><img src="https://img.senup.cn/blog/20200422/a6MRQUjSpUep.png?imageslim" alt></p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04_LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/*这里可以看到内部类Node为private是不暴露细节给外部的</span></span><br><span class="line"><span class="comment">    * 同时Node中的E以及next设置为public供外层使用*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> E e;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e,Node next)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.e=e;</span><br><span class="line">            <span class="keyword">this</span>.next=next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(e,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> e.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node dummyHead;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">//元素个数123456789，使用索引的时候记得最大到 数组【size-1】</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dummyHead=<span class="keyword">new</span> Node(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取链表中的元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回链表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在链表中间添加e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index &gt; size)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"add failed because out of range"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首先从头部开始，遍历到index-1的前一个位置在.next，在进行赋值</span></span><br><span class="line">        Node prev=dummyHead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">            prev=prev.next;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//            Node node = new Node(e);</span></span><br><span class="line"><span class="comment">//            node.next=prev.next;</span></span><br><span class="line"><span class="comment">//            prev.next=node;</span></span><br><span class="line">        <span class="comment">//等式右边完成了node赋值以及下一个节点的工作</span></span><br><span class="line">        <span class="comment">//等式左边完成node节点的前一个节点的工作</span></span><br><span class="line">        prev.next=<span class="keyword">new</span> Node(e,prev.next);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在链表头部添加一个e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(<span class="number">0</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在链表末尾添加新的元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(size, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得链表的第index个位置的元素</span></span><br><span class="line">    <span class="comment">//在链表中不是一个常用的操作 练习用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;= size)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"get failed because of illegal index;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Node cur = dummyHead.next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找链表中是否有元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        Node cur= dummyHead.next;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.e.equals(e))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从链表中删除index位置的元素，返回该元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index &gt;=size)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"remove failed because of illegal index~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Node prev= dummyHead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">            prev=prev.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node retNode = prev.next;</span><br><span class="line">        prev.next=retNode.next;</span><br><span class="line">        retNode.next=<span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> retNode.e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从链表中删除第一个元素，返回该元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从链表中删除最后一个元素，返回该元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(size-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从链表中删除某个元素</span></span><br><span class="line">    <span class="comment">//思路是先找到该元素在执行删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeElement</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        Node prev= dummyHead;</span><br><span class="line">        <span class="keyword">while</span>(prev.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prev.next.e.equals(e))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev=prev.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(prev.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            Node delNode= prev.next;</span><br><span class="line">            prev.next=delNode.next;</span><br><span class="line">            delNode.next=<span class="keyword">null</span>;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//从链表头开始遍历</span></span><br><span class="line"><span class="comment">//        Node cur = dummyHead.next;</span></span><br><span class="line"><span class="comment">//        while(cur != null)&#123;</span></span><br><span class="line"><span class="comment">//            res.append(cur+"-&gt;");</span></span><br><span class="line"><span class="comment">//            cur=cur.next;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        res.append("null");</span></span><br><span class="line">        <span class="keyword">for</span>(Node cur= dummyHead.next;cur!=<span class="keyword">null</span>;cur=cur.next)</span><br><span class="line">            res.append(cur+<span class="string">"-&gt;"</span>);</span><br><span class="line">        res.append(<span class="string">"null"</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day04_LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">            list.addFirst(i);</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;</span><br><span class="line">        list.addLast(<span class="number">100</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">boolean</span> res = list.contains(<span class="number">99</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">        System.out.println(list.getSize());</span><br><span class="line">        list.add(<span class="number">2</span>,<span class="number">222222</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.remove(<span class="number">2</span>);</span><br><span class="line">        list.removeFirst();</span><br><span class="line">        list.removeLast();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表实现栈"><a href="#链表实现栈" class="headerlink" title="链表实现栈"></a>链表实现栈</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day02_stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListStack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;E&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedListStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        list.addFirst(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.getFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(<span class="string">"Stack: top "</span>);</span><br><span class="line">        res.append(list);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedListStack&lt;Integer&gt; stack = <span class="keyword">new</span> LinkedListStack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            stack.push(i);</span><br><span class="line">            System.out.println(stack);</span><br><span class="line">        &#125;</span><br><span class="line">        stack.pop();</span><br><span class="line">        System.out.println(stack);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表实现队列"><a href="#链表实现队列" class="headerlink" title="链表实现队列"></a>链表实现队列</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day03_Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> E e;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e,Node next)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.e=e;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(e, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> e.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node head,tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedListQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        head=<span class="keyword">null</span>;</span><br><span class="line">        tail=<span class="keyword">null</span>;</span><br><span class="line">        size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tail==<span class="keyword">null</span>)&#123;</span><br><span class="line">            tail = <span class="keyword">new</span> Node(e);</span><br><span class="line">            head=tail;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            tail.next = <span class="keyword">new</span> Node(e);</span><br><span class="line">            tail=tail.next;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"dequeue failed because of empty queue;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Node retNode = head;</span><br><span class="line">        head=head.next;</span><br><span class="line">        retNode.next=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>)</span><br><span class="line">            tail=<span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> retNode.e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"empty queue;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(<span class="string">"Queue: front "</span>);</span><br><span class="line">        Node cur=head;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            res.append(cur+<span class="string">"-&gt;"</span>);</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">"null tail"</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedListQueue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedListQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            queue.enqueue(i);</span><br><span class="line">            System.out.println(queue);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">2</span>)&#123;</span><br><span class="line">                queue.dequeue();</span><br><span class="line">                System.out.println(queue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构学习笔记-队列</title>
      <link href="p/8cd.html"/>
      <url>p/8cd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>队列</strong>，又称为<strong>伫列</strong>（queue），是<a href="https://zh.wikipedia.org/wiki/先進先出演算法" target="_blank" rel="noopener">先进先出</a>（FIFO, First-In-First-Out）的<a href="https://zh.wikipedia.org/wiki/线性表" target="_blank" rel="noopener">线性表</a>。在具体应用中通常用<a href="https://zh.wikipedia.org/wiki/链表" target="_blank" rel="noopener">链表</a>或者<a href="https://zh.wikipedia.org/wiki/数组" target="_blank" rel="noopener">数组</a>来实现。队列只允许在后端（称为<em>rear</em>）进行插入操作，在前端（称为<em>front</em>）进行删除操作。队列的操作方式和<a href="https://zh.wikipedia.org/wiki/堆栈" target="_blank" rel="noopener">堆栈</a>类似，唯一的区别在于队列只允许新数据在后端进行添加。</p><p><img src="https://img.senup.cn/blog/20200421/V9d4AaeamlHC.png?imageslim" alt="时间复杂度"></p><a id="more"></a><h1 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列 Queue"></a>队列 Queue</h1><p>队列是一种先进先出的数据结构（先到先得）</p><p>first in first out</p><p><img src="https://img.senup.cn/blog/20200420/LkBE9MScuLp6.png?imageslim" alt="队列方法实现"></p><p><img src="https://img.senup.cn/blog/20200420/jb2fkCktJzvQ.png?imageslim" alt="复杂度分析"></p><p>可以看出队列每次出队都要重新排队，时间复杂度剧增。</p><h1 id="队列的实现"><a href="#队列的实现" class="headerlink" title="队列的实现"></a>队列的实现</h1><h2 id="Array-java"><a href="#Array-java" class="headerlink" title="Array.java"></a>Array.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day03_Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//声明数组</span></span><br><span class="line">    <span class="keyword">private</span> E[] data;</span><br><span class="line">    <span class="comment">//数组的元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数：往data中传入capacity 初始化长度size</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        <span class="comment">//数组的容量</span></span><br><span class="line">        data = (E[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        <span class="comment">//定义最初的个数</span></span><br><span class="line">        size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造函数，默认数组的容量为capacity=10</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数组的容量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数组中的元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回的数组是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //向所有元素后添加一个新元素</span></span><br><span class="line"><span class="comment">//    public void addLast(int e)&#123;</span></span><br><span class="line"><span class="comment">//        //由于是往后插入数值，那么对数组越界做异常处理</span></span><br><span class="line"><span class="comment">//        if(size==data.length)</span></span><br><span class="line"><span class="comment">//            throw new IllegalStateException("AddLast failed.day01_Array.Array is full~");</span></span><br><span class="line"><span class="comment">//        //思路是根据size元素个数来赋值，同时size后移一位</span></span><br><span class="line"><span class="comment">//        data[size]=e;</span></span><br><span class="line"><span class="comment">//        size++;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    //向所有元素前添加一个新元素</span></span><br><span class="line"><span class="comment">//    public void addFirst(int e)&#123;</span></span><br><span class="line"><span class="comment">//        //思路是先将除第0个元素外的所有元素，从后面开始逐个后移一位，再处理data[0]=e</span></span><br><span class="line"><span class="comment">//        for(int i=size-1;i&gt;=0;i--)&#123;</span></span><br><span class="line"><span class="comment">//            data[i+1]=data[i];</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        data[0]=e;</span></span><br><span class="line"><span class="comment">//        //下标向后移一位</span></span><br><span class="line"><span class="comment">//        size++;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//向所有元素后添加一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(size,e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向所有元素前添加一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(<span class="number">0</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在index索引的位置插入一个新的元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span><br><span class="line">        <span class="comment">//思路是先将索引后的所有元素，从后面开始逐个后移一位，再处理data[index]=e</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index &gt;size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"out of range~"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(size==data.length)</span><br><span class="line">            resize(<span class="number">2</span>*data.length);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=size-<span class="number">1</span>;i&gt;=index;i--)</span><br><span class="line">            data[i+<span class="number">1</span>]=data[i];</span><br><span class="line">        data[index]=e;</span><br><span class="line">        <span class="comment">//下标向后移一位</span></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组扩容</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">        E[] newData = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            newData[i]=data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        data=newData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取index索引位置的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Get fail because out of range"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(size-<span class="number">1</span>);<span class="comment">//元素个数和下标差1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改index所有位置的元素为e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Set fail because out of range"</span>);</span><br><span class="line">        data[index]=e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找数组中是否有元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(e))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找元素e所在的索引，如果不存在该元素，则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(e))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从数组中删除index位置的元素，返回该位置的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="comment">//思路是删除该位置，那么后面的元素应该往前移，同时数组的元素个数-1</span></span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"index is illegal~"</span>);</span><br><span class="line">        E res = data[index];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index+<span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">            data[i-<span class="number">1</span>]=data[i];<span class="comment">//后置赋值前置</span></span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="comment">//loitering objects != memory leak</span></span><br><span class="line">        data[size]=<span class="keyword">null</span>;<span class="comment">//data[size]最后的值，此时还指着一个类对象引用，为了让垃圾回收机制将其回收]</span></span><br><span class="line">        <span class="keyword">if</span>(size==data.length/<span class="number">4</span> &amp;&amp; data.length/<span class="number">2</span>!=<span class="number">0</span>)&#123;<span class="comment">//第二个条件防止了 data.length缩容到1时出现0的情况</span></span><br><span class="line">            resize(data.length/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从数组中删除第一个元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从数组中删除最后一个元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(size-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从数组中删除元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeElement</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index=find(e);</span><br><span class="line">        <span class="keyword">if</span> (index!=-<span class="number">1</span>)&#123;</span><br><span class="line">            remove(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(String.format(<span class="string">"day01_Array.Array: size = %d , capacity = %d\n"</span>, size, data.length));</span><br><span class="line">        res.append(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            res.append(data[i]);</span><br><span class="line">            <span class="comment">//若不为最后一个元素，则添加逗号</span></span><br><span class="line">            <span class="keyword">if</span>(i!=size-<span class="number">1</span>)</span><br><span class="line">                res.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">']'</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Queue-java"><a href="#Queue-java" class="headerlink" title="Queue.java"></a>Queue.java</h2><figure class="highlight java"><figcaption><span>定义接口</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day03_Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">dequeue</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">getFront</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayQueue-java"><a href="#ArrayQueue-java" class="headerlink" title="ArrayQueue.java"></a>ArrayQueue.java</h2><figure class="highlight java"><figcaption><span>实现</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day03_Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Array&lt;E&gt; array;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> Array&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> Array&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       array.addLast(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取容量 基于动态数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getCapacity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(<span class="string">"Queue: "</span>);</span><br><span class="line">        res.append(<span class="string">"front ["</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.getSize();i++)&#123;</span><br><span class="line">            res.append(array.get(i));</span><br><span class="line">            <span class="comment">//若不为最后一个元素，则添加逗号</span></span><br><span class="line">            <span class="keyword">if</span>(i!=array.getSize()-<span class="number">1</span>)</span><br><span class="line">                res.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">"] tail "</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayQueue&lt;Integer&gt; queue = <span class="keyword">new</span> ArrayQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            queue.enqueue(i);</span><br><span class="line">            System.out.println(queue);</span><br><span class="line">            <span class="comment">//每添加三个元素就取出一个元素,3-1=2,【2 5 8】</span></span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">2</span>)&#123;</span><br><span class="line">                queue.dequeue();</span><br><span class="line">                System.out.println(queue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="循环队列的实现"><a href="#循环队列的实现" class="headerlink" title="循环队列的实现"></a>循环队列的实现</h1><h2 id="解决出队时队列重排的问题"><a href="#解决出队时队列重排的问题" class="headerlink" title="解决出队时队列重排的问题"></a>解决出队时队列重排的问题</h2><p><img src="https://img.senup.cn/blog/20200420/7q5IUVXUoBTc.png?imageslim" alt="队列为空"></p><p><img src="https://img.senup.cn/blog/20200420/IFWUT0HobxqS.png?imageslim" alt="循环队列"></p><p><img src="https://img.senup.cn/blog/20200420/NyQLYe6AlIsM.png?imageslim" alt="循环"></p><p><img src="https://img.senup.cn/blog/20200420/OR98a0RmCDij.png?imageslim" alt="浪费一个空间"></p><p>这里有当(tail+1)%c==front 队列满 （ c为长度，这里为8）</p><p>举个例子：</p><p>若front==2 tail=1</p><p>(1+1)%8==2</p><p>若front=0 tail=7</p><p>(7+1)%8==0</p><h2 id="LoopQueue-java"><a href="#LoopQueue-java" class="headerlink" title="LoopQueue.java"></a>LoopQueue.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day03_Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//数组 前后两个指针 当前数组元素个数</span></span><br><span class="line">    <span class="keyword">private</span> E[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front, tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoopQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用户不知道，真实容量要加1</span></span><br><span class="line">        data = (E[]) <span class="keyword">new</span> Object[capacity + <span class="number">1</span>];</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        tail = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoopQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用父类的构造方法this()</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//有一个单位被有意识浪费掉，真正计数的时候要减去</span></span><br><span class="line">        <span class="comment">//用户不知道 真实容量应该减一</span></span><br><span class="line">        <span class="keyword">return</span> data.length - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断队列是否满-》扩容 确保有足够的空间</span></span><br><span class="line">        <span class="keyword">if</span> ((tail + <span class="number">1</span>) % data.length == front) &#123;</span><br><span class="line">            <span class="comment">//为什么要浪费一个空间呢？</span></span><br><span class="line">            resize(getCapacity() * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//扩容操作新增一个数，同时tail随着环形进行移动，元素个数加一</span></span><br><span class="line">        data[tail] = e;</span><br><span class="line">        tail = (tail + <span class="number">1</span>) % data.length;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">        E[] newData = (E[]) <span class="keyword">new</span> Object[newCapacity + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//从front开始遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newData[i] = data[(i + front) % data.length];</span><br><span class="line">        &#125;</span><br><span class="line">        data = newData;</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        tail = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//队列是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"cannot dequeue from an empty queue"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回出队的数</span></span><br><span class="line">        E ret = data[front];</span><br><span class="line">        data[front] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//front出队后 则由后一个取代</span></span><br><span class="line">        front = (front + <span class="number">1</span>) % data.length;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="comment">//如果元素个数小于数组长度的四分之一则触发缩容操作 缩容成一半</span></span><br><span class="line">        <span class="keyword">if</span> (size == getCapacity() / <span class="number">4</span> &amp;&amp; getCapacity() / <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            resize(getCapacity() / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"empty queue"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == tail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(String.format(<span class="string">"Queue: size = %d , capacity = %d\n"</span>, size, getCapacity()));</span><br><span class="line">        res.append(<span class="string">"front ["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i != tail; i = (i + <span class="number">1</span>) % data.length) &#123;<span class="comment">//把front错写成0,导致代码出错</span></span><br><span class="line">            res.append(data[i]);</span><br><span class="line">            <span class="comment">//若不为最后一个元素，则添加逗号</span></span><br><span class="line">            <span class="keyword">if</span> ((i + <span class="number">1</span>) % data.length != tail)</span><br><span class="line">                res.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">"] tail"</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LoopQueue&lt;Integer&gt; queue = <span class="keyword">new</span> LoopQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            queue.enqueue(i);</span><br><span class="line">            System.out.println(queue);</span><br><span class="line">            <span class="comment">//每添加三个元素就取出一个元素,3-1=2,【2 5 8】</span></span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                queue.dequeue();</span><br><span class="line">                System.out.println(queue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="普通队列和循环队列的时间复杂度对比"><a href="#普通队列和循环队列的时间复杂度对比" class="headerlink" title="普通队列和循环队列的时间复杂度对比"></a>普通队列和循环队列的时间复杂度对比</h2><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>只是通过一次运行得出的结果，若追求严谨，建议多运行并统计再计算出平均值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day03_Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> opCount=<span class="number">100000</span>;</span><br><span class="line">        ArrayQueue&lt;Integer&gt; arrayQueue = <span class="keyword">new</span> ArrayQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">double</span> time1 = testQueue(arrayQueue, opCount);</span><br><span class="line">        System.out.println(<span class="string">"arrayQueue runTime: "</span>+time1+<span class="string">"s"</span>);</span><br><span class="line">        LoopQueue&lt;Integer&gt; loopQueue = <span class="keyword">new</span> LoopQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">double</span> time2 = testQueue(loopQueue, opCount);</span><br><span class="line">        System.out.println(<span class="string">"loopQueue runTime: "</span>+time2+<span class="string">"s"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试使用q运行opCount个enqueue和dequeue操作所需要的时间，单位-秒</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">testQueue</span><span class="params">(Queue&lt;Integer&gt; q,<span class="keyword">int</span> opCount)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;opCount;i++)&#123;</span><br><span class="line">            <span class="comment">//nextInt在方法调用返回介于0(含)和n(不含)伪随机，均匀分布的int值。</span></span><br><span class="line">            <span class="comment">//在JDK中，整形类型是有范围的，最大值为Integer.MAX_VALUE，即2147483647，最小值为Integer.MIN_VALUE -2147483648。</span></span><br><span class="line">            q.enqueue(random.nextInt(Integer.MAX_VALUE));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;opCount;i++)&#123;</span><br><span class="line">           q.dequeue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//纳秒和秒 倍率为 九次方，除数小数点后一个零能够格式化秒为double型</span></span><br><span class="line">        <span class="keyword">return</span> (endTime-startTime)/<span class="number">1000000000.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>代码中运行十万次，在笔者的运行环境中速度相差约为 1000倍。</p><p>因此，数据结构与算法的重要性就不言而喻了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arrayQueue runTime: <span class="number">18.9686661</span>s</span><br><span class="line">loopQueue runTime: <span class="number">0.0186315</span>s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构学习笔记-栈</title>
      <link href="p/fd85.html"/>
      <url>p/fd85.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>堆栈</strong>（英语：stack）又称为<strong>栈</strong>或<strong>堆叠</strong>，是<a href="https://zh.wikipedia.org/wiki/計算機科學" target="_blank" rel="noopener">计算机科学</a>中的一种<a href="https://zh.wikipedia.org/wiki/抽象資料型別" target="_blank" rel="noopener">抽象数据类型</a>，只允许在有序的线性数据集合的一端（称为堆栈顶端，英语：top）进行加入数据（英语：push）和移除数据（英语：pop）的运算。因而按照后进先出（LIFO, Last In First Out）的原理运作。常与另一种有序的线性数据集合<a href="https://zh.wikipedia.org/wiki/佇列" target="_blank" rel="noopener">队列</a>相提并论。堆栈常用一维<a href="https://zh.wikipedia.org/wiki/陣列" target="_blank" rel="noopener">数组</a>或<a href="https://zh.wikipedia.org/wiki/連結串列" target="_blank" rel="noopener">链表</a>来实现。</p><p><img src="https://img.senup.cn/blog/20200421/gxlSmBFskIVJ.png?imageslim" alt="堆栈"></p><a id="more"></a><h1 id="栈：后进先出-Last-in-First-Out-LIFO"><a href="#栈：后进先出-Last-in-First-Out-LIFO" class="headerlink" title="栈：后进先出 Last in First Out(LIFO)"></a>栈：后进先出 Last in First Out(LIFO)</h1><h2 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h2><ul><li>编辑器中的撤销操作</li><li>程序调用的系统栈<ul><li>（比如递归）A程序执行中途，跳转到B程序执行，此时A程序的状态入栈</li><li>B程序执行中途，跳转到C程序执行，此时B程序的状态入栈</li><li>。。。。。。</li><li>执行完成后B程序的状态出栈</li><li>程序发现栈顶中只剩下A程序的状态，因此此时回到A程序运行</li></ul></li><li>编译器-括号匹配  </li></ul><h1 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h1><h2 id="Stack-lt-E-gt"><a href="#Stack-lt-E-gt" class="headerlink" title="Stack&lt;E&gt;"></a><code>Stack&lt;E&gt;</code></h2><ol><li>void push(E) 压入</li><li>E pop() 弹出</li><li>E peek() 栈顶元素</li><li>int getSize() 获取栈的元素个数</li><li>boolean isEmpty() 栈是否为空</li></ol><p>实现过程中只涉及栈顶元素的操作，因为栈的数据结构要求其他细节对用户不可见。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day02_stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/*栈的操作后入先出，因此有压入，弹出，查看栈顶元素，获取元素个数，是否为空*/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Array-java"><a href="#Array-java" class="headerlink" title="Array.java"></a>Array.java</h2><figure class="highlight java"><figcaption><span>工具类Array</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day02_stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//声明数组</span></span><br><span class="line">    <span class="keyword">private</span> E[] data;</span><br><span class="line">    <span class="comment">//数组的元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数：往data中传入capacity 初始化长度size</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        <span class="comment">//数组的容量</span></span><br><span class="line">        data = (E[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        <span class="comment">//定义最初的个数</span></span><br><span class="line">        size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造函数，默认数组的容量为capacity=10</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数组的容量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数组中的元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回的数组是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //向所有元素后添加一个新元素</span></span><br><span class="line"><span class="comment">//    public void addLast(int e)&#123;</span></span><br><span class="line"><span class="comment">//        //由于是往后插入数值，那么对数组越界做异常处理</span></span><br><span class="line"><span class="comment">//        if(size==data.length)</span></span><br><span class="line"><span class="comment">//            throw new IllegalStateException("AddLast failed.day01_Array.Array is full~");</span></span><br><span class="line"><span class="comment">//        //思路是根据size元素个数来赋值，同时size后移一位</span></span><br><span class="line"><span class="comment">//        data[size]=e;</span></span><br><span class="line"><span class="comment">//        size++;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    //向所有元素前添加一个新元素</span></span><br><span class="line"><span class="comment">//    public void addFirst(int e)&#123;</span></span><br><span class="line"><span class="comment">//        //思路是先将除第0个元素外的所有元素，从后面开始逐个后移一位，再处理data[0]=e</span></span><br><span class="line"><span class="comment">//        for(int i=size-1;i&gt;=0;i--)&#123;</span></span><br><span class="line"><span class="comment">//            data[i+1]=data[i];</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        data[0]=e;</span></span><br><span class="line"><span class="comment">//        //下标向后移一位</span></span><br><span class="line"><span class="comment">//        size++;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//向所有元素后添加一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(size,e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向所有元素前添加一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        add(<span class="number">0</span>,e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在index索引的位置插入一个新的元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span><br><span class="line">        <span class="comment">//思路是先将索引后的所有元素，从后面开始逐个后移一位，再处理data[index]=e</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index &gt;size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"out of range~"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(size==data.length)</span><br><span class="line">            resize(<span class="number">2</span>*data.length);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=size-<span class="number">1</span>;i&gt;=index;i--)</span><br><span class="line">            data[i+<span class="number">1</span>]=data[i];</span><br><span class="line">        data[index]=e;</span><br><span class="line">        <span class="comment">//下标向后移一位</span></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组扩容</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">        E[] newData = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            newData[i]=data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        data=newData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取index索引位置的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Get fail because out of range"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(size-<span class="number">1</span>);<span class="comment">//元素个数和下标差1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改index所有位置的元素为e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Set fail because out of range"</span>);</span><br><span class="line">        data[index]=e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找数组中是否有元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(e))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找元素e所在的索引，如果不存在该元素，则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i].equals(e))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从数组中删除index位置的元素，返回该位置的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="comment">//思路是删除该位置，那么后面的元素应该往前移，同时数组的元素个数-1</span></span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"index is illegal~"</span>);</span><br><span class="line">        E res = data[index];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index+<span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">            data[i-<span class="number">1</span>]=data[i];<span class="comment">//后置赋值前置</span></span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="comment">//loitering objects != memory leak</span></span><br><span class="line">        data[size]=<span class="keyword">null</span>;<span class="comment">//data[size]最后的值，此时还指着一个类对象引用，为了让垃圾回收机制将其回收]</span></span><br><span class="line">        <span class="keyword">if</span>(size==data.length/<span class="number">4</span> &amp;&amp; data.length/<span class="number">2</span>!=<span class="number">0</span>)&#123;<span class="comment">//第二个条件防止了 data.length缩容到1时出现0的情况</span></span><br><span class="line">            resize(data.length/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从数组中删除第一个元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从数组中删除最后一个元素，返回删除的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remove(size-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从数组中删除元素e</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeElement</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index=find(e);</span><br><span class="line">        <span class="keyword">if</span> (index!=-<span class="number">1</span>)&#123;</span><br><span class="line">            remove(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(String.format(<span class="string">"day01_Array.Array: size = %d , capacity = %d\n"</span>, size, data.length));</span><br><span class="line">        res.append(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            res.append(data[i]);</span><br><span class="line">            <span class="comment">//若不为最后一个元素，则添加逗号</span></span><br><span class="line">            <span class="keyword">if</span>(i!=size-<span class="number">1</span>)</span><br><span class="line">                res.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">']'</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayStack"><a href="#ArrayStack" class="headerlink" title="ArrayStack"></a>ArrayStack<e></e></h2><figure class="highlight java"><figcaption><span>通过工具类来实现栈</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day02_stack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Array&lt;E&gt; array;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*构造函数*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> Array&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        array=<span class="keyword">new</span> Array&lt;&gt; ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//压入 ：即在后面添加一个新的元素</span></span><br><span class="line">        array.addLast(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//弹出：即移除最后面的元素</span></span><br><span class="line">        <span class="keyword">return</span> array.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取容量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.getCapacity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder res=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append(<span class="string">"Stack: ["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span> ; i &lt;array.getSize();i++ )&#123;</span><br><span class="line">            res.append(array.get(i));</span><br><span class="line">            <span class="keyword">if</span>(i!=array.getSize()-<span class="number">1</span>)</span><br><span class="line">                res.append(<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(<span class="string">"] top"</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();<span class="comment">//返回构造的字符串</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h2><figure class="highlight java"><figcaption><span>测试类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day02_stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayStack&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayStack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            stack.push(i);</span><br><span class="line">            System.out.println(stack);</span><br><span class="line">        &#125;</span><br><span class="line">        stack.pop();</span><br><span class="line">        System.out.println(stack);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ArrayStack&lt;Girl&gt; arrayStack = <span class="keyword">new</span> ArrayStack&lt;&gt;();</span><br><span class="line">        arrayStack.push(<span class="keyword">new</span> Girl(<span class="string">"阿曼"</span>));</span><br><span class="line">        arrayStack.push(<span class="keyword">new</span> Girl(<span class="string">"阿真"</span>));</span><br><span class="line">        arrayStack.push(<span class="keyword">new</span> Girl(<span class="string">"阿慧"</span>));</span><br><span class="line">        arrayStack.push(<span class="keyword">new</span> Girl(<span class="string">"阿果"</span>));</span><br><span class="line">        System.out.println(arrayStack);</span><br><span class="line">        System.out.println(arrayStack.getSize());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;<span class="comment">//一开始4的位置我写的是arrayStack.getSize(),运行了两次就不在运行了，后面发现size随着下面的pop会改变，</span></span><br><span class="line">            <span class="comment">//我期望执行四次。但弹出第一次，数组的size就变为3了；弹出第二次的时候，i=2，2《3还能运行，size为2;到第三次的时候i=3&gt;2程序没运行，所以才会运行两次</span></span><br><span class="line">            arrayStack.pop();</span><br><span class="line">            System.out.println(arrayStack);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Girl-java"><a href="#Girl-java" class="headerlink" title="Girl.java"></a>Girl.java</h2><figure class="highlight java"><figcaption><span>测试用的实体类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day02_stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Girl</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Girl&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="https://img.senup.cn/blog/20200421/uR0gEiCXE1q0.png?imageslim" alt="测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构学习笔记-数组</title>
      <link href="p/1f1c.html"/>
      <url>p/1f1c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>所谓数组，是有序的元素序列。 若将有限个类型相同的变量的集合命名，那么这个名称为数组名。 组成数组的各个变量称为数组的分量，也称为数组的元素，有时也称为下标变量。 用于区分数组的各个元素的数字编号称为下标。</p><p><img src="https://img.senup.cn/blog/20200414/OKzKD54Ka2nH.png?imageslim" alt="方法一览"></p><a id="more"></a><h1 id="使用Java中的数组"><a href="#使用Java中的数组" class="headerlink" title="使用Java中的数组"></a>使用Java中的数组</h1><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明数组 通过长度</span></span><br><span class="line">        <span class="keyword">int</span>[] arr= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">            arr[i]=i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明数组 通过提前赋值</span></span><br><span class="line">        <span class="keyword">int</span>[] scores= <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">100</span>,<span class="number">99</span>,<span class="number">88</span>,<span class="number">77</span>,<span class="number">66</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">//循环打印数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;scores.length; i++)&#123;</span><br><span class="line">            System.out.print(scores[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> score:scores) &#123;</span><br><span class="line">            System.out.print(score+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增删改查</span></span><br><span class="line">        scores[<span class="number">0</span>] = <span class="number">999</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> score:scores</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.print(score+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二次封装数组"><a href="#二次封装数组" class="headerlink" title="二次封装数组"></a>二次封装数组</h1><p>Array.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] data;</span><br><span class="line">    <span class="comment">//数组的元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数：往data中传入capacity 初始化长度size</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        <span class="comment">//数组的容量</span></span><br><span class="line">        data = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];</span><br><span class="line">        <span class="comment">//定义最初的个数</span></span><br><span class="line">        size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造函数，默认数组的容量为capacity=10</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Array</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数组的容量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数组中的元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回的数组是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="重写toString"><a href="#重写toString" class="headerlink" title="重写toString()"></a>重写toString()</h1><ol><li>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</li><li>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</li><li>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</li><li>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    res.append(String.format(<span class="string">"Array: size = %d , capacity = %d\n"</span>, size, data.length));</span><br><span class="line">    res.append(<span class="string">'['</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">        res.append(data[i]);</span><br><span class="line">        <span class="comment">//若不为最后一个元素，则添加逗号</span></span><br><span class="line">        <span class="keyword">if</span>(i!=size-<span class="number">1</span>)</span><br><span class="line">            res.append(<span class="string">", "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    res.append(<span class="string">']'</span>);</span><br><span class="line">    <span class="keyword">return</span> res.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="向数组中添加元素"><a href="#向数组中添加元素" class="headerlink" title="向数组中添加元素"></a>向数组中添加元素</h1><div class="tabs" id="初级"><ul class="nav-tabs"><li class="tab active"><a href="#初级-1">Array.java</a></li><li class="tab"><a href="#初级-2">main.java</a></li><li class="tab"><a href="#初级-3">log</a></li></ul><div class="tab-content"><div class="tab-pane active" id="初级-1"><pre><code>//向所有元素后添加一个新元素public void addLast(int e){    //由于是往后插入数值，那么对数组越界做异常处理    if(size==data.length)        throw new IllegalStateException(&quot;AddLast failed.Array is full~&quot;);    //思路是根据size元素个数来赋值，同时size后移一位    data[size]=e;    size++;}//向所有元素前添加一个新元素public void addFirst(int e){    //思路是先将除第0个元素外的所有元素，从后面开始逐个后移一位，再处理data[0]=e    for(int i=size-1;i&gt;=0;i--){        data[i+1]=data[i];    }    data[0]=e;    //下标向后移一位    size++;}</code></pre></div><div class="tab-pane" id="初级-2"><pre><code>Array array = new Array(20);for(int i=0;i&lt;10;i++){    array.addLast(i);}System.out.println(array);array.addLast(1);array.addFirst(2);System.out.println(array);</code></pre></div><div class="tab-pane" id="初级-3"><p>Array: size = 10 , capacity = 20<br>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br>Array: size = 12 , capacity = 20<br>[2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1]</p></div></div></div><h3 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h3><p>实现代码复用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向所有元素前添加一个新元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    add(<span class="number">0</span>,e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向所有元素后添加一个新元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    add(size,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在index索引的位置插入一个新的元素e</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//思路是先将索引后的所有元素，从后面开始逐个后移一位，再处理data[index]=e</span></span><br><span class="line">   <span class="keyword">if</span>(size==data.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"array is full~"</span>);</span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index &gt;size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"out of range~"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=size-<span class="number">1</span>;i&gt;=index;i--)</span><br><span class="line">        data[i+<span class="number">1</span>]=data[i];</span><br><span class="line">    data[index]=e;</span><br><span class="line">    <span class="comment">//下标向后移一位</span></span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组中查询元素和修改元素"><a href="#数组中查询元素和修改元素" class="headerlink" title="数组中查询元素和修改元素"></a>数组中查询元素和修改元素</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取index索引位置的元素</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=size)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Get fail because out of range"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> data[index];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//修改index所有位置的元素为e</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=size)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Set fail because out of range"</span>);</span><br><span class="line">      data[index]=e;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="包含，搜索和删除"><a href="#包含，搜索和删除" class="headerlink" title="包含，搜索和删除"></a>包含，搜索和删除</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//获取index索引位置的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Get fail because out of range"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改index所有位置的元素为e</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;=size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"Set fail because out of range"</span>);</span><br><span class="line">    data[index]=e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找数组中是否有元素e</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data[i]==e)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找元素e所在的索引，如果不存在该元素，则返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data[i]==e)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从数组中删除index位置的元素，返回该位置的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="comment">//思路是删除该位置，那么后面的元素应该往前移，同时数组的元素个数-1</span></span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"index is illegal~"</span>);</span><br><span class="line">    <span class="keyword">int</span> res = data[index];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = index+<span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">        data[i-<span class="number">1</span>]=data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从数组中删除第一个元素，返回删除的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> remove(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从数组中删除最后一个元素，返回删除的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> remove(size-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从数组中删除元素e</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index=find(e);</span><br><span class="line">    <span class="keyword">if</span> (index!=-<span class="number">1</span>)&#123;</span><br><span class="line">        remove(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h1><p>改造数组不止使用int型，而可以存放其他任何数据类型.</p><p>同时，使用泛型就不能使用基本数据类型了，而要使用相对应的包装类。</p><p><img src="https://img.senup.cn/blog/20200414/iEaj57Gp7TwU.png?imageslim" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Array&lt;E&gt; //改造成泛型</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;<span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", score="</span> + score +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Array&lt;Student&gt; arr = <span class="keyword">new</span> Array&lt;&gt;();</span><br><span class="line">        arr.addLast(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">50</span>));</span><br><span class="line">        arr.addLast(<span class="keyword">new</span> Student(<span class="string">"李四"</span>,<span class="number">60</span>));</span><br><span class="line">        arr.addLast(<span class="keyword">new</span> Student(<span class="string">"王五"</span>,<span class="number">90</span>));</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Array: size = <span class="number">3</span> , capacity = <span class="number">10</span></span><br><span class="line">[Student&#123;name='张三', score=<span class="number">50</span>&#125;, Student&#123;name='李四', score=<span class="number">60</span>&#125;, Student&#123;name='王五', score=<span class="number">90</span>&#125;]</span><br></pre></td></tr></table></figure><h1 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h1><p>即不浪费空间也要保证容量扩容合理。</p><p>方法：生成新数组，扩容，同时把旧数组的值赋值过来，再让老数组指向新数组。</p><p>当长度不够的时候进行扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在index索引的位置插入一个新的元素e</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//思路是先将索引后的所有元素，从后面开始逐个后移一位，再处理data[index]=e</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index &gt;size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"out of range~"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(size==data.length)</span><br><span class="line">        resize(<span class="number">2</span>*data.length);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=size-<span class="number">1</span>;i&gt;=index;i--)</span><br><span class="line">        data[i+<span class="number">1</span>]=data[i];</span><br><span class="line">    data[index]=e;</span><br><span class="line">    <span class="comment">//下标向后移一位</span></span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组扩容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">    E[] newData = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">        newData[i]=data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    data=newData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lazy缩容"><a href="#Lazy缩容" class="headerlink" title="Lazy缩容"></a>Lazy缩容</h2><p>在remove方法中添加如下代码，采用懒加载模式，当删除元素过多时，数组中元素个数缩减到四分之一时，容量缩减一半。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从数组中删除index位置的元素，返回该位置的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(size==data.length/<span class="number">4</span>)&#123;</span><br><span class="line">        resize(data.length/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="均摊复杂度和防止复杂度的震荡"><a href="#均摊复杂度和防止复杂度的震荡" class="headerlink" title="均摊复杂度和防止复杂度的震荡"></a>均摊复杂度和防止复杂度的震荡</h1><p>原来缩容时一旦少于一半即缩容。为了防止数组处在边界时，添加元素以及删减元素，进行resize，频繁resize,导致时间复杂度剧增。</p><p>出现问题的原因就是：删除数组元素时resize过于着急，激进。</p><p>解决方案就是上面的lazy缩容。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客进阶写作技巧</title>
      <link href="p/86f9.html"/>
      <url>p/86f9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文介绍了Hexo 中常用的内置标签，包括 文本居中引用，note 标签、label 标签、button 标签、tab 标签以及代码块的高级用法，通过使用写作标签可以快速编写样式丰富的文档片段。</p><a id="more"></a><h1 id="文本居中引用"><a href="#文本居中引用" class="headerlink" title="文本居中引用"></a>文本居中引用</h1><p>效果：</p><blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>你是巨大的海洋<br>我是雨落在你身上<br>我看到远方<br>爱情的模样</p>            <i class="fa fa-quote-right"></i>          </blockquote><p>源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% cq %&#125;</span><br><span class="line">你是巨大的海洋</span><br><span class="line">我是雨落在你身上</span><br><span class="line">我看到远方</span><br><span class="line">爱情的模样</span><br><span class="line">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure><h1 id="tab-标签"><a href="#tab-标签" class="headerlink" title="tab 标签"></a>tab 标签</h1><p>首先还是需要在Next主题配置文件中配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">文件位置：~/blog/themes/next/_config.yml#</span> <span class="string">Tabs</span> <span class="string">tag.</span></span><br><span class="line"><span class="attr">tabs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">transition:</span></span><br><span class="line">    <span class="attr">tabs:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">labels:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>使用示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Tab标签列表 %&#125;</span><br><span class="line">  <span class="comment">&lt;!-- tab 标签页1 --&gt;</span></span><br><span class="line">    标签页1文本内容</span><br><span class="line">  <span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- tab 标签页2 --&gt;</span></span><br><span class="line">    标签页2文本内容</span><br><span class="line">  <span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- tab 标签页3 --&gt;</span></span><br><span class="line">    标签页3文本内容</span><br><span class="line">  <span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="tab标签列表"><ul class="nav-tabs"><li class="tab active"><a href="#tab标签列表-1">标签页1</a></li><li class="tab"><a href="#tab标签列表-2">标签页2</a></li><li class="tab"><a href="#tab标签列表-3">标签页3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab标签列表-1"><p>  标签页1文本内容</p></div><div class="tab-pane" id="tab标签列表-2"><p>  标签页2文本内容</p></div><div class="tab-pane" id="tab标签列表-3"><p>  标签页3文本内容</p></div></div></div><p>tab 标签用于快速创建 tab 选项卡，语法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs [Unique name], [index] %&#125;</span><br><span class="line">  &lt;!-- tab [Tab caption]@[icon] --&gt;</span><br><span class="line">  标签页内容（支持行内标签）</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>其中，各参数意义如下：</p><blockquote><ul><li>Unique name: 全局唯一的 Tab 名称，将作为各个标签页的 id 属性前缀</li><li>index: 当前激活的标签页索引，如果未定义则默认选中显示第一个标签页，如果设为 - 1 则默认隐藏所有标签页</li><li>Tab caption: 当前标签页的标题，如果不指定则会以 Unique name 加上索引作为标题</li><li>icon: 在标签页标题中添加 Font awesome 图标</li></ul></blockquote><p>需要注意的是：标签内嵌套代码的话，首尾要去掉三个`，也就是不能指定编程语言</p><h1 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h1><p>首先需要在Next主题<code>_config.xml</code>中配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Label tag.</span></span><br><span class="line"><span class="attr">label:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>通过 label 标签可以为文字添加背景色，语法如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label [<span class="keyword">class</span>]@text  %&#125;</span><br></pre></td></tr></table></figure><p>支持的 class 种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，默认使用 <code>default</code> 作为缺省。</p><p>使用示例如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label <span class="keyword">default</span>@默认 %&#125;</span><br><span class="line">&#123;% label info@信息 %&#125;</span><br><span class="line">&#123;% label warning@警告 %&#125;</span><br><span class="line">&#123;% label success@成功 %&#125; </span><br><span class="line">&#123;% label primary@原始 %&#125;</span><br><span class="line">&#123;% label danger@危险 %&#125;</span><br></pre></td></tr></table></figure><span class="label default">默认</span><span class="label info">信息</span><span class="label warning">警告</span><span class="label success">成功</span> <span class="label primary">原始</span><span class="label danger">危险</span><p>可在主题配置文件中设置 <code>label: false</code> 来取消 label 标签默认 CSS 样式。</p><h1 id="note标签"><a href="#note标签" class="headerlink" title="note标签"></a>note标签</h1><p>在 Next 主题的配置文件<code>_config.yml</code> 中找到下面的部分，目前有 3 种 style 可选，这里我选用的 <code>flat</code>，其他两种大家可以自行试一下效果，另外图标的显示与否也可在此配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/themes/next/_config.yml</span></span><br><span class="line"><span class="comment"># Note tag (bs-callout)</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line"><span class="comment"># Note tag style values:</span></span><br><span class="line"><span class="comment"># - simple    bs-callout old alert style. Default.</span></span><br><span class="line"><span class="comment"># - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line"><span class="comment"># - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line"><span class="comment"># - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;default&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="note default"><p>default</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;primary&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="note primary"><p>primary</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;success&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="note success"><p>success</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;info&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="note info"><p>info</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;warning&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="note warning"><p>warning</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;danger&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="note danger"><p>danger</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;note danger no-icon&quot;&gt;&lt;p&gt;danger no-icon&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="note danger no-icon"><p>danger no-icon</p></div><h2 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h2><p>1、没有定义样式类别</p><div class="note ">            <p>(没有定义样式类别)</p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note %&#125;</span><br><span class="line">(没有定义样式类别)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2、默认的类别</p><div class="note default">            <p>默认形式的类别</p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">默认形式的类别</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3、primary形式的类别</p><div class="note primary">            <p>首要类型形式</p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note primary %&#125;</span><br><span class="line">首要类型形式</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4、info形式的类别</p><div class="note info">            <p>info形式的类别</p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note info %&#125;</span><br><span class="line">info形式的类别</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5、success形式的类别</p><div class="note success">            <p>success形式的类别</p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note success %&#125;</span><br><span class="line">success形式的类别</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>6、warning形式的类别</p><div class="note warning">            <p>warning形式的类别</p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning形式的类别</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>7、danger形式的类别</p><div class="note danger">            <p>danger形式的类别</p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger形式的类别</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h1 id="button标签"><a href="#button标签" class="headerlink" title="button标签"></a>button标签</h1><p>效果：</p><a class="btn" href="https://www.baidu.com" target="_blank" rel="noopener">            <i class="fa fa-download fa-lg fa-fw"></i>点击下载百度          </a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn https://www.baidu.com, 点击下载百度, download fa-lg fa-fw %&#125;</span><br></pre></td></tr></table></figure><p>关于按钮的更多使用可以前往<a href="https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test" target="_blank" rel="noopener">这个页面</a>查看。</p><h1 id="代码块进阶用法"><a href="#代码块进阶用法" class="headerlink" title="代码块进阶用法"></a>代码块进阶用法</h1><p>可以通过为代码块附加参数的形式为其添加更丰富的信息提示，效果如下：</p><figure class="highlight java"><figcaption><span>Hellow World</span><a href="https://www.senup.cn/p/86f9.html">链接</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] data;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><p>代码块进阶语法规则：</p><p>参数可选：[language] [title] [url] [link text]<br>如<code>java Hellow World https://www.senup.cn/ 链接</code></p><p>其中，各参数意义如下：</p><blockquote><ul><li>langugae：语言名称，引导渲染引擎正确解析并高亮显示关键字</li><li>title：代码块标题，将会显示在左上角</li><li>url：链接地址，如果没有指定 link text 则会在右上角显示 link</li><li>link text：链接名称，指定 url 后有效，将会显示在右上角</li></ul></blockquote><p><em>url 必须为有效链接地址才会以链接的形式显示在右上角，否则将作为标题显示在左上角。以 url 为分界，左侧除了第一个单词会被解析为 language，其他所有单词都会被解析为 title，而右侧的所有单词都会被解析为 link text。</em></p><p>如果不想填写 title，可以在 language 和 url 之间添加至少三个空格。</p><p>代码块支持多种语言高亮预设，详细的语言列表可查看 <a href="https://almostover.ru/2016-07/hexo-highlight-code-styles/" target="_blank" rel="noopener">Ivan.nginx | Hexo 代码块中的颜色方案</a>。</p><p>可以在站点配置文件中设置 <code>highlight.auto_detect: true</code> 来开启自动语言检测高亮。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_config.yml highlight:</span><br><span class="line">   enable: true</span><br><span class="line">   line_number: false</span><br><span class="line"><span class="deletion">-  auto_detect: false</span></span><br><span class="line"><span class="addition">+  auto_detect: true</span></span><br><span class="line">   tab_replace:</span><br></pre></td></tr></table></figure><p>如果设置语言为 diff，可以在代码前添加 <code>+</code> 和 <code>-</code> 来使用如上所示的高亮增删行提示效果，在展示代码改动痕迹时比较实用。</p><p>更多代码块高亮的个性化设置请参见 <a href="https://www.ofind.cn/blog/HEXO/HEXO下的语法高亮拓展修改.html#设置代码添加删除标记" target="_blank" rel="noopener">猪猪侠 | Hexo 下的语法高亮拓展修改</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>慢慢喜欢你</title>
      <link href="p/7456.html"/>
      <url>p/7456.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe src="//player.bilibili.com/player.html?aid=24504918&cid=41158073&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="450" height="400"> </iframe><a id="more"></a>### 周二珂：《慢慢喜欢你》<blockquote><p>弹幕演员真的笑死我了哈哈哈哈哈<br>二珂：“刚才吻了你一下你也喜欢对吗？”<br>弹幕：“对对对对对对！”<br>二珂：“晚餐后的甜点就点你喜欢的吧”<br>弹幕：“好好好好好好！”<br>二珂：“今晚就换你去床的右边睡吧”<br>弹幕：“行行行行行行！”<br>二珂：“球鞋手表袜子和衬衫都已经烫好放行李箱”<br>弹幕：“谢谢老婆，但是手表已经烫坏了！”<br>二珂：“早上等着你起床”<br>弹幕：“老婆我起啦！爱你！啵啵！”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的大学生活</title>
      <link href="p/415b.html"/>
      <url>p/415b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我啊，一个软件工程的学生，在一个很普通的本科大学读书。</p><p>说起来我的大学生活真的蛮失败的。没参加过多少比赛，也没得过什么牛逼的奖。别人女朋友都换了好几个，而我大学都没谈过恋爱，也没有女生喜欢，朋友也没认识几个，就连旅游也没去过几个地方，虽然在大学的城市生活了两年了，但是一点也不熟悉。</p><a id="more"></a><p>高考粗心填报志愿导致误入信息与计算科学，一个听上去像计算机专业的数学专业。迷迷糊糊学了一年数学，始终是学不懂数学分析这种证明类的玩意儿。让我感到欣慰的是转专业成功，换了专业，换了校区，换了室友。</p><p>也曾追过一个女孩子，喜提了好人卡。那也是大学里为数不多的一次心动，刚认识她的那段时间是我生命中很快乐的一段时光，让我做了很多新的尝试，不过最后也是归于平静，做回自己。也是这个时候，看了很多书，心理学的书，慢慢开导自己，在人际关系中读懂了很多潜台词，尊重他人。</p><p>大学里我不太喜欢学习专业知识，我也不喜欢打游戏和刷综艺，所以为了打发时间去学了吉他。弹的水平一般，唱歌也很一般。人比较难接受的就是发现自己的缺点——跑调，所以中途有放弃的念头。我跟我的吉他老师说，那我学吉他弹给自己听就行了。他说：我们学吉他要学会分享，分享给我们身边的朋友。吉他不只是只有弹唱，还可以有指弹。所以也就慢慢坚持了下来，努力变得更好。</p><p>十一月的时候，遇到一个女孩儿。在我很难过的时候，她嘻嘻哈哈追问道：朋友间就应该说出烦恼啊，不要憋在心里，然后她开始说自己的事情巴拉巴拉…看着她，这是我第一次感受到有人愿意倾听自己的不开心，有人愿意接纳自己，我很幸运，有这么一个朋友。</p><p>大学的圈子很小。我有很棒的室友们，班上也有几个不错的死党，女生朋友也慢慢认识了一些。虽然有些人因为失去交集没怎么联系了，不过开心的是偶尔还能听到她们的消息，希望大家都过得好。</p><p>虽然我并不喜欢学习枯燥的专业知识，但是我并不讨厌软件工程这个专业。这是我自己的选择，我自己会花时间学点小技术，一个人慢慢沉浸其中，做着自己认为很酷的东西，殊途同归。其实写代码的时光也是快乐的，有点像一个工匠，一雕一刻，慢慢完善自己的作品，我很喜欢这种创造性的工作。对了，后来我也成为了计算机人工智能实验室的一员，有自己的小隔间去安静写代码。</p><p>以后要做什么呢？我想了很久，我想给自己喜欢的人带来幸福。我会因为别人的幸福而感到幸福。为此，我会慢慢努力成为一个Java研发工程师。只有自己有足够的经济能力之后才能满足自己，同时关心他人。爱人先爱己，现阶段，不断充实自己。</p><p>未来的日子里，好好学习，找一份好工作。</p><p>最后，这个博客是我一时兴起搭建而成的，我思考后，决定记录一些自己学习的东西以及生活琐事。由于是给自己看的，因此写的不会过于细致，只是记录罢了。</p><blockquote><p>我会努力过得好，希望你也是。</p></blockquote><hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=41462193&auto=1&height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
